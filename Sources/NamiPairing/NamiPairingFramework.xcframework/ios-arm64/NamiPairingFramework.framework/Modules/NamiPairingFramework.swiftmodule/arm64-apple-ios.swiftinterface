// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NamiPairingFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import CommonCrypto
import CoreBluetooth
import CryptoKit
import Foundation
@_exported import NamiPairingFramework
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
extension Combine.Publishers {
  public struct RetryIf<Upstream> : Combine.Publisher where Upstream : Combine.Publisher {
    public typealias Output = Upstream.Output
    public typealias Failure = Upstream.Failure
    public let publisher: Upstream
    public let retries: Swift.Int
    public let condition: (Upstream.Failure) -> Swift.Bool
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, Upstream.Failure == S.Failure, Upstream.Output == S.Input
  }
}
extension Foundation.URLRequest {
  public init(method: Swift.String = "GET", base: Foundation.URL, path: Swift.String, query: [Swift.String : Swift.String], headers: [Swift.String : Swift.String] = [:], body: Foundation.Data? = nil)
  public init(method: Swift.String = "GET", base: Foundation.URL, path: Swift.String, query: [Foundation.URLQueryItem] = [], headers: [Swift.String : Swift.String] = [:], body: Foundation.Data? = nil)
}
extension Combine.Publisher {
  public func retry(_ retries: Swift.Int, if condition: @escaping (Self.Failure) -> Swift.Bool) -> Combine.Publishers.RetryIf<Self>
}
@_hasMissingDesignatedInitializers final public class InMemoryThreadDatasetStorage : NamiPairingFramework.ThreadSecureStorageProtocol {
  public static func storeOrUpdate(with data: Foundation.Data, at key: Swift.String, server: Swift.String)
  public static func retrieve(at key: Swift.String, server: Swift.String) -> Swift.Result<Foundation.Data, NamiPairingFramework.InMemoryThreadDatasetStorage.Thread_SecureStorageError>
  public static func delete(at key: Swift.String, server: Swift.String)
  public typealias Thread_SecureStorageError = NamiPairingFramework.InMemoryThreadDatasetStorage.StorageError
  public enum StorageError : Swift.Error {
    case cantRetrieve
    public static func == (a: NamiPairingFramework.InMemoryThreadDatasetStorage.StorageError, b: NamiPairingFramework.InMemoryThreadDatasetStorage.StorageError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
public enum AuthenticationError : Swift.Error {
  case loginRequired
  case unknown
  public static func == (a: NamiPairingFramework.AuthenticationError, b: NamiPairingFramework.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PublicWiFiNetwork : Swift.Equatable {
  public var ssid: Swift.String
  public var rssi: Swift.Int32
  public var open: Swift.Bool
  public var bssid: Foundation.Data
  public init()
  public static func == (a: NamiPairingFramework.PublicWiFiNetwork, b: NamiPairingFramework.PublicWiFiNetwork) -> Swift.Bool
}
public struct PublicPairingAdvertisement : Swift.Equatable {
  public var version: Swift.Int32
  public var productID: Swift.Int32
  public var discriminator: Swift.Int32
  public init()
  public static func == (a: NamiPairingFramework.PublicPairingAdvertisement, b: NamiPairingFramework.PublicPairingAdvertisement) -> Swift.Bool
}
public struct ThreadScanResult : Swift.Equatable {
  public var panID: Swift.UInt32
  public var extendedPanID: Swift.UInt64
  public var networkName: Swift.String
  public var channel: Swift.UInt32
  public var version: Swift.UInt32
  public var extendedAddress: Swift.UInt64
  public var rssi: Swift.Int32
  public var lqi: Swift.UInt32
  public init()
  public static func == (a: NamiPairingFramework.ThreadScanResult, b: NamiPairingFramework.ThreadScanResult) -> Swift.Bool
}
public struct PublicPairingError : Swift.Equatable {
  public enum ErrorType : Swift.Equatable {
    public typealias RawValue = Swift.Int
    case unknownError
    case secureSessionError
    case cloudChallengeError
    case wifiScanError
    case wifiJoinError
    case wifiJoinPasswordError
    case wifiJoinIpError
    case threadScanError
    case threadJoinError
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public static func == (a: NamiPairingFramework.PublicPairingError.ErrorType, b: NamiPairingFramework.PublicPairingError.ErrorType) -> Swift.Bool
  }
  public var error: NamiPairingFramework.PublicPairingError.ErrorType
  public static func == (a: NamiPairingFramework.PublicPairingError, b: NamiPairingFramework.PublicPairingError) -> Swift.Bool
}
public struct NetworkError : Swift.Error {
  public init(statusCode: Swift.Int, body: Foundation.Data? = nil)
  public init(_ urlError: Foundation.URLError, body: Foundation.Data? = nil)
  public static var unknown: NamiPairingFramework.NetworkError
  public let code: NamiPairingFramework.NetworkErrorCode
  public var isRecoverable: Swift.Bool {
    get
  }
  public var customErrorDescription: Swift.String? {
    get
  }
  public func decodeBody<ErrorBody>(to type: ErrorBody.Type) -> ErrorBody? where ErrorBody : Swift.Decodable
}
public enum NetworkErrorCode : Swift.Equatable {
  case unknown(Swift.Int)
  case connectionError(Foundation.URLError)
  case invalidParameters
  case unauthorized
  case notFound
  case conflict
  case serverError
  public init(statusCode: Swift.Int)
  public init(urlError: Foundation.URLError)
  public var code: Swift.Int {
    get
  }
  public static func == (lhs: NamiPairingFramework.NetworkErrorCode, rhs: NamiPairingFramework.NetworkErrorCode) -> Swift.Bool
}
extension NamiPairingFramework.ThreadOperationalDatasetProvider : NamiPairingFramework.PairingThreadOperationalDatasetProviderProtocol {
  public typealias Pairing_NamiThreadOperationalDataset = NamiPairingFramework.NamiThreadOperationalDataset
}
extension NamiPairingFramework.NamiThreadOperationalDataset : NamiPairingFramework.PairingNamiThreadOperationalDatasetProtocol {
}
public struct Device : NamiPairingFramework.DeviceProtocol, Swift.Decodable, Swift.Equatable {
  public var id: NamiPairingFramework.DeviceID
  public var uid: NamiPairingFramework.DeviceUniversalID
  public var urn: Swift.String
  public var model: NamiPairingFramework.DeviceModel
  public var deviceState: NamiPairingFramework.DeviceCloudState?
  public static func == (a: NamiPairingFramework.Device, b: NamiPairingFramework.Device) -> Swift.Bool
  public typealias DeviceCloudState = NamiPairingFramework.DeviceCloudState
  public typealias DeviceModel = NamiPairingFramework.DeviceModel
  public init(from decoder: Swift.Decoder) throws
}
public struct DeviceCloudState : NamiPairingFramework.DeviceCloudStateProtocol, Swift.Decodable, Swift.Equatable {
  public var payload: Foundation.Data
  public static func == (a: NamiPairingFramework.DeviceCloudState, b: NamiPairingFramework.DeviceCloudState) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct DeviceModel : NamiPairingFramework.DeviceModelProtocol, Swift.Decodable, Swift.Equatable {
  public var codeName: Swift.String
  public var productLabel: Swift.String
  public var productId: NamiPairingFramework.DeviceProductID
  public static func == (a: NamiPairingFramework.DeviceModel, b: NamiPairingFramework.DeviceModel) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct Place : Swift.Decodable, Swift.Equatable, Swift.Identifiable {
  public var id: NamiPairingFramework.PlaceID
  public static func == (a: NamiPairingFramework.Place, b: NamiPairingFramework.Place) -> Swift.Bool
  public typealias ID = NamiPairingFramework.PlaceID
  public init(from decoder: Swift.Decoder) throws
}
public struct PlaceZone : NamiPairingFramework.PlaceZoneProtocol, Swift.Decodable, Swift.Equatable, Swift.Identifiable {
  public var id: NamiPairingFramework.PlaceZoneID
  public var externalId: Swift.String
  public var urn: Swift.String
  public var name: Swift.String
  public static func == (a: NamiPairingFramework.PlaceZone, b: NamiPairingFramework.PlaceZone) -> Swift.Bool
  public typealias ID = NamiPairingFramework.PlaceZoneID
  public init(from decoder: Swift.Decoder) throws
}
public struct Room : Swift.Codable, Swift.Equatable, Swift.Identifiable {
  public var id: NamiPairingFramework.RoomID
  public static func == (a: NamiPairingFramework.Room, b: NamiPairingFramework.Room) -> Swift.Bool
  public typealias ID = NamiPairingFramework.RoomID
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PairingChallengeRequest : Swift.Encodable {
  public init(certificate: Swift.String)
  public var certificate: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PairDeviceRequest : Swift.Encodable {
  public init(deviceName: Swift.String, cloudChallenge: Swift.String, deviceResponse: Swift.String, deviceCertificate: Swift.String, intent: Swift.String?)
  public var deviceName: Swift.String
  public var cloudChallenge: Swift.String
  public var deviceResponse: Swift.String
  public var deviceCertificate: Swift.String
  public var intent: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UpdatedDevice : NamiPairingFramework.UpdatedDeviceProtocol, Swift.Decodable {
  public var uid: NamiPairingFramework.DeviceUniversalID
  public static func == (a: NamiPairingFramework.UpdatedDevice, b: NamiPairingFramework.UpdatedDevice) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct WiFiCredentialsUpdateSession : NamiPairingFramework.WiFiCredentialsUpdateSessionProtocol, Swift.Decodable {
  public var id: NamiPairingFramework.WiFiCredentialsUpdateSessionID
  public var zoneId: NamiPairingFramework.PlaceZoneID
  public var updatedDevices: [NamiPairingFramework.UpdatedDevice]?
  public static func == (a: NamiPairingFramework.WiFiCredentialsUpdateSession, b: NamiPairingFramework.WiFiCredentialsUpdateSession) -> Swift.Bool
  public typealias UpdatedDevice = NamiPairingFramework.UpdatedDevice
  public init(from decoder: Swift.Decoder) throws
}
public class NamiPairing<Container> where Container : NamiPairingFramework.PairingStepsContainer {
  public typealias PairingParameters = NamiPairingFramework.Tomonari<Container>.PairingParameters
  public enum SDKError : Swift.Error {
    case sessionActivateNoData
    case sessionActivateMalformedResponse(Foundation.Data)
    case roomUuidNotInTopology
  }
  public var api: NamiPairingFramework.PairingWebAPIProtocol
  public var wifiStorage: NamiPairingFramework.PairingWiFiStorageProtocol
  public var threadDatasetProvider: NamiPairingFramework.PairingThreadOperationalDatasetProviderProtocol
  public var devicePairingState: Combine.PassthroughSubject<NamiPairingFramework.Tomonari<Container>.DevicePairingState, Swift.Error> {
    get
  }
  public init<WiFiStorage, SecureStorage>(sessionCode: Swift.String, wifiStorage: WiFiStorage = InMemoryWiFiStorage(), threadDatasetStore: SecureStorage.Type = InMemoryThreadDatasetStorage.self) throws where WiFiStorage : NamiPairingFramework.PairingWiFiStorageProtocol, SecureStorage : NamiPairingFramework.ThreadSecureStorageProtocol
  public func startPairing(roomId: Swift.String, pairingSteps: Container, pairingParameters: NamiPairingFramework.NamiPairing<Container>.PairingParameters = .none) throws -> some SwiftUI.View
  
  @objc deinit
}
final public class InMemoryWiFiStorage : NamiPairingFramework.PairingWiFiStorageProtocol {
  public init()
  final public func save(password: Swift.String?, for networkSSID: Swift.String)
  final public func password(for networkSSID: Swift.String) -> Swift.String?
  final public func removeAll()
  @objc deinit
}
public enum NamiDeviceCapability : Swift.Equatable {
  case motionCSI
  case deviceInfo
  case devKitOnOff
  case relayMono
  case ledSentinelPlug
  case mainSwitch
  case soundAlarm
  public static let `default`: [NamiPairingFramework.NamiDeviceCapability]
  public static let plug: [NamiPairingFramework.NamiDeviceCapability]
  public static let sentinel_pod: [NamiPairingFramework.NamiDeviceCapability]
  public static let devkit: [NamiPairingFramework.NamiDeviceCapability]
  public static let pebble: [NamiPairingFramework.NamiDeviceCapability]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: NamiPairingFramework.NamiDeviceCapability, b: NamiPairingFramework.NamiDeviceCapability) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum MeasurementSystem {
  case metric
  case uk
  case us
  public static func == (a: NamiPairingFramework.MeasurementSystem, b: NamiPairingFramework.MeasurementSystem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUI.EnvironmentValues {
  public var measurementSystem: NamiPairingFramework.MeasurementSystem {
    get
  }
}
extension Foundation.Locale {
  public var systemOfMeasurements: Swift.String? {
    get
  }
  public static let metricMeasurementSystem: Swift.String
  public static let usMeasurementSystem: Swift.String
  public static let ukMeasurementSystem: Swift.String
}
public struct CodeLinkingInfo : Swift.Decodable, Swift.Equatable {
  public init(code: NamiPairingFramework.SignInCode, requestedAt: Foundation.Date, expiresAt: Foundation.Date, ip: Swift.String? = nil, browser: Swift.String? = nil, os: Swift.String? = nil, city: Swift.String? = nil, country: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public var code: NamiPairingFramework.SignInCode
  public var requestedAt: Foundation.Date
  public var expiresAt: Foundation.Date
  public var ip: Swift.String?
  public var browser: Swift.String?
  public var os: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public static func == (a: NamiPairingFramework.CodeLinkingInfo, b: NamiPairingFramework.CodeLinkingInfo) -> Swift.Bool
}
extension NamiPairingFramework.NamiDeviceModel {
  public static let preset: [NamiPairingFramework.NamiDeviceModel]
}
public enum NamiDeviceConnectivity {
  case hasWiFi
  case hasThread
  public static func == (a: NamiPairingFramework.NamiDeviceConnectivity, b: NamiPairingFramework.NamiDeviceConnectivity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.CharacterSet {
  public static var hexDigits: Foundation.CharacterSet
}
extension Swift.String {
  public func replacingCharacters(from characterSet: Foundation.CharacterSet, with replacement: Swift.String) -> Swift.String
}
public typealias TokenString = Swift.String
public typealias UserID = Swift.Int64
public typealias UserIconID = Swift.Int64
public typealias URN = Swift.String
public typealias PlaceID = Swift.Int64
public typealias UserPermissionsSet = [Swift.String]
public typealias PlaceZoneID = Swift.Int64
public typealias ThemeID = Swift.Int64
public typealias IconID = Swift.Int64
public typealias PlaceUserID = Swift.Int64
public typealias RoomID = Swift.Int64
public typealias DeviceProductID = Swift.Int64
public typealias DeviceID = Swift.Int64
public typealias NamiAlertID = Swift.Int64
public typealias EventID = Swift.Int64
public typealias InviteCode = Swift.String
public typealias SessionCode = Swift.String
public typealias SignInCode = Swift.String
public typealias SessionPermission = Swift.String
public typealias WiFiCredentialsUpdateSessionID = Swift.Int64
public typealias PropertyTypeID = Swift.Int64
public typealias PropertyElevationID = Swift.Int64
public typealias PropertyAvgFloorAreaID = Swift.Int64
public struct DeviceUniversalID : Swift.Equatable, Swift.Decodable, Swift.Hashable {
  public init?(_ string: Swift.String)
  public init(_ number: Swift.UInt64)
  public init(from decoder: Swift.Decoder) throws
  public var macFormatted: Swift.String {
    get
  }
  public static func == (a: NamiPairingFramework.DeviceUniversalID, b: NamiPairingFramework.DeviceUniversalID) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NamiPairingFramework.DeviceUniversalID : Swift.Comparable {
  public static func < (lhs: NamiPairingFramework.DeviceUniversalID, rhs: NamiPairingFramework.DeviceUniversalID) -> Swift.Bool
}
extension NamiPairingFramework.DeviceUniversalID : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NamiPairingFramework.DeviceUniversalID {
  public static func randomValue() -> NamiPairingFramework.DeviceUniversalID
}
extension NamiPairingFramework.DeviceUniversalID : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension Swift.UInt64 {
  public init?(_ uid: NamiPairingFramework.DeviceUniversalID)
}
public struct NamiDeviceModel : Swift.Equatable {
  public init(codeName: Swift.String, hardwareModel: Swift.String, productLabel: Swift.String, productId: NamiPairingFramework.DeviceProductID, capabilities: [NamiPairingFramework.NamiDeviceCapability], connectivity: [NamiPairingFramework.NamiDeviceConnectivity])
  public var codeName: Swift.String
  public var hardwareModel: Swift.String
  public var productLabel: Swift.String
  public var productId: NamiPairingFramework.DeviceProductID
  public var capabilities: [NamiPairingFramework.NamiDeviceCapability]
  public var connectivity: [NamiPairingFramework.NamiDeviceConnectivity]
  public static func == (a: NamiPairingFramework.NamiDeviceModel, b: NamiPairingFramework.NamiDeviceModel) -> Swift.Bool
}
extension NamiPairingFramework.NamiDeviceModel {
  public static let unknown: NamiPairingFramework.NamiDeviceModel
}
public enum NamiAlertMode : Swift.Int, Swift.Comparable, Swift.Codable {
  case armed
  case aware
  case relaxed
  public static func < (lhs: NamiPairingFramework.NamiAlertMode, rhs: NamiPairingFramework.NamiAlertMode) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias NamiI18n = NamiPairingFramework.I18n
extension NamiPairingFramework.I18n.SignUp {
  public static func localizedButtonTitle(for providerName: Swift.String) -> Swift.String
}
public enum I18n {
  public static let accountLinkingDidYouMakeThisRequest: Swift.String
  public static let accountLinkingSignInConfirmedBodyMessage: Swift.String
  public static let accountLinkingSignInError: Swift.String
  public static let appName: Swift.String
  public static let appNameDebug: Swift.String
  public static let areYouWantToCancelPairingProcess: Swift.String
  public static let confirmCancelPairing: Swift.String
  public static let defaultNotificationChannelId: Swift.String
  public static let defaultNotificationChannelName: Swift.String
  public static let deviceDetailsTooltipConnect: Swift.String
  public static let deviceDetailsTooltipNotConnect: Swift.String
  public static let deviceIsDisconnectedToInternet: Swift.String
  public static let externalSigninContinueOauth: Swift.String
  public static let fcmMessageTitle: Swift.String
  public static let internetConnection: Swift.String
  public static let invitationDetailsRevoke: Swift.String
  public static let invitationDetailsRevokeRevokeAlertMessage: Swift.String
  public static let localConnectionWithMobile: Swift.String
  public static func memberDetailsLeaveMessage(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let memberDetailsLeavePlace: Swift.String
  public static let memberDetailsRemoveMember: Swift.String
  public static func memberDetailsRemovePeopleMessage(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeCreation: Swift.String
  public static func placeDetailNumberOfZone(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsEventUserRemoveMessage(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeDetailsEvents: Swift.String
  public static let placeDetailsGraph: Swift.String
  public static let placeDetailsGraphLive: Swift.String
  public static func placeDetailsMemberPendingExpiryTime(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeDetailsMemberPendingExpiryTimeDays(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMemberPendingExpiryTimeDaysWithHours(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
  public static func placeDetailsMemberPendingExpiryTimeHours(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMemberPendingExpiryTimeMinutes(_ p1: Swift.Int) -> Swift.String
  public static let placeDetailsMembersActive: Swift.String
  public static func placeDetailsMembersDays(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMembersHours(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMembersMinutes(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMembersMonths(_ p1: Swift.Int) -> Swift.String
  public static let placeDetailsPeople: Swift.String
  public static let placeResumeSetUpAKit: Swift.String
  public static func placeSettingsDevicesDescription(_ p1: Swift.Int) -> Swift.String
  public static func placeSettingsDevicesDescriptionAndroid(_ p1: Swift.Int) -> Swift.String
  public static let placeSettingsZeroDeviceDescription: Swift.String
  public static func placeSettingsZonesDescription(_ p1: Swift.Int) -> Swift.String
  public static func placeSettingsZonesDescriptionAndroid(_ p1: Swift.Int) -> Swift.String
  public static let profileAccount: Swift.String
  public static let profileAppVersion: Swift.String
  public static let profileCustomer: Swift.String
  public static let profileHelpNFeedback: Swift.String
  public static let profileInstaller: Swift.String
  public static let profileLinkedThirdPartyAccounts: Swift.String
  public static let profileLinkedThirdPartyAccountsNotLinkYet: Swift.String
  public static let profileLinkedThirdPartyAccountsUnlink: Swift.String
  public static let profileSettings: Swift.String
  public static let profileSupportArticle: Swift.String
  public static let profileUser: Swift.String
  public static let setupAKitHowToPlaceDeviceNonFirstPairedDeviceGuideContent1: Swift.String
  public static let setupAKitHowToPlaceDeviceNonFirstPairedDeviceGuideContent2Imperial: Swift.String
  public static let setupAKitHowToPlaceDeviceNonFirstPairedDeviceGuideContent2Metric: Swift.String
  public static let welcomePagePolicy: Swift.String
  public enum AccountLinking {
    public static let authorizeSignInRequest: Swift.String
    public static let pleaseSignin: Swift.String
    public static func signInRequestIpTimeBrowser(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func signInRequestPlaceIpTimeBrowserAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum Activity {
    public static let motion: Swift.String
    public static let motionDetectedIn: Swift.String
    public static let noMotion: Swift.String
    public static let noPresence: Swift.String
    public static let presence: Swift.String
    public static let presenceDetectedIn: Swift.String
    public static let title: Swift.String
    public static let totalMotionTime: Swift.String
    public enum Event {
      public static let ongoing: Swift.String
    }
  }
  public enum Alarm {
    public static func detectedAt(_ p1: Any, _ p2: Any) -> Swift.String
    public static func detectedAtAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let disarm: Swift.String
    public static func intrusionDescription(_ p1: Any, _ p2: Any) -> Swift.String
    public static func intrusionDescriptionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let intrusionTitle: Swift.String
    public static let reportFalse: Swift.String
    public enum FalseAlarm {
      public static func causeListTitle(_ p1: Any) -> Swift.String
      public static let reportButtonTitle: Swift.String
      public static func reportHint(_ p1: Any) -> Swift.String
      public static let selectCauseTitle: Swift.String
      public static let title: Swift.String
      public enum Cause {
        public static let myself: Swift.String
        public static let other: Swift.String
        public static let smallMovingObjects: Swift.String
      }
      public enum SensitivityExplanatio {
        public static let adjustSensitivityButton: Swift.String
        public static let armSelectedZones: Swift.String
        public static let possibleReasons: Swift.String
        public static let sensitivityLevelHint: Swift.String
      }
      public enum SensitivityExplanation {
        public static let reduceFalseAlarmsTitle: Swift.String
      }
    }
    public enum LiveAlarm {
      public static func activitiesStopped(_ p1: Any) -> Swift.String
      public static func noActivity(_ p1: Any) -> Swift.String
      public static func ongoingActivity(_ p1: Any) -> Swift.String
      public static let securityMonitoring: Swift.String
      public static func startedAtInZone(_ p1: Any, _ p2: Any) -> Swift.String
      public static func stoppedActivity(_ p1: Any) -> Swift.String
    }
    public enum Pill {
      public static func alarmTriggered(_ p1: Any) -> Swift.String
    }
    public enum Reason {
      public static let co2: Swift.String
      public static let fire: Swift.String
      public static let flood: Swift.String
      public static let intrusion: Swift.String
    }
    public enum Report {
      public static let alarmDisarmed: Swift.String
      public static let alarmTriggered: Swift.String
      public static let duration: Swift.String
      public static func eventStartEndTime(_ p1: Any, _ p2: Any) -> Swift.String
      public static let securityLog: Swift.String
      public static func startedAt(_ p1: Any) -> Swift.String
      public static func subjectHistory(_ p1: Any) -> Swift.String
      public static let title: Swift.String
      public static func totalActiveTime(_ p1: Any) -> Swift.String
      public static let zonesAffected: Swift.String
    }
  }
  public enum ChangeUsername {
    public static let emptyErrorMessage: Swift.String
    public static let placeholder: Swift.String
    public static let promptMessage: Swift.String
  }
  public enum ChooseRoom {
    public static let confirm: Swift.String
    public static let createRoom: Swift.String
    public static let header: Swift.String
    public static let loadDataFailed: Swift.String
    public static let selectOrCreateHeader: Swift.String
  }
  public enum ChooseZone {
    public static let confirm: Swift.String
    public static let createZone: Swift.String
    public static let header: Swift.String
    public static let loadDataFailed: Swift.String
    public static let noDevices: Swift.String
    public static func threadDevicesCount(_ p1: Any) -> Swift.String
    public static func wifiDevicesCount(_ p1: Any) -> Swift.String
  }
  public enum CommissioningMode {
    public enum CheckupZone {
      public static let contactIsntaller: Swift.String
    }
    public enum CompanionLanding {
      public static let cancel: Swift.String
      public static let contactSupport: Swift.String
      public static let goToPlaceButton: Swift.String
      public static let loadingInfo: Swift.String
      public static let placeFound: Swift.String
    }
    public enum ConfirmPlace {
      public static let confirmButton: Swift.String
      public static let namePlaceHint: Swift.String
      public static let namePlacePlaceholder: Swift.String
    }
    public enum LoadingScreen {
      public static let loadingContent: Swift.String
    }
    public enum PlaceDetails {
      public static let addDevice: Swift.String
      public static let addDevicesHint: Swift.String
      public static let addZone: Swift.String
      public static let contactIsntaller: Swift.String
      public static let createdAt: Swift.String
      public static let createdAtAndroid: Swift.String
      public static let exitButton: Swift.String
      public static let finishSetupButton: Swift.String
      public static let renamePlaceButton: Swift.String
      public static let updatedAt: Swift.String
      public static let updatedAtAndroid: Swift.String
      public static let zonesSectionTitle: Swift.String
    }
    public enum SetupModeSettings {
      public static let exitSetup: Swift.String
      public static let installer: Swift.String
      public static let placeSettings: Swift.String
      public static let settings: Swift.String
      public static let user: Swift.String
    }
  }
  public enum Companion {
    public static let addZone: Swift.String
    public static let editPlaceNameHint: Swift.String
    public static let exitSetup: Swift.String
    public static let exitSetupAndroid: Swift.String
    public static let zoneHealth: Swift.String
    public static let zoneMotionSensing: Swift.String
    public static let zones: Swift.String
    public enum Home {
      public static let contactYourInstallerToSetUpYourPlace: Swift.String
    }
    public enum ZoneHealth {
      public static let checkAllDevices: Swift.String
      public static let degraded: Swift.String
      public static let healthy: Swift.String
      public static let unhealthy: Swift.String
      public static let worksWell: Swift.String
    }
    public enum ZoneMotionSensing {
      public static let connectLocalWifi: Swift.String
      public static let dataNotAvailable: Swift.String
      public static let movementDetected: Swift.String
      public static let noMovementDetected: Swift.String
    }
  }
  public enum ConfirmPlaceName {
    public static let buttonConfirm: Swift.String
    public static let header: Swift.String
    public static let subhead: Swift.String
  }
  public enum ConfirmRoomName {
    public static let buttonConfirm: Swift.String
    public static let header: Swift.String
    public static let subhead: Swift.String
  }
  public enum ConnectivityIndicator {
    public static let deviceConnected: Swift.String
    public static let deviceDisconnected: Swift.String
    public static func deviceRssi(_ p1: Swift.Int) -> Swift.String
  }
  public enum CreateFirstPlace {
    public static let cancel: Swift.String
    public static let createPlace: Swift.String
    public static let createPlaceSlideText: Swift.String
    public static let joinPlace: Swift.String
    public static let joinPlaceSlideText: Swift.String
    public static let letsStart: Swift.String
    public static let welcomeText: Swift.String
  }
  public enum CreatePlace {
    public static let sectionTitle: Swift.String
  }
  public enum CreateZone {
    public static let buttonConfirm: Swift.String
    public static let description: Swift.String
    public static let enterName: Swift.String
    public static let enterNameHint: Swift.String
    public static let header: Swift.String
    public static let nameTheZoneDescription: Swift.String
    public static let placeholder: Swift.String
    public static let secondFloorPlaceholder: Swift.String
    public static let title: Swift.String
  }
  public enum Dashboard {
    public static let addNewPlace: Swift.String
    public static let addNewUser: Swift.String
    public static let fineMessage: Swift.String
    public static let lastSeen: Swift.String
    public static let people: Swift.String
    public static let places: Swift.String
    public enum PlaceTile {
      public static let addOneMoreDevice: Swift.String
      public static let addTwoDevices: Swift.String
      public static let checkYourDeviceSetup: Swift.String
      public static let currentStatus: Swift.String
      public static let intrusionDetected: Swift.String
      public static let movementDetected: Swift.String
      public static let noMovementDetected: Swift.String
      public static let noSensingData: Swift.String
      public static let notAvailable: Swift.String
      public static let pairKit: Swift.String
      public static let pairMore: Swift.String
      public static let pairOneMore: Swift.String
      public static let pairTwo: Swift.String
      public static func sinceStartedDate(_ p1: Any) -> Swift.String
      public static func sinceStartedDateAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum DeletePlace {
    public static let confirmDeletePlace: Swift.String
    public static let confirmLeavePlace: Swift.String
    public static let deleteAllRelatedData: Swift.String
    public static let deleteAllRelatedDataDescription: Swift.String
    public static let deletePlaceAndData: Swift.String
    public static let deletePlaceTitle: Swift.String
    public static let inviteAgain: Swift.String
    public static let leavePlaceTitle: Swift.String
    public static let loseAccessToAllData: Swift.String
    public static let loseAccessToAllDataDescription: Swift.String
    public static let loseAccessToAllDevices: Swift.String
    public static let loseAccessToAllDevicesDescription: Swift.String
    public static let removeAllUsers: Swift.String
    public static let removeAllUsersDescription: Swift.String
    public static let resetAllDevices: Swift.String
    public static let resetAllDevicesDescription: Swift.String
    public static let thisActionIsIrreversible: Swift.String
    public static let thisWillAlso: Swift.String
  }
  public enum DeviceDetails {
    public static let connected: Swift.String
    public static func deleteDeviceFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func loadDataFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let relay: Swift.String
    public static func toggleDeviceFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum DeviceEdit {
    public static let customizeDeviceDescription: Swift.String
    public static let customizeDeviceTitle: Swift.String
    public static let deviceInfoDescription: Swift.String
    public static let deviceInfoTitle: Swift.String
    public static let deviceNamePlaceholder: Swift.String
    public static let title: Swift.String
  }
  public enum DeviceEngines {
    public static let motion: Swift.String
    public static let security: Swift.String
    public static let unknown: Swift.String
  }
  public enum DeviceInfo {
    public static let bbsid: Swift.String
    public static let borderRouter: Swift.String
    public static let bssid: Swift.String
    public static let cloudConnection: Swift.String
    public static let deviceConnected: Swift.String
    public static let deviceDisconnected: Swift.String
    public static let deviceModel: Swift.String
    public static let deviceModelId: Swift.String
    public static let deviceName: Swift.String
    public static let firmvareVesrion: Swift.String
    public static let firmwareAutomaticUpdateHint: Swift.String
    public static let localConnection: Swift.String
    public static let macAddress: Swift.String
    public static let nonBorderRouter: Swift.String
    public static let pairedAt: Swift.String
    public static let panid: Swift.String
    public static let role: Swift.String
    public static let room: Swift.String
    public static let rssi: Swift.String
    public static let technicalInformation: Swift.String
    public static let threadNetwork: Swift.String
    public static let title: Swift.String
    public static let wifiNetwork: Swift.String
    public static let zone: Swift.String
  }
  public enum DeviceInstructions {
    public static let bulletPoint1: Swift.String
    public static let bulletPoint2: Swift.String
    public static let bulletPoint3: Swift.String
    public static let bulletPoint4: Swift.String
    public static let confirmButton: Swift.String
    public static let description: Swift.String
    public static let title: Swift.String
  }
  public enum DeviceOverview {
    public static let connection: Swift.String
    public static let schedule: Swift.String
    public static let siren: Swift.String
    public static let status: Swift.String
    public static func waitingForConnection(_ p1: Any) -> Swift.String
    public static func waitingForConnectionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let zone: Swift.String
    public enum Connection {
      public static let cloud: Swift.String
      public static let direct: Swift.String
      public static let lost: Swift.String
    }
    public enum Deletion {
      public static func deleteAlertMessage(_ p1: Any, _ p2: Any) -> Swift.String
      public static let deleteAlertMessageAndroid: Swift.String
      public static let deleteAlertTitle: Swift.String
      public static let deleteButton: Swift.String
      public static let deleteConfirm: Swift.String
    }
    public enum Relay {
      public static let explanation: Swift.String
      public static let isOff: Swift.String
      public static let isOn: Swift.String
    }
    public enum Wifi {
      public static let disconnected: Swift.String
      public static let good: Swift.String
      public static let poor: Swift.String
    }
  }
  public enum DevicePlacement {
    public static let confirmButton: Swift.String
    public static let firstDeviceSetup: Swift.String
    public static let firstDeviceSetupStep1: Swift.String
    public static let firstDeviceSetupStep2: Swift.String
    public static let firstDeviceSetupStep2Imperial: Swift.String
    public static let firstDeviceSetupStep2Metric: Swift.String
    public static let remainingDevicesSetup: Swift.String
    public static let remainingDevicesSetupStep1Imprerial: Swift.String
    public static let remainingDevicesSetupStep1Metric: Swift.String
    public static let remainingDevicesSetupStep2: Swift.String
    public static let remainingDevicesSetupStep2Imperial: Swift.String
    public static let remainingDevicesSetupStep2Metric: Swift.String
    public static let remainingDevicesSetupStep3: Swift.String
    public static let remainingDevicesSetupStep4: Swift.String
  }
  public enum DevicePlacementNotice {
    public static let notice: Swift.String
    public static func noticeKnownZone(_ p1: Any) -> Swift.String
    public static func noticeKnownZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum DeviceSettings {
    public static let customizeDeviceDescription: Swift.String
    public static let customizeDeviceTitle: Swift.String
    public static let deviceInfoDescription: Swift.String
    public static let deviceInfoTitle: Swift.String
    public static let errorDeviceNotFound: Swift.String
    public static let removeDevice: Swift.String
    public static func removeDeviceName(_ p1: Any) -> Swift.String
    public static let technicalInformationSubtitleThread: Swift.String
    public static let technicalInformationSubtitleWifi: Swift.String
    public static let title: Swift.String
  }
  public enum Devices {
    public static let addNewDevice: Swift.String
    public static let addNewRoom: Swift.String
    public static let addNewZone: Swift.String
    public static let informationAutoUpdate: Swift.String
  }
  public enum EditDevice {
    public static let editDeviceNameHint: Swift.String
    public static let editDeviceTitle: Swift.String
  }
  public enum EditIcon {
    public static let header: Swift.String
  }
  public enum EditPlace {
    public static let category: Swift.String
    public static let color: Swift.String
    public static let deleteButton: Swift.String
    public static let deviceEngine: Swift.String
    public static let devices: Swift.String
    public static let devicesAndroid: Swift.String
    public static func devicesInZone(_ p1: Any, _ p2: Any) -> Swift.String
    public static func devicesInZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let editPlace: Swift.String
    public static let editPlaceAndroid: Swift.String
    public static let editPlaceDescription: Swift.String
    public static let enterName: Swift.String
    public static let icon: Swift.String
    public static let location: Swift.String
    public static let pluralDevicesAndroid: Swift.String
    public static let sensitivity: Swift.String
    public static let zeroDeviceAndroid: Swift.String
    public enum DeletePlace {
      public static let guideDescription2Android: Swift.String
      public static let guideDescription4Android: Swift.String
      public static let guideDescription6Android: Swift.String
      public static let guideDescriptionAndroid: Swift.String
    }
    public enum Deletion {
      public static func deleteAlertMessage(_ p1: Any) -> Swift.String
      public static let deleteAlertMessageAndroid: Swift.String
      public static let deleteAlertTitle: Swift.String
      public static let deleteButton: Swift.String
      public static let deleteConfirm: Swift.String
    }
    public enum LeavePlace {
      public static let guideDescription4Android: Swift.String
      public static let guideTitle: Swift.String
    }
  }
  public enum EditProfile {
    public static func loadFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func saveFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum EditRoom {
    public static let category: Swift.String
    public static let deleteButton: Swift.String
    public static let deleteDisabledHint: Swift.String
    public static func deleteFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func deleteZoneFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let editRoom: Swift.String
    public static let enterName: Swift.String
    public static let icon: Swift.String
    public static func loadFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func saveFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public enum Deletion {
      public static let deleteRoomAlertMessage: Swift.String
      public static let deleteZoneAlertMessage: Swift.String
    }
  }
  public enum EditUserProfile {
    public static let chooseImageColor: Swift.String
    public static let chooseProfileImage: Swift.String
    public static let emptyErrorMessage: Swift.String
    public static let placeholder: Swift.String
    public static let profileName: Swift.String
    public static let title: Swift.String
  }
  public enum EditZone {
    public static let deleteAlertDescription: Swift.String
    public static let deleteAlertTitle: Swift.String
    public static let deleteButton: Swift.String
    public static let deleteDisabledHint: Swift.String
    public static let editZone: Swift.String
    public static let enterName: Swift.String
  }
  public enum EngineSettings {
    public static let engineSettingsDescription: Swift.String
    public static let motionEngine: Swift.String
    public static let motionEngineDescription: Swift.String
    public static let saveButton: Swift.String
    public static let securityEngine: Swift.String
    public static let securityEngineDescription: Swift.String
    public static let title: Swift.String
  }
  public enum Errors {
    public enum Authentication {
      public static let loginRequired: Swift.String
      public static let title: Swift.String
    }
    public enum LinkingError {
      public static let responseParseError: Swift.String
      public static let title: Swift.String
    }
    public enum MoveDeviceError {
      public static let noDeviceSelected: Swift.String
      public static let title: Swift.String
    }
    public enum NetworkError {
      public static func conflict(_ p1: Any) -> Swift.String
      public static func connectionError(_ p1: Any) -> Swift.String
      public static func invalidParameters(_ p1: Any) -> Swift.String
      public static func notFound(_ p1: Any) -> Swift.String
      public static func serverError(_ p1: Any) -> Swift.String
      public static let title: Swift.String
      public static func unauthorized(_ p1: Any) -> Swift.String
      public static func unknown(_ p1: Any) -> Swift.String
    }
    public enum Pairing {
      public static let timedOutConnectWifi: Swift.String
      public enum DeviceNotFound {
        public static let description: Swift.String
        public static let title: Swift.String
      }
      public enum IncorrectWifiPassword {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
    public enum PairingErrorDevice {
      public static let cloudChallengeError: Swift.String
      public static let secureSessionError: Swift.String
      public static let threadJoinError: Swift.String
      public static let threadScanError: Swift.String
      public static let title: Swift.String
      public static let unknownUnrecognized: Swift.String
      public static let wifiJoinError: Swift.String
      public static let wifiJoinIpError: Swift.String
      public static let wifiJoinPasswordError: Swift.String
      public static let wifiScanError: Swift.String
    }
    public enum PairingMachine {
      public static let deserializationError: Swift.String
      public static let encryptionError: Swift.String
      public static let seanceError: Swift.String
      public static let serializationError: Swift.String
      public static let title: Swift.String
      public static let unexpectedMessage: Swift.String
      public static let unexpectedState: Swift.String
    }
    public enum PairingThreadSetupError {
      public static let mixedEnvironment: Swift.String
      public static let threadNetworkNotFound: Swift.String
      public static let threadOperationalDatasetMissing: Swift.String
    }
  }
  public enum ExternalSignin {
    public static let checkIfUsersRequest: Swift.String
    public static let confirmRequest: Swift.String
    public static let confirmedTitle: Swift.String
    public static func fromLocation(_ p1: Any) -> Swift.String
    public static func onOs(_ p1: Any) -> Swift.String
    public static let rejectRequest: Swift.String
    public static let requestedTitle: Swift.String
    public static func signinRequestPeekDescription(_ p1: Any, _ p2: Any, _ p3: Any, _ p4: Any) -> Swift.String
    public static let succe: Swift.String
    public static let successMessage: Swift.String
    public static func withBrowser(_ p1: Any) -> Swift.String
    public enum RequestCode {
      public static let codeScreenTitle: Swift.String
      public static let grantAccess: Swift.String
      public static let instructions: Swift.String
      public static let pasteboardAccessExplained: Swift.String
    }
  }
  public enum Faq {
    public static let title: Swift.String
  }
  public enum General {
    public static let camera: Swift.String
    public static let cancel: Swift.String
    public static let delete: Swift.String
    public static let deleting: Swift.String
    public static let done: Swift.String
    public static let error: Swift.String
    public static let errorDescription: Swift.String
    public static let intrusionTriggered: Swift.String
    public static let loading: Swift.String
    public static let more: Swift.String
    public static let move: Swift.String
    public static let next: Swift.String
    public static let no: Swift.String
    public static let notification: Swift.String
    public static let ok: Swift.String
    public static let save: Swift.String
    public static let saving: Swift.String
    public static let success: Swift.String
    public static let unavailable: Swift.String
    public static let yes: Swift.String
  }
  public enum Homepage {
    public enum EmptyPlace {
      public static let createPlace: Swift.String
      public static func welcome(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum IntrusionEventReport {
    public static let intrusionHistory: Swift.String
  }
  public enum IntrusionHistory {
    public static let errorDataNotFound: Swift.String
    public static let humanMotion: Swift.String
    public static let noMotion: Swift.String
    public static func timestamp(_ p1: Any) -> Swift.String
    public static let title: Swift.String
  }
  public enum IntrusionLiveView {
    public static let noActivitySinceIntrusionBega: Swift.String
  }
  public enum InvitationDetail {
    public static let acceptButton: Swift.String
    public static let agreementDetails: Swift.String
    public static let cancelButton: Swift.String
    public static let declineButton: Swift.String
    public static func hello(_ p1: Any) -> Swift.String
    public static func helloAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let inviteFound: Swift.String
    public static let inviteNotFound: Swift.String
    public static func question(_ p1: Any) -> Swift.String
    public static func questionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let retrievingInviteDetails: Swift.String
    public static let role: Swift.String
  }
  public enum InviteDetails {
    public static let askRevokeButton: Swift.String
    public static let askShareButton: Swift.String
    public static let confirmRevokeButton: Swift.String
    public static func inviteExpirationText(_ p1: Any) -> Swift.String
    public static func inviteExpirationTextAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let inviteExpired: Swift.String
    public static func inviteExpiresInText(_ p1: Any) -> Swift.String
    public static func inviteExpiresInTextAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func inviteTitle(_ p1: Any) -> Swift.String
    public static func inviteTitleAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func revokeAlertMessage(_ p1: Any) -> Swift.String
    public static func revokeAlertMessageAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let revokeAlertTitle: Swift.String
  }
  public enum JoinPlace {
    public static let cameraPermissionGuide: Swift.String
    public static let invalidInvite: Swift.String
    public static let invalidQrCode: Swift.String
    public static let inviteFound: Swift.String
    public static let retrievingInvite: Swift.String
    public static func roleGuide(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let roleGuideAdmin: Swift.String
    public static let scanAgain: Swift.String
    public static let scanInviteQr: Swift.String
  }
  public enum LetsAddDevice {
    public static let chooseRoom: Swift.String
    public static let createRoom: Swift.String
    public static let dismissScreen: Swift.String
    public static let header: Swift.String
  }
  public enum ManageDevices {
    public static let emptyPlace: Swift.String
  }
  public enum MotionHistory {
    public static let activeTime: Swift.String
    public static let activeZones: Swift.String
    public static let duration: Swift.String
    public static func formatHour(_ p1: Swift.Int) -> Swift.String
    public static func formatHours(_ p1: Swift.Int) -> Swift.String
    public static func formatMinute(_ p1: Swift.Int) -> Swift.String
    public static func formatSecond(_ p1: Swift.Int) -> Swift.String
    public static let intensity: Swift.String
    public static let motion: Swift.String
    public static let noMotion: Swift.String
    public static let notAvailable: Swift.String
    public static let sensingDataNotAvailable: Swift.String
    public static let title: Swift.String
    public static let today: Swift.String
    public enum Tile {
      public static let history: Swift.String
      public static let today: Swift.String
      public static let totalActiveTime: Swift.String
    }
  }
  public enum MotionNow {
    public static let connectToWifi: Swift.String
    public static let connectToWifiAsZone: Swift.String
    public static let connectToWifiYourDeviceUsing: Swift.String
    public static func formatActiveZones(_ p1: Swift.Int) -> Swift.String
    public static func formatActiveZonesAndroid(_ p1: Swift.Int) -> Swift.String
    public static let goToWifiSettings: Swift.String
    public static let howPlaceGraphWorks: Swift.String
    public static let howPlaceGraphWorksDescription: Swift.String
    public static let intensity: Swift.String
    public static let max: Swift.String
    public static let min: Swift.String
    public static let motionDetectedIn: Swift.String
    public static let noSensingData: Swift.String
    public static let now: Swift.String
    public static let thirtySecsAgo: Swift.String
    public static let title: Swift.String
    public enum Tile {
      public static let connectToWifi: Swift.String
      public static let more: Swift.String
      public static let movementDetected: Swift.String
      public static let noMovementDetected: Swift.String
      public static let noSensingData: Swift.String
      public static func numberOfActiveZones(_ p1: Any) -> Swift.String
      public static func numberOfActiveZonesAndroid(_ p1: Swift.Int) -> Swift.String
      public static let toViewMotionNow: Swift.String
    }
  }
  public enum NewInvite {
    public static let generateInviteButton: Swift.String
    public static let inviteDescription: Swift.String
    public static let inviteTitle: Swift.String
    public static let inviteeNamePlaceholder: Swift.String
    public static let inviteeNameTitle: Swift.String
  }
  public enum Notification {
    public static let goToSettings: Swift.String
    public static func missingPermission(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func missingPermissionDesc(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let permissionGuide: Swift.String
  }
  public enum PairDevice {
    public static let goToSettings: Swift.String
    public static func missingPermission(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func missingPermissionDesc(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let permissionBluetooth: Swift.String
    public static let permissionLocationAndBluetooth: Swift.String
    public static let permissionLocationAndBluetoothUsages: Swift.String
  }
  public enum Pairing {
    public static let cameraPermissionGuide: Swift.String
    public static let cancel: Swift.String
    public static let done: Swift.String
    public static let exit: Swift.String
    public static let exitSetup: Swift.String
    public static let no: Swift.String
    public static let other: Swift.String
    public static let scanBluetoothError: Swift.String
    public static let success: Swift.String
    public enum AddAnotherNetwork {
      public static let title: Swift.String
    }
    public enum AskToConnect {
      public static let connectToWifi: Swift.String
      public static let connectToWifiFirstDescription: Swift.String
      public static func connectToWifiRemainingDescription(_ p1: Any) -> Swift.String
      public static let remainingThreadDevice: Swift.String
      public static let remainingThreadDeviceDescription: Swift.String
      public static let threadBorderRouter: Swift.String
      public static let threadBorderRouterDescription: Swift.String
      public enum FirstThreadDevice {
        public static let description1: Swift.String
        public static let description2: Swift.String
        public static let description3: Swift.String
      }
      public enum FirstWifiDevice {
        public static func description1(_ p1: Any) -> Swift.String
        public static let description2: Swift.String
      }
      public enum NonFirstThreadDevice {
        public static let description1: Swift.String
        public static let description2: Swift.String
        public static func description3(_ p1: Any) -> Swift.String
      }
      public enum NonFirstWifiDevice {
        public static func description1(_ p1: Any) -> Swift.String
      }
      public enum WifiDeviceImperialDistance {
        public static let description: Swift.String
      }
      public enum WifiDeviceMetricDistance {
        public static let description: Swift.String
      }
    }
    public enum AskToConnectToWifi {
      public static let header: Swift.String
      public static let useSameWifi: Swift.String
      public static func useSameWifiAsZone(_ p1: Any) -> Swift.String
    }
    public enum BluetoothDeviceFound {
      public static let explainedReadyToPair: Swift.String
      public static let header1: Swift.String
      public static func header1Known(_ p1: Any) -> Swift.String
      public static func header1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let header2: Swift.String
      public static let headerConnectToPower: Swift.String
      public static let nameDeviceExplained: Swift.String
      public static func nameDeviceHeader(_ p1: Any) -> Swift.String
      public static let nextButton: Swift.String
    }
    public enum BluetoothUsageHint {
      public static let confirm: Swift.String
      public static let header: Swift.String
    }
    public enum ConfirmCancelPairing {
      public static let description: Swift.String
      public static let title: Swift.String
    }
    public enum ConnectSuccess {
      public static func deviceHasBeenSetupInZone(_ p1: Any, _ p2: Any) -> Swift.String
      public static let setupAnotherDevice: Swift.String
    }
    public enum ConnectWifi {
      public static func inputPassword(_ p1: Any) -> Swift.String
      public static let noWiFiNetworksFound: Swift.String
      public static let setUpAsBorderRouter: Swift.String
      public static let settingUpThisDevice: Swift.String
      public static let settingUpYourDevice: Swift.String
      public static let title: Swift.String
    }
    public enum DeviceSetup {
      public static let navigagtionTitle: Swift.String
    }
    public enum EnableBluetoothInSettings {
      public static let bluetoothDisabled: Swift.String
      public static let buttonSettings: Swift.String
      public static let header: Swift.String
    }
    public enum EnterWifiPassword {
      public static let buttonGoBack: Swift.String
      public static let buttonReadyToConnect: Swift.String
      public static let enterPassword: Swift.String
      public static func header(_ p1: Any) -> Swift.String
      public static func headerAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let passwordEntryFieldHint: Swift.String
      public static let passwordPlaceholder: Swift.String
    }
    public enum Errors {
      public static let actionIgnore: Swift.String
      public static let actionRestart: Swift.String
      public static let actionTryAgain: Swift.String
      public static func errorOccurredDescription(_ p1: Any) -> Swift.String
      public static func errorOccurredDescriptionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let errorOccurredTitle: Swift.String
    }
    public enum ExitDeviceSetup {
      public static let description: Swift.String
      public static let title: Swift.String
    }
    public enum FinishingSetup {
      public static let gameOfPong: Swift.String
      public static let header: Swift.String
    }
    public enum ListWifiNetworks {
      public static let apOutOfReach: Swift.String
      public static let availableNetworks: Swift.String
      public static let buttonCancelPairing: Swift.String
      public static let buttonContinue: Swift.String
      public static let buttonOtherNetwork: Swift.String
      public static let buttonRefresh: Swift.String
      public static let connectWifiTitle: Swift.String
      public static let forget: Swift.String
      public static let foundSavedPassword: Swift.String
      public static let header: Swift.String
      public static func header2Android(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func header2BssidPinnedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let lookingForNetworks: Swift.String
      public static let noNetworksFound: Swift.String
      public static let proceed: Swift.String
      public static let retryingForNetworks: Swift.String
      public static let selectNetwork: Swift.String
      public static func useSavedPassword(_ p1: Any) -> Swift.String
      public static func useSavedPasswordAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let warning: Swift.String
    }
    public enum LoadingDevice {
      public static func connecting(_ p1: Any) -> Swift.String
    }
    public enum MultizonesGuide {
      public static let alertModesExplanation: Swift.String
      public static let cancelPairingButton: Swift.String
      public static let continueButton: Swift.String
      public static let enterFirstZoneName: Swift.String
      public static let invitation: Swift.String
      public static let keepSingleZoneButton: Swift.String
      public static let keepSingleZoneDescription: Swift.String
      public static let nameSecondZoneDescription: Swift.String
      public static let renameDefaultZoneDescription: Swift.String
      public static let severalZonesExplanation: Swift.String
      public static let shortDescription: Swift.String
      public static let skipExplanationButton: Swift.String
      public static let updateToMultizones: Swift.String
      public static let upgradeToMultizonesButton: Swift.String
    }
    public enum OtherWifiNetwork {
      public static let buttonBack: Swift.String
      public static let deviceConnectivityHint: Swift.String
      public static let header: Swift.String
      public static let networkNamePlaceholder: Swift.String
    }
    public enum PairedSuccessfully {
      public static let buttonDone: Swift.String
      public static let buttonPairAnother: Swift.String
      public static let buttonReturn: Swift.String
      public static let buttonUpdateAnother: Swift.String
      public static let header1: Swift.String
      public static func header1Known(_ p1: Any) -> Swift.String
      public static func header1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let header2: Swift.String
      public static func header2Known(_ p1: Any) -> Swift.String
      public static func header2KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let header3: Swift.String
    }
    public enum PowerOnAndScanning {
      public static let askUserToWait: Swift.String
      public static let header1: Swift.String
      public static let header2: Swift.String
      public static let scanning: Swift.String
    }
    public enum ScanDevice {
      public static let connectingToThisDevice: Swift.String
      public static let pleaseHold: Swift.String
      public static let searchingForDevice: Swift.String
      public enum MissingBluetoothLocationPermissions {
        public static let description: Swift.String
        public static let title: Swift.String
      }
      public enum MissingBluetoothPermission {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
    public enum ScanQr {
      public static let subtitle: Swift.String
      public static let title: Swift.String
      public enum CodeError {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
    public enum ScanQrcode {
      public enum MissingCameraPermission {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
  }
  public enum Paring {
    public static let bluetoothIsOff: Swift.String
    public static let explanationTurnOnBluetooth: Swift.String
    public enum ScanDevice {
      public enum BluetoothIsOff {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
  }
  public enum Place {
    public static let pairOneMoreDeviceToUnlockTheMotionSensing: Swift.String
  }
  public enum PlaceCreation {
    public static let errorNoCategory: Swift.String
    public static let header: Swift.String
    public enum Customize {
      public static let colorSelection: Swift.String
      public static let header: Swift.String
    }
    public enum Floor {
      public static let description: Swift.String
      public static func floorNumberAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let header: Swift.String
    }
    public enum Name {
      public static let description: Swift.String
      public static let editHint: Swift.String
      public static let error: Swift.String
      public static let header: Swift.String
    }
    public enum Size {
      public static let description: Swift.String
      public static let header: Swift.String
    }
    public enum Zone {
      public static func defaultNameMultipleFloor(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let defaultNameSingleFloor: Swift.String
    }
  }
  public enum PlaceDetails {
    public static let customize: Swift.String
    public static func offlineDeviceNotification(_ p1: Swift.Int) -> Swift.String
    public static let placeMode: Swift.String
    public static let securityMode: Swift.String
    public static let securityModeDescription: Swift.String
    public static func zoneInMode(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum PlaceEvents {
    public static func disarmedBy(_ p1: Any) -> Swift.String
    public static func disarmedByAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let downloadingHistory: Swift.String
    public static func emptyHistoryPlaceholder(_ p1: Any) -> Swift.String
    public static func emptyHistoryPlaceholderAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let eventsHistory: Swift.String
    public enum Message {
      public static func intrusion(_ p1: Any, _ p2: Any, _ p3: Any, _ p4: Any) -> Swift.String
      public static func userJoined(_ p1: Any, _ p2: Any) -> Swift.String
      public static func userJoinedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func userLeft(_ p1: Any, _ p2: Any) -> Swift.String
      public static func userLeftAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func userRemoved(_ p1: Any, _ p2: Any, _ p3: Any) -> Swift.String
      public static func userRemovedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
    public enum Title {
      public static let intrusion: Swift.String
      public static func userJoined(_ p1: Any) -> Swift.String
      public static func userJoinedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func userLeft(_ p1: Any) -> Swift.String
      public static func userLeftAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func userRemoved(_ p1: Any) -> Swift.String
      public static func userRemovedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum PlaceInformation {
    public static let avgFloorArea: Swift.String
    public static let floors: Swift.String
    public static let name: Swift.String
    public static let title: Swift.String
    public static let type: Swift.String
  }
  public enum PlaceIntegrations {
    public static func descriptionPlaceholder(_ p1: Any) -> Swift.String
    public static let enablingPlaceholder: Swift.String
    public static func integrationIs(_ p1: Any) -> Swift.String
    public static let integrations: Swift.String
    public static let isDisabled: Swift.String
    public static let isEnabled: Swift.String
    public static let wantDisable: Swift.String
  }
  public enum PlaceOverview {
    public static func disconnectedDevices(_ p1: Swift.Int) -> Swift.String
    public static let motion: Swift.String
    public static let pairKitUnlockMotionSensing: Swift.String
    public static let resumeSetupKitButton: Swift.String
    public static let setupKitButton: Swift.String
    public static let zones: Swift.String
    public enum Graph {
      public static let legendBarFourHour: Swift.String
      public static let legendBarThiryMin: Swift.String
      public static let legendBarThirySec: Swift.String
      public static let legendBarTwelveHour: Swift.String
      public static let now: Swift.String
      public static let pairOneMore: Swift.String
      public static let pairTwoDevices: Swift.String
      public static let thirtySecsAgo: Swift.String
    }
    public enum IntrusionDetection {
      public static func endTime(_ p1: Any) -> Swift.String
      public static func endTimeFormatHour(_ p1: Swift.Int) -> Swift.String
      public static func endTimeFormatMinute(_ p1: Swift.Int) -> Swift.String
      public static func startTime(_ p1: Any) -> Swift.String
      public static let title: Swift.String
    }
    public enum PairingRequest {
      public static let addDeviceButton: Swift.String
      public static let addMoreHint: Swift.String
      public static let continuePairingButton: Swift.String
      public static let setupAKit: Swift.String
      public static let setupAKitGuide: Swift.String
    }
    public enum Picker {
      public static let fourHr: Swift.String
      public static let thirtyMin: Swift.String
      public static let thirtySec: Swift.String
      public static let twelveHr: Swift.String
    }
  }
  public enum PlaceProperties {
    public static let apartment: Swift.String
    public static let house: Swift.String
  }
  public enum PlaceSetting {
    public static let placeInformation: Swift.String
    public enum EditPlace {
      public static let toolbar: Swift.String
    }
    public enum Header {
      public static let general: Swift.String
      public static let setup: Swift.String
      public static let setupADeviceDescription: Swift.String
      public static let setupADeviceTitle: Swift.String
      public static let setupAKitDescriptionDisableNonFirstKit: Swift.String
      public static let setupAKitDescriptionDisableOldPlace: Swift.String
      public static let setupAKitDescriptionEnable: Swift.String
      public static let setupAKitTitle: Swift.String
    }
    public enum PlaceInformation {
      public static let description: Swift.String
      public static let editName: Swift.String
      public static let floor: Swift.String
      public static let name: Swift.String
      public static let size: Swift.String
      public static let type: Swift.String
    }
  }
  public enum PlaceSettings {
    public static let customizePlaceDescription: Swift.String
    public static let deletePlaceButton: Swift.String
    public static func devicesInZones(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
    public static let editPlace: Swift.String
    public static let editPlaceAndroid: Swift.String
    public static let editPlaceDescription: Swift.String
    public static let engine: Swift.String
    public static let engineDoesNotSupportSensitivity: Swift.String
    public static let featureUnlockWarning: Swift.String
    public static let leavePlaceButton: Swift.String
    public static func manageDevices(_ p1: Swift.Int) -> Swift.String
    public static let motion: Swift.String
    public static func numberOfDevices(_ p1: Swift.Int) -> Swift.String
    public static let onlyAvailableForFirstKit: Swift.String
    public static let placeSettings: Swift.String
    public static let sectionGeneral: Swift.String
    public static let sectionSetup: Swift.String
    public static let security: Swift.String
    public static let sensitivity: Swift.String
    public static func sensitivityLevel(_ p1: Any) -> Swift.String
    public static let setupKit: Swift.String
    public static let setupKitDescription: Swift.String
    public static let setupSingleDevice: Swift.String
    public static let setupSingleDeviceDescription: Swift.String
    public static let title: Swift.String
    public static let updateWifiNetwork: Swift.String
    public static let updateWifiNetworkDescription: Swift.String
  }
  public enum PlaceTileView {
    public static func disconnectedDevices(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
  }
  public enum PlaceUsers {
    public enum Invitation {
      public static let invitePeople: Swift.String
      public static func usersLimitReached(_ p1: Any) -> Swift.String
      public static func usersLimitReachedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
    public enum Role {
      public static let role: Swift.String
    }
  }
  public enum Places {
    public static let title: Swift.String
    public enum Category {
      public static let apartment: Swift.String
      public static let eating: Swift.String
      public static let house: Swift.String
      public static let shopping: Swift.String
      public static let unknown: Swift.String
      public static let work: Swift.String
    }
  }
  public enum Profile {
    public static let about: Swift.String
    public static let authentication: Swift.String
    public static let copied: Swift.String
    public static let copyRecoveryKey: Swift.String
    public static let goConfirmSigninRequest: Swift.String
    public static let helpAndFeedback: Swift.String
    public static let joined: Swift.String
    public static let legal: Swift.String
    public static let linkAccountGuideText: Swift.String
    public static let linked3rdPartyAccount: Swift.String
    public static let noLinkedAccountsMessage: Swift.String
    public static let privacyPolicy: Swift.String
    public static let recoveryInfoTitle: Swift.String
    public static let recoveryKey: Swift.String
    public static let recoveryKeyHint: Swift.String
    public static let sectionTitleAccount: Swift.String
    public static let sectionTitleHelp: Swift.String
    public static let sendTestPush: Swift.String
    public static let signOut: Swift.String
    public static let supportArticles: Swift.String
    public static let termsOfServices: Swift.String
    public static let title: Swift.String
    public static let username: Swift.String
    public static let usernameMissing: Swift.String
    public static let usernameYou: Swift.String
    public enum AccountManagement {
      public static let accountDeletionDescription: Swift.String
      public static let confirmAccountDeletion: Swift.String
      public static let deleteAccountAlertDescription: Swift.String
      public static let deleteAccountAlertTitle: Swift.String
      public static let deleteAccountButton: Swift.String
      public static let title: Swift.String
    }
    public enum Unlink {
      public static let alertConfirm: Swift.String
      public static let alertMessage: Swift.String
      public static let alertMessageAndroid: Swift.String
      public static let alertTitle: Swift.String
    }
  }
  public enum Push {
    public static let registerPushTokenFailed: Swift.String
  }
  public enum Qrscanner {
    public static let help: Swift.String
    public static let title: Swift.String
    public static let whereQr: Swift.String
  }
  public enum RecoverKey {
    public static let goBack: Swift.String
  }
  public enum Recovery {
    public static let buttonRecover: Swift.String
    public static let error: Swift.String
    public static let recoveryKeyPlaceholder: Swift.String
    public static let textGuide: Swift.String
  }
  public enum RemoveDevice {
    public static let changeThreadNetwork: Swift.String
    public static func changeThreadNetworkDescription(_ p1: Any) -> Swift.String
    public static let dataRemovedWarningThread: Swift.String
    public static let dataRemovedWarningWifi: Swift.String
    public static let disableSensingFunction: Swift.String
    public static func disableSensingFunctionDescription(_ p1: Any) -> Swift.String
    public static func removeDeviceName(_ p1: Any) -> Swift.String
    public static let removeThisDevice: Swift.String
    public static let removeThreadNetwork: Swift.String
    public static func removeThreadNetworkDescription(_ p1: Any) -> Swift.String
    public static func restoreSensingInZone(_ p1: Any) -> Swift.String
    public static let restoreSensingInZoneDescription: Swift.String
  }
  public enum ReportFalseAlarm {
    public static let reportingAsFalseAlarmWillAlsoDisarmTheIntrusion: Swift.String
    public static let theIntrusionWasTriggeredBy: Swift.String
  }
  public enum RoomSelection {
    public static let confirmButton: Swift.String
    public static let description: Swift.String
    public static let title: Swift.String
  }
  public enum Rooms {
    public enum Category {
      public static let bathroom: Swift.String
      public static let bedroom: Swift.String
      public static let kitchen: Swift.String
      public static let livingRoom: Swift.String
      public static let other: Swift.String
      public static let unknown: Swift.String
    }
  }
  public enum SecurityMode {
    public static let addMoreZoneToShowZoneSettings: Swift.String
    public static let disabled: Swift.String
    public static let discard: Swift.String
    public static let discardChanges: Swift.String
    public static let discardChangesDescription: Swift.String
    public static func placeDeviceOffline(_ p1: Swift.Int) -> Swift.String
    public static let statusArmedDescription: Swift.String
    public static let statusAwareDescription: Swift.String
    public static let statusRelaxedDescription: Swift.String
    public static let zoneMode: Swift.String
    public static let zoneModeDescription: Swift.String
  }
  public enum SelectFloorArea {
    public static let description: Swift.String
    public static let header: Swift.String
    public static let option1Imperial: Swift.String
    public static let option1Metric: Swift.String
    public static let option2Imperial: Swift.String
    public static let option2Metric: Swift.String
    public static let option3Imperial: Swift.String
    public static let option3Metric: Swift.String
    public static let option4Imperial: Swift.String
    public static let option4Metric: Swift.String
  }
  public enum SelectFloorNumber {
    public static let description: Swift.String
    public static let header: Swift.String
  }
  public enum SelectKit {
    public static let description: Swift.String
    public static let monitoringKit: Swift.String
    public static let monitoringKitDescription: Swift.String
    public static let securityKit: Swift.String
    public static let securityKitDescription: Swift.String
    public static let title: Swift.String
  }
  public enum SelectPlaceIcon {
    public static let header: Swift.String
  }
  public enum SelectPlaceTheme {
    public static let header: Swift.String
  }
  public enum SelectPlaceType {
    public static let description: Swift.String
    public static let header: Swift.String
  }
  public enum SelectRoomCategory {
    public static let header: Swift.String
  }
  public enum SelectRoomIcon {
    public static let header: Swift.String
  }
  public enum SelectUserIcon {
    public static let chooseImageColor: Swift.String
    public static let chooseProfileImage: Swift.String
    public static let promptMessage: Swift.String
  }
  public enum SelectZone {
    public static let description: Swift.String
    public static func formatThreadDevices(_ p1: Any) -> Swift.String
    public static func formatWifiDevices(_ p1: Any) -> Swift.String
    public static let title: Swift.String
  }
  public enum SensitivitySettings {
    public static let descriptionUnavailable: Swift.String
    public static let fourToSix: Swift.String
    public static let fourToSixDescription: Swift.String
    public static func levelAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let maxTitle: Swift.String
    public static let maxTitleAndroid: Swift.String
    public static let minTitle: Swift.String
    public static let minTitleAndroid: Swift.String
    public static let oneToThree: Swift.String
    public static let oneToThreeDescription: Swift.String
    public static let saveSensitivtyButtonTitle: Swift.String
    public static let sensitivityLevelDescription: Swift.String
    public static let sevenToNine: Swift.String
    public static let sevenToNineDescription: Swift.String
    public static let success: Swift.String
    public static let tenToTwelve: Swift.String
    public static let tenToTwelveDescription: Swift.String
    public static let testSensitivityButtonTitle: Swift.String
    public static let title: Swift.String
    public enum Engine {
      public static let unavailable: Swift.String
    }
  }
  public enum SetupADevice {
    public static let toolbarTittle: Swift.String
    public enum RoomSelection {
      public static let subTittle: Swift.String
      public static let tittle: Swift.String
    }
  }
  public enum SetupAKit {
    public static let featureNotAvailableDescription: Swift.String
    public static let featureNotAvailableHeader: Swift.String
    public static let howDeviceWorksGuideContent1: Swift.String
    public static let howDeviceWorksGuideContent2: Swift.String
    public static let howDeviceWorksGuideContent3: Swift.String
    public static let howDeviceWorksGuideContent4: Swift.String
    public static let howDeviceWorksGuideContent5: Swift.String
    public static let howDeviceWorksStart: Swift.String
    public static let toolbarTittle: Swift.String
    public enum HowDeviceWork {
      public static let description: Swift.String
      public static let subTittle: Swift.String
      public static let tittle: Swift.String
    }
    public enum HowToPlaceDevice {
      public static let guideContent1FirstPairedDevice: Swift.String
      public static let guideContent1NonFirstPairedDeviceImperial: Swift.String
      public static let guideContent1NonFirstPairedDeviceMetric: Swift.String
      public static let guideContent2FirstPairedDeviceImperial: Swift.String
      public static let guideContent2FirstPairedDeviceMetric: Swift.String
      public static let guideContent2FirstPairedDeviceSecurityKit: Swift.String
      public static let guideContent2NonFirstPairedDeviceImperial: Swift.String
      public static let guideContent2NonFirstPairedDeviceMetric: Swift.String
      public static let guideContent3NonFirstPairedDevice: Swift.String
      public static let guideContent4NonFirstPairedDevice: Swift.String
      public static let guideFirstDevice: Swift.String
      public static let guideFirstDeviceInZone: Swift.String
      public static let guideNonFirstDevice: Swift.String
      public static let nonFirstPairedDeviceGuideContent1: Swift.String
      public static let nonFirstPairedDeviceGuideContent2Imperial: Swift.String
      public static let nonFirstPairedDeviceGuideContent2Metric: Swift.String
      public static let sensingZone: Swift.String
      public static let subTittle: Swift.String
      public static let tittle: Swift.String
    }
    public enum KitSelection {
      public static let subTittle: Swift.String
      public static let tittle: Swift.String
    }
    public enum WhereToSetup {
      public static let addGuide: Swift.String
      public static let firstFloor: Swift.String
      public static func placeSizeLargeCoverage1Floor(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func placeSizeLargeCoverageMoreFloors(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let placeSizeSmallCoverage1Floor: Swift.String
      public static let placeSizeSmallCoverageMoreFloors: Swift.String
      public static let subTittleFloorBigSize: Swift.String
      public static let subTittleFloorSmallSize: Swift.String
      public static let subTittleMoreFloorMonitoring: Swift.String
      public static let subTittleMoreFloorSecurity: Swift.String
      public static let tittle: Swift.String
    }
  }
  public enum SetupKit {
    public static let title: Swift.String
  }
  public enum SignUp {
    public static let anonymousAccountText: Swift.String
    public static let anonymousAccountText1: Swift.String
    public static let anonymousAccountText2: Swift.String
    public static let anonymousAccountText3: Swift.String
    public static let buttonRecoveryKey: Swift.String
    public static let buttonSignUp: Swift.String
    public static let buttonSignUpAnonymous: Swift.String
    public static let continueWithApple: Swift.String
    public static let continueWithGoogle: Swift.String
    public static let otherSignUpOptions: Swift.String
    public static let privacyPolicy: Swift.String
    public static let termsOfService: Swift.String
    public static let tosAndPrivacy: Swift.String
    public static let tosAndPrivacyPart1: Swift.String
    public static let tosAndPrivacyPart2: Swift.String
    public static let tosAndPrivacyPart2Android: Swift.String
    public static let tosAndPrivacyPart3: Swift.String
    public static let tosAndPrivacyPart4: Swift.String
    public static let tosAndPrivacyPart4Android: Swift.String
    public static let unknownProvider: Swift.String
    public static let welcomeText: Swift.String
  }
  public enum Status {
    public static let alert: Swift.String
    public static let armedHint: Swift.String
    public static let armedHintDisabled: Swift.String
    public static let aware: Swift.String
    public static let awareHint: Swift.String
    public static func inSwitchingMode(_ p1: Any, _ p2: Any) -> Swift.String
    public static let relaxed: Swift.String
    public static let relaxedHint: Swift.String
  }
  public enum UpdateWifi {
    public static func deviceAlreadyUpdated(_ p1: Any) -> Swift.String
    public static func deviceNotInZone(_ p1: Any) -> Swift.String
    public static let locateDeviceButton: Swift.String
    public static func notNamiQrCode(_ p1: Any) -> Swift.String
    public static let notNamiQrCodeNoZone: Swift.String
    public static let plug: Swift.String
    public static let pod: Swift.String
    public static let qrCodeError: Swift.String
    public static let qrDoesNotMatch: Swift.String
    public static let repeatQrScan: Swift.String
    public static let resumeUpdate: Swift.String
    public static func resumeUpdateInstruction(_ p1: Any) -> Swift.String
    public static let title: Swift.String
    public enum HowItWorks {
      public static let confirmButton: Swift.String
      public static let description: Swift.String
      public static let help: Swift.String
      public static let instructionBulletPoint1: Swift.String
      public static let instructionBulletPoint2: Swift.String
      public static let instructionBulletPoint3: Swift.String
      public static let instructionBulletPoint4: Swift.String
      public static let instructionPart1: Swift.String
      public static let instructionPart2: Swift.String
      public static let instructionTitle: Swift.String
      public static let title: Swift.String
    }
    public enum ResetDevice {
      public static let confirmButton: Swift.String
      public static let description: Swift.String
      public static func howToReset(_ p1: Any) -> Swift.String
      public static let plugResetInstructions: Swift.String
      public static let plugResetInstructions1: Swift.String
      public static let plugResetInstructions2: Swift.String
      public static let plugResetInstructions3: Swift.String
      public static let plugResetInstructions4: Swift.String
      public static let podResetInstructions: Swift.String
      public static let podResetInstructions1: Swift.String
      public static let podResetInstructions2: Swift.String
      public static let podResetInstructions3: Swift.String
      public static let podResetInstructions4: Swift.String
      public static let title: Swift.String
    }
    public enum SelectZoneToUpdate {
      public static let confirmButton: Swift.String
      public static let description: Swift.String
      public static let nonThreadZoneSupport: Swift.String
      public static func numberOfDevices(_ p1: Any) -> Swift.String
      public static let selectZone: Swift.String
      public static let title: Swift.String
    }
    public enum ZoneDeviceCheck {
      public static let scanQr: Swift.String
    }
    public enum ZoneWifiUpdate {
      public static let confirmButton: Swift.String
      public static let congratulations: Swift.String
      public static let description: Swift.String
      public static let devicesUpdated: Swift.String
      public static let finishButton: Swift.String
      public static let lastDeviceDescription: Swift.String
      public static let locateDevice: Swift.String
      public static let locateLastDevice: Swift.String
      public static let sessionCompleted: Swift.String
      public static let title: Swift.String
      public static let updateAnotherZoneButton: Swift.String
      public static let updateSuccess: Swift.String
    }
  }
  public enum UpdateWifiNetwork {
    public static let howItWorksGuideSubtitle: Swift.String
    public static let resetDeviceGuidePlugType: Swift.String
    public static let resetDeviceGuidePod2: Swift.String
    public static let resetDeviceGuidePodType: Swift.String
    public static let zoneStatusGuideCompletedUpdate: Swift.String
    public static let zonesSelectionGuide: Swift.String
    public enum CommissioningMode {
      public static let customizePlace: Swift.String
    }
    public enum DeviceQrCode {
      public static func deviceAlreadyRepairedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func deviceNotInZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let invalid: Swift.String
    }
    public enum UpdateSuccessfully {
      public static let header1: Swift.String
      public static func header1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum UpgradeMultiZones {
    public static func createFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func loadDataFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func loadZoneFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func updateFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum UserDetails {
    public static let askLeavePlaceButton: Swift.String
    public static func askRemoveUserAlertMessage(_ p1: Any, _ p2: Any) -> Swift.String
    public static let askRemoveUserButton: Swift.String
    public static let confirmLeavePlaceButton: Swift.String
    public static let confirmRemoveUserButton: Swift.String
    public static func lastActive(_ p1: Any) -> Swift.String
    public static func lastActiveAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func leavePlaceAlertMessage(_ p1: Any) -> Swift.String
    public static let leavePlaceAlertTitle: Swift.String
    public static func removeUserAlertMessage(_ p1: Any, _ p2: Any) -> Swift.String
    public static func removeUserAlertMessageAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let removeUserAlertTitle: Swift.String
    public static let removeUserButton: Swift.String
    public static let saveChangesButton: Swift.String
  }
  public enum Widar {
    public static let headerTitle: Swift.String
    public enum CancelPopup {
      public static let backToPositioningButton: Swift.String
      public static let cancelButton: Swift.String
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum Error {
      public static let deviceNotFoundMessage: Swift.String
      public static let exitButton: Swift.String
      public static let retryButton: Swift.String
      public static let title: Swift.String
    }
    public enum Info {
      public static let buttonText: Swift.String
      public static let infoAvoidMovingWhenOptimized: Swift.String
      public static let infoMustOptimisePosition: Swift.String
      public static let title: Swift.String
    }
    public enum Position {
      public static let cancelButton: Swift.String
      public static let finishButton: Swift.String
      public static let guideImperial: Swift.String
      public static let guideMetric: Swift.String
      public static let statusChecking: Swift.String
      public static let statusGettingBetter: Swift.String
      public static let statusLabel: Swift.String
      public static let statusMispositioned: Swift.String
      public static let statusOptimized: Swift.String
      public static let tip: Swift.String
      public static let title: Swift.String
    }
    public enum Recommendations {
      public static let buttonText: Swift.String
      public static let infoAttachBase: Swift.String
      public static let infoKeepAreaClear: Swift.String
      public static let infoWireOnBack: Swift.String
      public static let title: Swift.String
    }
    public enum Success {
      public static func contentMessage(_ p1: Any) -> Swift.String
      public static let doneButton: Swift.String
      public static let title: Swift.String
    }
  }
  public enum Zone {
    public static let defaultName: Swift.String
  }
  public enum ZoneChecks {
    public enum MotionSensing {
      public static let checkName: Swift.String
      public static let statusDisconnected: Swift.String
      public static let statusNotWorking: Swift.String
      public static let statusWorkingMotionDetected: Swift.String
      public static let statusWorkingMotionNotDetected: Swift.String
    }
    public enum ZoneHealth {
      public static let checkName: Swift.String
      public static let hintAssessingZoneHealth: Swift.String
      public static let hintCheckNeeded: Swift.String
      public static let hintWorksWell: Swift.String
      public static let statusDegraded: Swift.String
      public static let statusHealthy: Swift.String
      public static let statusUnhealthy: Swift.String
      public static let statusUnknown: Swift.String
    }
  }
  public enum ZoneSelection {
    public static let addYourKitTo: Swift.String
    public static let description: Swift.String
    public static let monitoringKitDescription: Swift.String
    public static let securityKitDescription: Swift.String
    public static let title: Swift.String
  }
}
public enum ISO8601MsecDecoder {
  public static let defaultFormatter: Foundation.ISO8601DateFormatter
  public static func decodedDate(_ decoder: Swift.Decoder) throws -> Foundation.Date
  public static func encodeDate(date: Foundation.Date, encoder: Swift.Encoder) throws
}
extension Foundation.JSONDecoder {
  public static func ISO8601Msec() -> Foundation.JSONDecoder
}
extension Foundation.JSONEncoder {
  public static func ISO8601Msec() -> Foundation.JSONEncoder
}
public enum Log {
  public static func info(_ items: Any...)
  public static func warning(_ items: Any...)
  public static func `if`(_ condition: Swift.Bool = true, run: () -> Swift.Void)
}
public enum PacketBoatError : Swift.String, Swift.Error {
  case wrongDataFormat
  case wrongDataSize
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class PacketBoat {
  public init()
  final public var doneSending: Swift.Bool {
    get
  }
  final public var doneReceiving: Swift.Bool {
    get
  }
  final public func startSending(data: Foundation.Data)
  final public func nextBitToSend(maxSize: Swift.UInt) -> Foundation.Data?
  final public func receivedData() -> Foundation.Data?
  final public func receiveNext(data: Foundation.Data) -> Swift.Result<Swift.Bool, NamiPairingFramework.PacketBoatError>
  @objc deinit
}
public enum SeanceError : Swift.Error {
  case keyDerivationError
  case wrongState(Swift.String)
  case keyAgreementError
  case verificationError
}
public class Seance {
  public init(role: NamiPairingFramework.Seance.Role)
  public enum Role {
    case prover
    case verifier
    public static func == (a: NamiPairingFramework.Seance.Role, b: NamiPairingFramework.Seance.Role) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum State {
    case initial
    case started
    case unverified
    case established
    public static func == (a: NamiPairingFramework.Seance.State, b: NamiPairingFramework.Seance.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let role: NamiPairingFramework.Seance.Role
  public var state: NamiPairingFramework.Seance.State {
    get
  }
  public static func preProcessPassword(_ password: Swift.UInt32, salt: [Swift.UInt8], iterations: Swift.UInt32 = 100000) throws -> Foundation.Data
  public func start(preProcessedPassword: Foundation.Data) throws -> Foundation.Data
  public func makeSharedKey(otherKeyData: Foundation.Data) throws -> Foundation.Data
  public func verify(otherValue: Foundation.Data) throws -> NamiPairingFramework.GhostBox
  @objc deinit
}
public struct GhostMessage {
  public let nonce: Foundation.Data
  public let ciphertext: Foundation.Data
  public let tag: Foundation.Data
}
@_hasMissingDesignatedInitializers final public class GhostBox {
  final public func encrypt(message: Foundation.Data) -> NamiPairingFramework.GhostMessage?
  final public func decrypt(nonce: Foundation.Data, ciphertext: Foundation.Data, tag: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CodeScannerUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CodeScannerView : SwiftUI.UIViewRepresentable {
  public typealias UIViewType = NamiPairingFramework.CodeScannerUIView
  @objc @_hasMissingDesignatedInitializers final public class Coordinator : ObjectiveC.NSObject, AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
    @objc final public func metadataOutput(_: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from _: AVFoundation.AVCaptureConnection)
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> NamiPairingFramework.CodeScannerView.Coordinator
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: NamiPairingFramework.CodeScannerView.Context) -> NamiPairingFramework.CodeScannerUIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: NamiPairingFramework.CodeScannerUIView, context _: NamiPairingFramework.CodeScannerView.Context)
  public typealias Body = Swift.Never
}
public enum QRScanner {
  public enum ScanError : Swift.String, Swift.Identifiable {
    case unknownQR
    public var id: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct State : Swift.Equatable {
    public var error: NamiPairingFramework.QRScanner.ScanError?
    public static func == (a: NamiPairingFramework.QRScanner.State, b: NamiPairingFramework.QRScanner.State) -> Swift.Bool
  }
  public enum Event : Swift.Equatable {
    case reset
    case shouldDismissItself
    case gotData(Swift.String?)
    case dismissScanError
    case pauseScanning
    public static func == (a: NamiPairingFramework.QRScanner.Event, b: NamiPairingFramework.QRScanner.Event) -> Swift.Bool
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.QRScannerViewModelProtocol {
    public typealias State = NamiPairingFramework.QRScanner.State
    public typealias Event = NamiPairingFramework.QRScanner.Event
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.QRScanner.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.QRScanner.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public var undecoratedScannerView: NamiPairingFramework.CodeScannerView {
      get
    }
    final public func send(event: NamiPairingFramework.QRScanner.ViewModel.Event)
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public struct NamiQRCode : Swift.Equatable {
  public init?(_ string: Swift.String)
  public var discriminator: Swift.Int32
  public static func == (a: NamiPairingFramework.NamiQRCode, b: NamiPairingFramework.NamiQRCode) -> Swift.Bool
}
public struct NamiWiFiNetwork : Swift.Equatable, Swift.Hashable {
  public let ssid: Swift.String
  public let rssi: Swift.Int
  public let bssid: NamiPairingFramework.BSSID
  public let open: Swift.Bool
  public static func == (a: NamiPairingFramework.NamiWiFiNetwork, b: NamiPairingFramework.NamiWiFiNetwork) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias BSSID = Foundation.Data
public struct ScanWiFiNetworksParameters : Swift.Equatable {
  public init(sessionId: NamiPairingFramework.WiFiCredentialsUpdateSessionID?, currentDeviceUid: NamiPairingFramework.DeviceUniversalID?, scanFinishedSessionId: Swift.Int? = nil, passwordReEntryRequested: Swift.Bool = false)
  public var sessionId: NamiPairingFramework.WiFiCredentialsUpdateSessionID?
  public var scanFinishedSessionId: Swift.Int?
  public var currentDeviceUid: NamiPairingFramework.DeviceUniversalID?
  public var passwordReEntryRequested: Swift.Bool
  public static func == (a: NamiPairingFramework.ScanWiFiNetworksParameters, b: NamiPairingFramework.ScanWiFiNetworksParameters) -> Swift.Bool
}
public struct ScannedWiFiNetworks : Swift.Equatable {
  public init(networks: [NamiPairingFramework.PublicWiFiNetwork], canRetry: Swift.Bool)
  public var networks: [NamiPairingFramework.PublicWiFiNetwork]
  public var canRetry: Swift.Bool
  public static func == (a: NamiPairingFramework.ScannedWiFiNetworks, b: NamiPairingFramework.ScannedWiFiNetworks) -> Swift.Bool
}
public struct PairingDevice : NamiPairingFramework.DeviceProtocol {
  public var id: NamiPairingFramework.DeviceID
  public var uid: NamiPairingFramework.DeviceUniversalID
  public var urn: Swift.String
  public var model: NamiPairingFramework.PairingDeviceModel
  public var deviceState: NamiPairingFramework.PairingDeviceCloudState?
  public static func == (a: NamiPairingFramework.PairingDevice, b: NamiPairingFramework.PairingDevice) -> Swift.Bool
  public typealias DeviceCloudState = NamiPairingFramework.PairingDeviceCloudState
  public typealias DeviceModel = NamiPairingFramework.PairingDeviceModel
}
public struct PairingDeviceCloudState : NamiPairingFramework.DeviceCloudStateProtocol {
  public var payload: Foundation.Data
  public static func == (a: NamiPairingFramework.PairingDeviceCloudState, b: NamiPairingFramework.PairingDeviceCloudState) -> Swift.Bool
}
public struct PairingDeviceModel : NamiPairingFramework.DeviceModelProtocol {
  public var codeName: Swift.String
  public var productLabel: Swift.String
  public var productId: NamiPairingFramework.DeviceProductID
  public static func == (a: NamiPairingFramework.PairingDeviceModel, b: NamiPairingFramework.PairingDeviceModel) -> Swift.Bool
}
public struct PairingPlaceZone : NamiPairingFramework.PlaceZoneProtocol {
  public var id: NamiPairingFramework.PlaceZoneID
  public var externalId: Swift.String
  public var name: Swift.String
  public static func == (a: NamiPairingFramework.PairingPlaceZone, b: NamiPairingFramework.PairingPlaceZone) -> Swift.Bool
}
public struct BluetoothCentralState : Swift.Equatable {
  public static func == (a: NamiPairingFramework.BluetoothCentralState, b: NamiPairingFramework.BluetoothCentralState) -> Swift.Bool
}
extension NamiPairingFramework.BluetoothCentralState : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
final public class Tomonari<Container> where Container : NamiPairingFramework.PairingStepsContainer {
  public init(api: NamiPairingFramework.PairingWebAPIProtocol, wifiStorage: NamiPairingFramework.PairingWiFiStorageProtocol, threadDatasetProvider: NamiPairingFramework.PairingThreadOperationalDatasetProviderProtocol)
  public typealias DevicePairingStatePublisher = Combine.PassthroughSubject<NamiPairingFramework.Tomonari<Container>.DevicePairingState, Swift.Error>
  public struct PairingParameters : Swift.Equatable {
    public init(qrCode: NamiPairingFramework.NamiQRCode? = nil, updateWiFiCredentialsSessionId: NamiPairingFramework.WiFiCredentialsUpdateSessionID? = nil, bssid: Foundation.Data? = nil)
    public init(qrCode: NamiPairingFramework.NamiQRCode? = nil, updateWiFiCredentialsSessionId: NamiPairingFramework.WiFiCredentialsUpdateSessionID? = nil, bssid: [Swift.UInt8])
    public init(qrCode: NamiPairingFramework.NamiQRCode? = nil, updateWiFiCredentialsSessionId: NamiPairingFramework.WiFiCredentialsUpdateSessionID? = nil, bssid: Swift.String)
    public static var none: NamiPairingFramework.Tomonari<Container>.PairingParameters {
      get
    }
    public let qrCode: NamiPairingFramework.NamiQRCode?
    public let updateWiFiCredentialsSessionId: NamiPairingFramework.WiFiCredentialsUpdateSessionID?
    public let bssid: Foundation.Data?
    public static func == (a: NamiPairingFramework.Tomonari<Container>.PairingParameters, b: NamiPairingFramework.Tomonari<Container>.PairingParameters) -> Swift.Bool
  }
  public enum DevicePairingState {
    case deviceCommisionedAtCloud(NamiPairingFramework.DeviceProtocol, in: NamiPairingFramework.PlaceID)
    case deviceOperable(NamiPairingFramework.DeviceID, ssid: Swift.String?, bssid: [Swift.UInt8]?)
    case deviceDecommissioned(NamiPairingFramework.DeviceID)
    case pairingCancelled
  }
  final public let devicePairingState: NamiPairingFramework.Tomonari<Container>.DevicePairingStatePublisher
  final public func startPairing(placeId: NamiPairingFramework.PlaceID, zoneId: NamiPairingFramework.PlaceZoneID, roomId: NamiPairingFramework.RoomID, pairingParameters: NamiPairingFramework.Tomonari<Container>.PairingParameters = .none, pairingSteps: Container) -> some SwiftUI.View
  
  @objc deinit
}
extension Combine.Publisher {
  public func first<T>(_ keyPath: Swift.KeyPath<Self.Output, T>, toEqual value: T) -> Combine.Publishers.FirstWhere<Combine.Publishers.MapKeyPath<Self, T>> where T : Swift.Equatable
}
public enum PairingMachineState : Swift.Equatable, Swift.CustomDebugStringConvertible, Swift.Identifiable {
  case initial
  case gotAdvertisement(NamiPairingFramework.PublicPairingAdvertisement)
  case sentProverPublicKey
  case sentProverSharedKey
  case establishedSession
  case sentDeviceCertificateRequest
  case gotDeviceCertificateResponse(Swift.String)
  case sentCloudChallenge
  case gotCloudChallengeResponse(Foundation.Data)
  case sentCloudPayload
  case gotCloudChallengeOK
  case sentScanWiFiNetworks
  case gotWiFiNetworks([NamiPairingFramework.PublicWiFiNetwork])
  case sentWiFiCredentials
  case gotWiFiIPAddress(Swift.String)
  case sentScanThreadNetworks
  case gotThreadNetworks([NamiPairingFramework.ThreadScanResult])
  case sentJoinThreadNetwork
  case threadJoinFinished(Foundation.Data)
  case sentHandshakeAck
  public var id: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public static func == (a: NamiPairingFramework.PairingMachineState, b: NamiPairingFramework.PairingMachineState) -> Swift.Bool
  public typealias ID = Swift.String
}
public enum PairingMachineError : Swift.Error, Swift.Equatable {
  case unexpectedState
  case unexpectedMessage
  case seanceError(Swift.Error)
  case pairingError(NamiPairingFramework.PublicPairingError)
  case serializationError(Swift.Error)
  case deserializationError(Swift.Error)
  case encryptionError
  public static func == (lhs: NamiPairingFramework.PairingMachineError, rhs: NamiPairingFramework.PairingMachineError) -> Swift.Bool
}
public enum PairingErrorScreen {
  public struct State : Swift.Equatable {
    public var error: NamiPairingFramework.Pairing.Error
    public var actions: [NamiPairingFramework.Pairing.ActionOnError]
    public var chosenAction: NamiPairingFramework.Pairing.ActionOnError?
    public static func == (a: NamiPairingFramework.PairingErrorScreen.State, b: NamiPairingFramework.PairingErrorScreen.State) -> Swift.Bool
  }
  public enum Event {
    case didChooseAction(NamiPairingFramework.Pairing.ActionOnError)
    case reconfigure(NamiPairingFramework.Pairing.Error, [NamiPairingFramework.Pairing.ActionOnError])
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.PairingStepViewModelProtocol {
    public typealias State = NamiPairingFramework.PairingErrorScreen.State
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.PairingErrorScreen.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.PairingErrorScreen.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.PairingErrorScreen.Event)
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public enum BluetoothDeviceFound {
  public struct State : Swift.Equatable {
    public var deviceModel: NamiPairingFramework.NamiDeviceModel?
    public var deviceName: Swift.String
    public var deviceNameConfirmed: Swift.Bool
    public static func == (a: NamiPairingFramework.BluetoothDeviceFound.State, b: NamiPairingFramework.BluetoothDeviceFound.State) -> Swift.Bool
  }
  public enum Event : Swift.Equatable {
    case deviceNameConfirmed(Swift.String)
    public static func == (a: NamiPairingFramework.BluetoothDeviceFound.Event, b: NamiPairingFramework.BluetoothDeviceFound.Event) -> Swift.Bool
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.PairingStepEventSendableViewModelProtocol {
    public typealias State = NamiPairingFramework.BluetoothDeviceFound.State
    public typealias Event = NamiPairingFramework.BluetoothDeviceFound.Event
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.BluetoothDeviceFound.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.BluetoothDeviceFound.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.BluetoothDeviceFound.Event)
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public enum ListWiFiNetworks {
  public struct State {
    public var networks: [NamiPairingFramework.NamiWiFiNetwork]?
    public var selectedNetwork: NamiPairingFramework.NamiWiFiNetwork?
    public var shouldShowBSSIDWarning: Swift.Bool
    public var shouldAskAboutSavedPassword: Swift.Bool
    public var deviceSupportsBSSID: Swift.Bool {
      get
    }
    public var shouldShowProgressView: Swift.Bool {
      get
    }
    public var shouldShowNoNetworksHint: Swift.Bool {
      get
    }
    public var couldShowAddOtherNetwork: Swift.Bool {
      get
    }
    public static func == (a: NamiPairingFramework.ListWiFiNetworks.State, b: NamiPairingFramework.ListWiFiNetworks.State) -> Swift.Bool
  }
  public enum Event : Swift.Equatable {
    case empty
    case dismissItself
    case tappedConfirmSelection
    case tappedRefreshNetwork
    case tappedOtherNetwork
    case selectNetwork(NamiPairingFramework.NamiWiFiNetwork)
    case selectNetwofkAndConfirm(NamiPairingFramework.NamiWiFiNetwork)
    case didTapUsePassword
    case didTapForgetPassword
    case didSearchForSavedPassword(Swift.String?)
    case confirmingSelection
    case shouldAskAboutSavedPassword(Swift.Bool)
    case gotError(NamiPairingFramework.Pairing.Error)
    public static func == (a: NamiPairingFramework.ListWiFiNetworks.Event, b: NamiPairingFramework.ListWiFiNetworks.Event) -> Swift.Bool
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.StoredPasswordRetrievingViewModel {
    public typealias State = NamiPairingFramework.ListWiFiNetworks.State
    public typealias Event = NamiPairingFramework.ListWiFiNetworks.Event
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.ListWiFiNetworks.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.ListWiFiNetworks.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.ListWiFiNetworks.ViewModel.Event)
    final public func usePassword()
    final public func forgetPassword()
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public enum PowerOnAndScanning {
  public struct State : Swift.Equatable {
    public var showsProgressIndicator: Swift.Bool
    public static func == (a: NamiPairingFramework.PowerOnAndScanning.State, b: NamiPairingFramework.PowerOnAndScanning.State) -> Swift.Bool
  }
  public enum Event {
    case stopShowingProgress
    public static func == (a: NamiPairingFramework.PowerOnAndScanning.Event, b: NamiPairingFramework.PowerOnAndScanning.Event) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.PairingStepViewModelProtocol {
    public typealias State = NamiPairingFramework.PowerOnAndScanning.State
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.PowerOnAndScanning.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.PowerOnAndScanning.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.PowerOnAndScanning.Event)
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public enum AskToConnect {
  public struct State : Swift.Equatable {
    public var deviceName: Swift.String
    public var deviceModel: NamiPairingFramework.NamiDeviceModel
    public var isConnectingToThread: Swift.Bool
    public var updatingWifi: Swift.Bool
    public var devicesCount: Swift.Int
    public var nextTapped: Swift.Bool
    public var doneLoading: Swift.Bool {
      get
    }
    public var zoneName: Swift.String? {
      get
    }
    public var zonesCount: Swift.Int {
      get
    }
    public var isThreadDevice: Swift.Bool {
      get
    }
    public static func == (a: NamiPairingFramework.AskToConnect.State, b: NamiPairingFramework.AskToConnect.State) -> Swift.Bool
  }
  public enum Event {
    case empty
    case tapNext
    case gotZones([NamiPairingFramework.PairingPlaceZone])
    case gotDevicesCount(Swift.Int)
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.PairingStepViewModelProtocol {
    public typealias State = NamiPairingFramework.AskToConnect.State
    public typealias Event = NamiPairingFramework.AskToConnect.Event
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.AskToConnect.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.AskToConnect.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.AskToConnect.ViewModel.Event)
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public enum OtherWiFiNetwork {
  public struct State {
    public var networkName: Swift.String
    public var password: Swift.String
    public var shouldAskAboutSavedPassword: Swift.Bool
    public static func == (a: NamiPairingFramework.OtherWiFiNetwork.State, b: NamiPairingFramework.OtherWiFiNetwork.State) -> Swift.Bool
  }
  public enum Event : Swift.Equatable {
    case empty
    case didConfirmName
    case lookForSavedPassword
    case shouldAskAboutSavedPassword(Swift.Bool)
    case didTapUsePassword
    case didTapForgetPassword
    case didSearchForSavedPassword(Swift.String?)
    public static func == (a: NamiPairingFramework.OtherWiFiNetwork.Event, b: NamiPairingFramework.OtherWiFiNetwork.Event) -> Swift.Bool
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.StoredPasswordRetrievingViewModel {
    public typealias State = NamiPairingFramework.OtherWiFiNetwork.State
    public typealias Event = NamiPairingFramework.OtherWiFiNetwork.Event
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.OtherWiFiNetwork.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.OtherWiFiNetwork.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.OtherWiFiNetwork.ViewModel.Event)
    final public func usePassword()
    final public func forgetPassword()
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public enum BluetoothUsageHint {
  public struct State : Swift.Equatable {
    public var nextTapped: Swift.Bool
    public static func == (a: NamiPairingFramework.BluetoothUsageHint.State, b: NamiPairingFramework.BluetoothUsageHint.State) -> Swift.Bool
  }
  public enum Event {
    case tapNext
    public static func == (a: NamiPairingFramework.BluetoothUsageHint.Event, b: NamiPairingFramework.BluetoothUsageHint.Event) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.PairingStepViewModelProtocol {
    public typealias State = NamiPairingFramework.BluetoothUsageHint.State
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.BluetoothUsageHint.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.BluetoothUsageHint.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.BluetoothUsageHint.Event)
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public enum EnterWiFiPassword {
  public struct State : Swift.Equatable {
    public var password: Swift.String
    public var networkName: Swift.String {
      get
    }
    public static func == (a: NamiPairingFramework.EnterWiFiPassword.State, b: NamiPairingFramework.EnterWiFiPassword.State) -> Swift.Bool
  }
  public enum Event {
    case confirmPassword
    case goBack
    public static func == (a: NamiPairingFramework.EnterWiFiPassword.Event, b: NamiPairingFramework.EnterWiFiPassword.Event) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers final public class ViewModel : NamiPairingFramework.PairingStepViewModelProtocol {
    public typealias State = NamiPairingFramework.EnterWiFiPassword.State
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.EnterWiFiPassword.ViewModel.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.EnterWiFiPassword.ViewModel.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.EnterWiFiPassword.Event)
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public enum Pairing {
  public struct CloudPayload : NamiPairingFramework.WiredPlaceKeysProtocol {
    public var ciphertext: Swift.String
    public var iv: Swift.String
    public var authTag: Swift.String
    public var serverKey: Swift.String
    public static func == (a: NamiPairingFramework.Pairing.CloudPayload, b: NamiPairingFramework.Pairing.CloudPayload) -> Swift.Bool
  }
  public struct DeviceSetupParameters : Swift.Equatable {
    public static func == (a: NamiPairingFramework.Pairing.DeviceSetupParameters, b: NamiPairingFramework.Pairing.DeviceSetupParameters) -> Swift.Bool
  }
  public enum ConnectTo : Swift.Equatable {
    case thread
    case wifi
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: NamiPairingFramework.Pairing.ConnectTo, b: NamiPairingFramework.Pairing.ConnectTo) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error, Swift.Identifiable, Swift.Equatable {
    case underlying(Swift.Error)
    public var id: Swift.String {
      get
    }
    public static func == (lhs: NamiPairingFramework.Pairing.Error, rhs: NamiPairingFramework.Pairing.Error) -> Swift.Bool
    public typealias ID = Swift.String
  }
  public enum ThreadError : Swift.Error, Swift.Equatable {
    case threadOperationalDatasetMissing
    case threadNetworkNotFound
    case mixedEnvironment
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: NamiPairingFramework.Pairing.ThreadError, b: NamiPairingFramework.Pairing.ThreadError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ActionOnError : Swift.Equatable {
    case restart
    case tryAgain
    case ignore
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: NamiPairingFramework.Pairing.ActionOnError, b: NamiPairingFramework.Pairing.ActionOnError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Routes : Swift.Equatable {
    case qrCodeScanner
    case bluetoothUsageHint
    case bluetoothEnableInSettings
    case powerOnAndScanning
    case deviceFound(NamiPairingFramework.NamiDeviceModel)
    case askToConnect(NamiPairingFramework.Pairing.DeviceSetupParameters)
    case listWiFiNetworks(zoneId: NamiPairingFramework.PlaceZoneID, wifiNetworks: [NamiPairingFramework.NamiWiFiNetwork]?, bssidLookupComplete: Swift.Bool)
    case finishingSetup
    public static func == (a: NamiPairingFramework.Pairing.Routes, b: NamiPairingFramework.Pairing.Routes) -> Swift.Bool
  }
  public struct State : Swift.Equatable {
    public var placeId: NamiPairingFramework.PlaceID
    public var zoneId: NamiPairingFramework.PlaceZoneID
    public var roomId: NamiPairingFramework.RoomID
    public var updateWiFiCredentialsSessionId: NamiPairingFramework.WiFiCredentialsUpdateSessionID?
    public var deviceName: Swift.String
    public static func == (a: NamiPairingFramework.Pairing.State, b: NamiPairingFramework.Pairing.State) -> Swift.Bool
  }
  public enum Event : Swift.Equatable {
    case empty
    case centralDidUpdate(NamiPairingFramework.BluetoothCentralState)
    case pairingMachineDidUpdate(NamiPairingFramework.PairingMachineState)
    case startScanning
    case didStartScanning
    case didResetPairingState
    case stopPresenting
    case gotQRCode(NamiPairingFramework.NamiQRCode)
    case bluetoothHintAcknowledged
    case didInitBluetooth
    case gotDeviceProductId(NamiPairingFramework.DeviceProductID)
    case identifiedModelByProductId(NamiPairingFramework.NamiDeviceModel)
    case setRoute(NamiPairingFramework.Pairing.Routes)
    case shouldContinuePairing
    case didContinuePairing
    case setDeviceName(Swift.String)
    case gotDeviceCertificate(Swift.String)
    case gotPairingChallenge(challenge: Swift.String, model: NamiPairingFramework.NamiDeviceModel)
    case gotDeviceChallengeResponse(Foundation.Data)
    case gotPairDeviceResponseFromCloud(NamiPairingFramework.Pairing.CloudPayload, NamiPairingFramework.PairingDevice)
    case shouldStartScanningWiFi
    case doneSearchingForWiFiUpdateSessionDevices([NamiPairingFramework.DeviceUniversalID])
    case retryScanningWiFi
    case didStartScanningWiFi
    case gotWiFiCredentials(NamiPairingFramework.NamiWiFiNetwork, Swift.String?)
    case didFoundSavedBSSID(Foundation.Data?)
    case bssidNotFound
    case otherNetwork
    case enterPassword(NamiPairingFramework.NamiWiFiNetwork)
    case didSendWiFiCredentials
    case shouldScanForThreadNetwork
    case didStartScanForThreadNetwork
    case shouldSendThreadOperationalDataset(Foundation.Data)
    case didSentThreadOperationalDataset
    case shouldDismissItself
    case dismissalApproved(NamiPairingFramework.DeviceID?)
    case dismissalWithDeleteApproved(NamiPairingFramework.DeviceID)
    case dismissStackablePresented
    case dismissFullscreenPresented
    case shouldPairAnother
    case gotAPIError(NamiPairingFramework.Pairing.Error)
    case gotPairingMachineError(NamiPairingFramework.PairingMachineError)
    case gotErrorAction(NamiPairingFramework.Pairing.ActionOnError)
    case threadOperationalDatsetMissing
    case askTryRescanThreadNetworks
    case mixedEnvironment
    public static func == (a: NamiPairingFramework.Pairing.Event, b: NamiPairingFramework.Pairing.Event) -> Swift.Bool
  }
  @_hasMissingDesignatedInitializers final public class ViewModel<Container> where Container : NamiPairingFramework.PairingStepsContainer {
    public typealias State = NamiPairingFramework.Pairing.State
    public typealias Event = NamiPairingFramework.Pairing.Event
    @Combine.Published @_projectedValueProperty($state) final public var state: NamiPairingFramework.Pairing.ViewModel<Container>.State {
      get
      set
      _modify
    }
    final public var $state: Combine.Published<NamiPairingFramework.Pairing.ViewModel<Container>.State>.Publisher {
      get
      @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
      set
    }
    final public func send(event: NamiPairingFramework.Pairing.ViewModel<Container>.Event)
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
public protocol PairingStepViewModelProtocol : Combine.ObservableObject {
  associatedtype State : Swift.Equatable
}
public protocol PairingStepEventSendableViewModelProtocol : NamiPairingFramework.PairingStepViewModelProtocol {
  associatedtype Event : Swift.Equatable
  func send(event: Self.Event)
}
public protocol StoredPasswordRetrievingViewModel {
  func usePassword()
  func forgetPassword()
}
public protocol QRScannerViewModelProtocol : NamiPairingFramework.PairingStepEventSendableViewModelProtocol {
  var undecoratedScannerView: NamiPairingFramework.CodeScannerView { get }
}
public protocol PairingStepsContainer {
  associatedtype ViewForBluetoothUsageHint : SwiftUI.View
  associatedtype ViewForPowerOnAndScanning : SwiftUI.View
  associatedtype ViewForEnableBluetoothInSettings : SwiftUI.View
  associatedtype ViewForBluetoothDeviceFound : SwiftUI.View
  associatedtype ViewForAskToConnect : SwiftUI.View
  associatedtype ViewForQRCodeScanner : SwiftUI.View
  associatedtype ViewForListWiFiNetworks : SwiftUI.View
  associatedtype ViewForOtherWiFiNetwork : SwiftUI.View
  associatedtype ViewForEnterWiFiPassword : SwiftUI.View
  associatedtype ViewForFinishingSetup : SwiftUI.View
  associatedtype ViewForPairingError : SwiftUI.View
  associatedtype BackButtonView : SwiftUI.View
  var bluetoothUsageHint: (NamiPairingFramework.BluetoothUsageHint.ViewModel) -> Self.ViewForBluetoothUsageHint { get }
  var powerOnAndScanning: (NamiPairingFramework.PowerOnAndScanning.ViewModel) -> Self.ViewForPowerOnAndScanning { get }
  var enableBluetoothInSettings: () -> Self.ViewForEnableBluetoothInSettings { get }
  var bluetoothDeviceFound: (NamiPairingFramework.BluetoothDeviceFound.ViewModel) -> Self.ViewForBluetoothDeviceFound { get }
  var askToConnect: (NamiPairingFramework.AskToConnect.ViewModel) -> Self.ViewForAskToConnect { get }
  var qrCodeScanner: (NamiPairingFramework.QRScanner.ViewModel) -> Self.ViewForQRCodeScanner { get }
  var listWiFiNetworks: (NamiPairingFramework.ListWiFiNetworks.ViewModel) -> Self.ViewForListWiFiNetworks { get }
  var otherWiFiNetwork: (NamiPairingFramework.OtherWiFiNetwork.ViewModel) -> Self.ViewForOtherWiFiNetwork { get }
  var enterWiFiPassword: (NamiPairingFramework.EnterWiFiPassword.ViewModel) -> Self.ViewForEnterWiFiPassword { get }
  var finishingSetup: () -> Self.ViewForFinishingSetup { get }
  var pairingError: (NamiPairingFramework.PairingErrorScreen.ViewModel) -> Self.ViewForPairingError { get }
  var backButton: () -> Self.BackButtonView? { get }
}
extension NamiPairingFramework.PairingStepsContainer {
  public var backButton: () -> NamiPairingFramework.NoView? {
    get
  }
}
public struct NoView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s20NamiPairingFramework6NoViewV4bodyQrvp", 0) __
}
public protocol PairingThreadOperationalDatasetProviderProtocol {
  associatedtype Pairing_NamiThreadOperationalDataset : NamiPairingFramework.PairingNamiThreadOperationalDatasetProtocol
  func newRandomDataset(networkName: Swift.String?) -> Self.Pairing_NamiThreadOperationalDataset
  func retrieve(placeId: NamiPairingFramework.PlaceID) -> Self.Pairing_NamiThreadOperationalDataset?
  func removeDataset(for placeId: NamiPairingFramework.PlaceID)
  func storeDataset(_ dataset: Self.Pairing_NamiThreadOperationalDataset, for placeId: NamiPairingFramework.PlaceID)
}
public protocol PairingNamiThreadOperationalDatasetProtocol : Swift.Decodable, Swift.Encodable {
  var data: Foundation.Data { get }
  func equalsNumericalPanID<ID>(_ panId: ID) -> Swift.Bool where ID : Swift.FixedWidthInteger
}
public protocol PairingWiFiStorageProtocol {
  func save(password: Swift.String?, for networkSSID: Swift.String)
  func password(for networkSSID: Swift.String) -> Swift.String?
  func removeAll()
}
public protocol PairingWebAPIProtocol {
  associatedtype Pairing_DevicesResponse : NamiPairingFramework.DevicesResponseProtocol
  associatedtype Pairing_PairDeviceResponse : NamiPairingFramework.PairDeviceResponseProtocol
  associatedtype Pairing_PlaceZone : NamiPairingFramework.PlaceZoneProtocol
  associatedtype Pairing_PairingChallengeResponse : NamiPairingFramework.PairingChallengeResponseProtocol
  associatedtype Pairing_WiFiCredentialsUpdateSession : NamiPairingFramework.WiFiCredentialsUpdateSessionProtocol
  func listDevices(query: NamiPairingFramework.DevicesQueryProtocol) -> Combine.AnyPublisher<Self.Pairing_DevicesResponse, Swift.Error>
  func listPlaceZones(for placeId: NamiPairingFramework.PlaceID) -> Combine.AnyPublisher<[Self.Pairing_PlaceZone], Swift.Error>
  func requestPairingChallenge(roomId: NamiPairingFramework.RoomID, deviceCertificate: Swift.String) -> Combine.AnyPublisher<Self.Pairing_PairingChallengeResponse, Swift.Error>
  func pairDevice(roomId: NamiPairingFramework.RoomID, deviceName: Swift.String, cloudChallenge: Swift.String, deviceResponse: Swift.String, deviceCertificate: Swift.String, intent: Swift.String?) -> Combine.AnyPublisher<Self.Pairing_PairDeviceResponse, Swift.Error>
  func deleteDevice(id: NamiPairingFramework.DeviceID) -> Combine.AnyPublisher<Swift.Void, Swift.Error>
  func getWiFiCredentialsUpdateSession(id: NamiPairingFramework.WiFiCredentialsUpdateSessionID) -> Combine.AnyPublisher<Self.Pairing_WiFiCredentialsUpdateSession, Swift.Error>
  func deleteDeviceFromSession(uid: NamiPairingFramework.DeviceUniversalID, sessionId: NamiPairingFramework.WiFiCredentialsUpdateSessionID) -> Combine.AnyPublisher<Self.Pairing_WiFiCredentialsUpdateSession, Swift.Error>
}
public protocol DevicesQueryProtocol {
  var placeIds: [NamiPairingFramework.PlaceID] { get set }
  var zoneIds: [NamiPairingFramework.PlaceZoneID] { get set }
  var roomIds: [NamiPairingFramework.RoomID] { get set }
  var uids: [NamiPairingFramework.DeviceUniversalID] { get set }
  var cursor: Swift.String? { get set }
}
public protocol DevicesResponseProtocol {
  associatedtype Device : NamiPairingFramework.DeviceProtocol
  var devices: [Self.Device] { get }
  var total: Swift.Int { get }
}
public protocol DeviceProtocol : Swift.Equatable {
  associatedtype DeviceCloudState : NamiPairingFramework.DeviceCloudStateProtocol
  associatedtype DeviceModel : NamiPairingFramework.DeviceModelProtocol
  var id: NamiPairingFramework.DeviceID { get }
  var uid: NamiPairingFramework.DeviceUniversalID { get }
  var urn: Swift.String { get }
  var model: Self.DeviceModel { get }
  var deviceState: Self.DeviceCloudState? { get }
}
public protocol DeviceCloudStateProtocol : Swift.Equatable {
  var payload: Foundation.Data { get }
}
public protocol PlaceZoneProtocol : Swift.Equatable {
  var id: NamiPairingFramework.PlaceZoneID { get }
  var externalId: Swift.String { get }
  var name: Swift.String { get }
}
public protocol PairingChallengeResponseProtocol {
  associatedtype DeviceModel : NamiPairingFramework.DeviceModelProtocol
  var challenge: Swift.String { get }
  var model: Self.DeviceModel { get }
}
public protocol DeviceModelProtocol : Swift.Equatable {
  var codeName: Swift.String { get }
  var productLabel: Swift.String { get }
  var productId: NamiPairingFramework.DeviceProductID { get }
}
public protocol PairDeviceResponseProtocol {
  associatedtype WiredPlaceKeys : NamiPairingFramework.WiredPlaceKeysProtocol
  associatedtype Device : NamiPairingFramework.DeviceProtocol
  var payload: Self.WiredPlaceKeys { get }
  var device: Self.Device { get }
}
public protocol WiredPlaceKeysProtocol : Swift.Equatable {
  var ciphertext: Swift.String { get }
  var iv: Swift.String { get }
  var authTag: Swift.String { get }
  var serverKey: Swift.String { get }
}
public protocol UpdatedDeviceProtocol : Swift.Equatable {
  var uid: NamiPairingFramework.DeviceUniversalID { get }
}
public protocol WiFiCredentialsUpdateSessionProtocol : Swift.Equatable {
  associatedtype UpdatedDevice : NamiPairingFramework.UpdatedDeviceProtocol
  var id: NamiPairingFramework.WiFiCredentialsUpdateSessionID { get }
  var zoneId: NamiPairingFramework.PlaceZoneID { get }
  var updatedDevices: [Self.UpdatedDevice]? { get }
}
public protocol PairingNetworkError : Swift.Error {
  var localizedDescription: Swift.String { get }
}
public typealias PortableTypedCache = NamiPairingFramework.TypedCache
final public class TypedCache {
  public init()
  final public func retrieve<Element>(_ type: Element.Type, toInit: (inout Swift.Set<Combine.AnyCancellable>) -> Element) -> Element where Element : AnyObject
  final public func replace<Element>(_ type: Element.Type, toInit: (inout Swift.Set<Combine.AnyCancellable>) -> Element) -> Element where Element : AnyObject
  final public func delete<Element>(_ type: Element.Type) where Element : AnyObject
  @objc deinit
}
public protocol ThreadSecureStorageProtocol {
  associatedtype Thread_SecureStorageError : Swift.Error
  static func storeOrUpdate(with data: Foundation.Data, at key: Swift.String, server: Swift.String)
  static func retrieve(at key: Swift.String, server: Swift.String) -> Swift.Result<Foundation.Data, Self.Thread_SecureStorageError>
  static func delete(at key: Swift.String, server: Swift.String)
}
public enum MeshCoPType : Swift.Equatable, Swift.Codable {
  case channel(Swift.UInt16)
  case panID(Swift.UInt16)
  case extendedPanID(Swift.UInt64)
  case networkName(Swift.String)
  case pskc([Swift.UInt8])
  case networkKey(Foundation.Data)
  case sequenceCounter(Swift.UInt64)
  case meshLocalPrefix(Swift.UInt64)
  case securityPolicy(Swift.UInt32)
  case activeTimestamp(Swift.UInt64)
  case pendingTimestamp(Swift.UInt64)
  case delayTimer(Swift.UInt32)
  case channelMask([[Swift.UInt8]])
  public static func == (a: NamiPairingFramework.MeshCoPType, b: NamiPairingFramework.MeshCoPType) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
final public class ThreadOperationalDatasetProvider<SecureStorage> where SecureStorage : NamiPairingFramework.ThreadSecureStorageProtocol {
  public init(secureStoreServer: Swift.String, storage: SecureStorage.Type)
  final public func newRandomDataset(networkName: Swift.String?) -> NamiPairingFramework.NamiThreadOperationalDataset
  final public func retrieve(placeId: NamiPairingFramework.PlaceID) -> NamiPairingFramework.NamiThreadOperationalDataset?
  final public func removeDataset(for placeId: NamiPairingFramework.PlaceID)
  final public func storeDataset(_ dataset: NamiPairingFramework.NamiThreadOperationalDataset, for placeId: NamiPairingFramework.PlaceID)
  @objc deinit
}
public typealias PanID = Foundation.Data
public struct NamiThreadOperationalDataset : Swift.Equatable, Swift.Codable {
  public init()
  public init(placeName: Swift.String)
  public init(networkName: Swift.String)
  public init(data: Foundation.Data)
  public let tlvs: [NamiPairingFramework.MeshCoPType]
  public var data: Foundation.Data {
    get
  }
  public func equalsNumericalPanID<ID>(_ panId: ID) -> Swift.Bool where ID : Swift.FixedWidthInteger
  public static func == (a: NamiPairingFramework.NamiThreadOperationalDataset, b: NamiPairingFramework.NamiThreadOperationalDataset) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension NamiPairingFramework.InMemoryThreadDatasetStorage.StorageError : Swift.Equatable {}
extension NamiPairingFramework.InMemoryThreadDatasetStorage.StorageError : Swift.Hashable {}
extension NamiPairingFramework.AuthenticationError : Swift.Equatable {}
extension NamiPairingFramework.AuthenticationError : Swift.Hashable {}
extension NamiPairingFramework.NamiDeviceCapability : Swift.Hashable {}
extension NamiPairingFramework.MeasurementSystem : Swift.Equatable {}
extension NamiPairingFramework.MeasurementSystem : Swift.Hashable {}
extension NamiPairingFramework.NamiDeviceConnectivity : Swift.Equatable {}
extension NamiPairingFramework.NamiDeviceConnectivity : Swift.Hashable {}
extension NamiPairingFramework.NamiAlertMode : Swift.Hashable {}
extension NamiPairingFramework.NamiAlertMode : Swift.RawRepresentable {}
extension NamiPairingFramework.PacketBoatError : Swift.Equatable {}
extension NamiPairingFramework.PacketBoatError : Swift.Hashable {}
extension NamiPairingFramework.PacketBoatError : Swift.RawRepresentable {}
extension NamiPairingFramework.Seance.Role : Swift.Equatable {}
extension NamiPairingFramework.Seance.Role : Swift.Hashable {}
extension NamiPairingFramework.Seance.State : Swift.Equatable {}
extension NamiPairingFramework.Seance.State : Swift.Hashable {}
extension NamiPairingFramework.QRScanner.ScanError : Swift.Equatable {}
extension NamiPairingFramework.QRScanner.ScanError : Swift.Hashable {}
extension NamiPairingFramework.QRScanner.ScanError : Swift.RawRepresentable {}
extension NamiPairingFramework.ListWiFiNetworks.State : Swift.Equatable {}
extension NamiPairingFramework.ListWiFiNetworks.ViewModel : NamiPairingFramework.PairingStepEventSendableViewModelProtocol {}
extension NamiPairingFramework.PowerOnAndScanning.Event : Swift.Equatable {}
extension NamiPairingFramework.PowerOnAndScanning.Event : Swift.Hashable {}
extension NamiPairingFramework.OtherWiFiNetwork.State : Swift.Equatable {}
extension NamiPairingFramework.OtherWiFiNetwork.ViewModel : NamiPairingFramework.PairingStepEventSendableViewModelProtocol {}
extension NamiPairingFramework.BluetoothUsageHint.Event : Swift.Equatable {}
extension NamiPairingFramework.BluetoothUsageHint.Event : Swift.Hashable {}
extension NamiPairingFramework.EnterWiFiPassword.Event : Swift.Equatable {}
extension NamiPairingFramework.EnterWiFiPassword.Event : Swift.Hashable {}
extension NamiPairingFramework.Pairing.ConnectTo : Swift.Hashable {}
extension NamiPairingFramework.Pairing.ThreadError : Swift.Hashable {}
extension NamiPairingFramework.Pairing.ActionOnError : Swift.Hashable {}
extension NamiPairingFramework.Pairing.ViewModel : NamiPairingFramework.PairingStepEventSendableViewModelProtocol {}
