// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name StandardPairingUI
import Combine
import CoreGraphics
import DeveloperToolsSupport
import DeviceConnections
import Foundation
import Lottie
import NamiPairingFramework
import SafariServices
@_exported import StandardPairingUI
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum LottieLoopModeWrapper {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
}
public struct LottieAnimationWrapper {
  public func animationView(looping: StandardPairingUI.LottieLoopModeWrapper = .loop) -> some SwiftUI.View
  
}
public class WordingManager : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($wordings) public var wordings: any StandardPairingUI.WordingProtocol {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $wordings: Combine.Published<any StandardPairingUI.WordingProtocol>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public init(wordings: any StandardPairingUI.WordingProtocol)
  public func setWordings(_ wordings: any StandardPairingUI.WordingProtocol)
  public func resetWordings()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol WordingProtocol {
  var ok: Swift.String { get }
  var next: Swift.String { get }
  var cancel: Swift.String { get }
  var pairingNavigationBarTitle: Swift.String { get }
  func connectingToDevice(deviceName: Swift.String) -> Swift.String
  var headerConnectToPower: Swift.String { get }
  var explainedReadyToPair: Swift.String { get }
  var headerContactSensor: Swift.String { get }
  var scanning: Swift.String { get }
  var askUserToWait: Swift.String { get }
  var bluetoothDisabled: Swift.String { get }
  var enableBlueToothInSettingsHeader: Swift.String { get }
  var buttonSettings: Swift.String { get }
  var scanDeviceTitle: Swift.String { get }
  var scanDeviceSubtitle: Swift.String { get }
  var missingCameraPermissionTitle: Swift.String { get }
  var missingCameraPermissionDescription: Swift.String { get }
  var openSettings: Swift.String { get }
  var deviceFoundHeader1: Swift.String { get }
  var deviceFoundHeader2: Swift.String { get }
  func askToNameHeader(productLabel: Swift.String) -> Swift.String
  var nameDeviceExplained: Swift.String { get }
  var setUpAsBorderRouter: Swift.String { get }
  var settingUpThisDevice: Swift.String { get }
  var nonFirstThreadDeviceDescription1: Swift.String { get }
  var nonFirstThreadDeviceDescription2: Swift.String { get }
  func nonFirstThreadDeviceDescription3(zoneName: Swift.String) -> Swift.String
  func nonFirstWifiDeviceDescription1(zoneName: Swift.String) -> Swift.String
  var wifiDeviceMetricDistanceDescription: Swift.String { get }
  var wifiDeviceImperialDistanceDescription: Swift.String { get }
  var firstThreadDeviceDescription1: Swift.String { get }
  var firstThreadDeviceDescription2: Swift.String { get }
  var firstThreadDeviceDescription3: Swift.String { get }
  func firstWifiDeviceDescription1(zoneName: Swift.String) -> Swift.String
  var firstWifiDeviceDescription2: Swift.String { get }
  var scanQRtitle: Swift.String { get }
  var scanQRsubtitle: Swift.String { get }
  var qrCodeError: Swift.String { get }
  var qrCodeMismatchError: Swift.String { get }
  var tryAgainButton: Swift.String { get }
  var connectWifiTitle: Swift.String { get }
  var selectNetwork: Swift.String { get }
  var networkNotFound: Swift.String { get }
  var availableNetworks: Swift.String { get }
  var otherNetworkButton: Swift.String { get }
  var enterPassword: Swift.String { get }
  func enterPasswordHeaderTitle(networkName: Swift.String) -> Swift.String
  var passwordEntryFieldPlaceholder: Swift.String { get }
  var passwordEntryFieldHint: Swift.String { get }
  var buttonReadyToConnect: Swift.String { get }
  var foundSavedPassword: Swift.String { get }
  func useSavedPassword(networkName: Swift.String) -> Swift.String
  var forget: Swift.String { get }
  var otherWifiNetworkTitle: Swift.String { get }
  var deviceConnectivityHint: Swift.String { get }
  var networkNamePlaceholder: Swift.String { get }
  var passwordPlaceholder: Swift.String { get }
  var readyToConnectButton: Swift.String { get }
  var finishingSetupHeader: Swift.String { get }
  var gameOfPongText: Swift.String { get }
  var positioningNavigationTitle: Swift.String { get }
  var widarInfoTitle: Swift.String { get }
  var widarInfoMustOptimisePosition: Swift.String { get }
  var widarInfoAvoidMovingWhenOptimized: Swift.String { get }
  var nextButton: Swift.String { get }
  var startPositioningButton: Swift.String { get }
  var recommendationsTitle: Swift.String { get }
  var recommendationsInfoAttachBase: Swift.String { get }
  var recommendationsInfoWireOnBack: Swift.String { get }
  var recommendationsInfoKeepAreaClear: Swift.String { get }
  var finishButton: Swift.String { get }
  var cancelButton: Swift.String { get }
  var positioningGuidanceTitle: Swift.String { get }
  var guideMetric: Swift.String { get }
  var guideImperial: Swift.String { get }
  var statusLabel: Swift.String { get }
  var statusChecking: Swift.String { get }
  var statusMispositioned: Swift.String { get }
  var statusGettingBetter: Swift.String { get }
  var statusOptimized: Swift.String { get }
  var statusEstablishingConnection: Swift.String { get }
  var positioningTip: Swift.String { get }
  var cancelPopupTitle: Swift.String { get }
  var cancelPopupMessage: Swift.String { get }
  var cancelPopupBackToPositioningButton: Swift.String { get }
  var cancelPopupCancelButton: Swift.String { get }
  var successTitle: Swift.String { get }
  func sucessContentMessage(deviceName: Swift.String) -> Swift.String
  var doneButton: Swift.String { get }
  var errorOccurredTitle: Swift.String { get }
  var tryAgainActionTitle: Swift.String { get }
  var restartActionTitle: Swift.String { get }
  var ignoreActionTitle: Swift.String { get }
  var restartSetupActionTitle: Swift.String { get }
  var exitSetupActionTitle: Swift.String { get }
  var pairingErrorNeedHelp: Swift.String { get }
  var pairingErrorOccurredTitle: Swift.String { get }
  var pairingErrorDeviceWifiScanTitle: Swift.String { get }
  var pairingErrorDeviceWifiJoinIpTitle: Swift.String { get }
  var pairingErrorDeviceWifiJoinPasswordTitle: Swift.String { get }
  var pairingErrorDeviceMismatchTitle: Swift.String { get }
  var pairingErrorUnexpectedStateDescription: Swift.String { get }
  var pairingErrorUnexpectedMessageDescription: Swift.String { get }
  var pairingErrorSeanceDescription: Swift.String { get }
  var pairingErrorSerializationDescription: Swift.String { get }
  var pairingErrorDeserializationDescription: Swift.String { get }
  var pairingErrorEncryptionErrorDescription: Swift.String { get }
  var pairingErrorDeviceMismatchDescription: Swift.String { get }
  var pairingErrorDeviceSecureSessionDescription: Swift.String { get }
  var pairingErrorDeviceCloudChallengeDescription: Swift.String { get }
  var pairingErrorDeviceWifiScanDescription: Swift.String { get }
  var pairingErrorDeviceWifiJoinDescription: Swift.String { get }
  var pairingErrorDeviceWifiJoinPasswordDescription: Swift.String { get }
  var pairingErrorDeviceWifiJoinIpDescription: Swift.String { get }
  var pairingErrorsUnableJoinThreadNetworksDescription1: Swift.String { get }
  func pairingErrorsUnableJoinThreadNetworksDescription2(zoneName: Swift.String) -> Swift.String
  var pairingErrorDeviceUnknownUnrecognizedDescription: Swift.String { get }
  var pairingThreadErrorDatasetMissingTitle: Swift.String { get }
  var pairingThreadErrorThreadNetworkNotFoundTitle: Swift.String { get }
  var pairingThreadErrorDatasetMissingDescription: Swift.String { get }
  func pairingThreadErrorContactSensorNoThreadNetworksFoundDescription1(zoneName: Swift.String) -> Swift.String
  func pairingThreadErrorNoThreadNetworksFoundDescription(zoneName: Swift.String) -> Swift.String
  var positioningErrorTitle: Swift.String { get }
  var deviceNotFoundMessage: Swift.String { get }
  var retryPositioningButton: Swift.String { get }
  var exitPositioningButton: Swift.String { get }
  var urlNotPulsingBlue: Swift.String { get }
  var urlNamiThreadTopology: Swift.String { get }
  var urlNotConnectToThread: Swift.String { get }
  var pairingScanningBleFaq: Swift.String { get }
}
extension StandardPairingUI.WordingProtocol {
  public var ok: Swift.String {
    get
  }
  public var next: Swift.String {
    get
  }
  public var cancel: Swift.String {
    get
  }
  public var pairingNavigationBarTitle: Swift.String {
    get
  }
  public func connectingToDevice(deviceName: Swift.String) -> Swift.String
  public var headerConnectToPower: Swift.String {
    get
  }
  public var explainedReadyToPair: Swift.String {
    get
  }
  public var headerContactSensor: Swift.String {
    get
  }
  public var scanning: Swift.String {
    get
  }
  public var askUserToWait: Swift.String {
    get
  }
  public var bluetoothDisabled: Swift.String {
    get
  }
  public var enableBlueToothInSettingsHeader: Swift.String {
    get
  }
  public var buttonSettings: Swift.String {
    get
  }
  public var scanDeviceTitle: Swift.String {
    get
  }
  public var scanDeviceSubtitle: Swift.String {
    get
  }
  public var missingCameraPermissionTitle: Swift.String {
    get
  }
  public var missingCameraPermissionDescription: Swift.String {
    get
  }
  public var openSettings: Swift.String {
    get
  }
  public var deviceFoundHeader1: Swift.String {
    get
  }
  public var deviceFoundHeader2: Swift.String {
    get
  }
  public func askToNameHeader(productLabel: Swift.String) -> Swift.String
  public var nameDeviceExplained: Swift.String {
    get
  }
  public var setUpAsBorderRouter: Swift.String {
    get
  }
  public var settingUpThisDevice: Swift.String {
    get
  }
  public var nonFirstThreadDeviceDescription1: Swift.String {
    get
  }
  public var nonFirstThreadDeviceDescription2: Swift.String {
    get
  }
  public func nonFirstThreadDeviceDescription3(zoneName: Swift.String) -> Swift.String
  public func nonFirstWifiDeviceDescription1(zoneName: Swift.String) -> Swift.String
  public var wifiDeviceMetricDistanceDescription: Swift.String {
    get
  }
  public var wifiDeviceImperialDistanceDescription: Swift.String {
    get
  }
  public var firstThreadDeviceDescription1: Swift.String {
    get
  }
  public var firstThreadDeviceDescription2: Swift.String {
    get
  }
  public var firstThreadDeviceDescription3: Swift.String {
    get
  }
  public func firstWifiDeviceDescription1(zoneName: Swift.String) -> Swift.String
  public var firstWifiDeviceDescription2: Swift.String {
    get
  }
  public var scanQRtitle: Swift.String {
    get
  }
  public var scanQRsubtitle: Swift.String {
    get
  }
  public var qrCodeError: Swift.String {
    get
  }
  public var qrCodeMismatchError: Swift.String {
    get
  }
  public var tryAgainButton: Swift.String {
    get
  }
  public var connectWifiTitle: Swift.String {
    get
  }
  public var selectNetwork: Swift.String {
    get
  }
  public var networkNotFound: Swift.String {
    get
  }
  public var availableNetworks: Swift.String {
    get
  }
  public var otherNetworkButton: Swift.String {
    get
  }
  public var enterPassword: Swift.String {
    get
  }
  public func enterPasswordHeaderTitle(networkName: Swift.String) -> Swift.String
  public var passwordEntryFieldPlaceholder: Swift.String {
    get
  }
  public var passwordEntryFieldHint: Swift.String {
    get
  }
  public var buttonReadyToConnect: Swift.String {
    get
  }
  public var foundSavedPassword: Swift.String {
    get
  }
  public func useSavedPassword(networkName: Swift.String) -> Swift.String
  public var forget: Swift.String {
    get
  }
  public var otherWifiNetworkTitle: Swift.String {
    get
  }
  public var deviceConnectivityHint: Swift.String {
    get
  }
  public var networkNamePlaceholder: Swift.String {
    get
  }
  public var passwordPlaceholder: Swift.String {
    get
  }
  public var readyToConnectButton: Swift.String {
    get
  }
  public var finishingSetupHeader: Swift.String {
    get
  }
  public var gameOfPongText: Swift.String {
    get
  }
  public var positioningNavigationTitle: Swift.String {
    get
  }
  public var widarInfoTitle: Swift.String {
    get
  }
  public var widarInfoMustOptimisePosition: Swift.String {
    get
  }
  public var widarInfoAvoidMovingWhenOptimized: Swift.String {
    get
  }
  public var nextButton: Swift.String {
    get
  }
  public var startPositioningButton: Swift.String {
    get
  }
  public var recommendationsTitle: Swift.String {
    get
  }
  public var recommendationsInfoAttachBase: Swift.String {
    get
  }
  public var recommendationsInfoWireOnBack: Swift.String {
    get
  }
  public var recommendationsInfoKeepAreaClear: Swift.String {
    get
  }
  public var finishButton: Swift.String {
    get
  }
  public var cancelButton: Swift.String {
    get
  }
  public var positioningGuidanceTitle: Swift.String {
    get
  }
  public var guideMetric: Swift.String {
    get
  }
  public var guideImperial: Swift.String {
    get
  }
  public var statusLabel: Swift.String {
    get
  }
  public var statusChecking: Swift.String {
    get
  }
  public var statusMispositioned: Swift.String {
    get
  }
  public var statusGettingBetter: Swift.String {
    get
  }
  public var statusOptimized: Swift.String {
    get
  }
  public var statusEstablishingConnection: Swift.String {
    get
  }
  public var positioningTip: Swift.String {
    get
  }
  public var cancelPopupTitle: Swift.String {
    get
  }
  public var cancelPopupMessage: Swift.String {
    get
  }
  public var cancelPopupBackToPositioningButton: Swift.String {
    get
  }
  public var cancelPopupCancelButton: Swift.String {
    get
  }
  public var successTitle: Swift.String {
    get
  }
  public func sucessContentMessage(deviceName: Swift.String) -> Swift.String
  public var doneButton: Swift.String {
    get
  }
  public var errorOccurredTitle: Swift.String {
    get
  }
  public var tryAgainActionTitle: Swift.String {
    get
  }
  public var restartActionTitle: Swift.String {
    get
  }
  public var ignoreActionTitle: Swift.String {
    get
  }
  public var restartSetupActionTitle: Swift.String {
    get
  }
  public var exitSetupActionTitle: Swift.String {
    get
  }
  public var pairingErrorNeedHelp: Swift.String {
    get
  }
  public var pairingErrorOccurredTitle: Swift.String {
    get
  }
  public var pairingErrorDeviceWifiScanTitle: Swift.String {
    get
  }
  public var pairingErrorDeviceWifiJoinIpTitle: Swift.String {
    get
  }
  public var pairingErrorDeviceWifiJoinPasswordTitle: Swift.String {
    get
  }
  public var pairingErrorDeviceMismatchTitle: Swift.String {
    get
  }
  public var pairingErrorUnexpectedStateDescription: Swift.String {
    get
  }
  public var pairingErrorUnexpectedMessageDescription: Swift.String {
    get
  }
  public var pairingErrorSeanceDescription: Swift.String {
    get
  }
  public var pairingErrorSerializationDescription: Swift.String {
    get
  }
  public var pairingErrorDeserializationDescription: Swift.String {
    get
  }
  public var pairingErrorEncryptionErrorDescription: Swift.String {
    get
  }
  public var pairingErrorDeviceMismatchDescription: Swift.String {
    get
  }
  public var pairingErrorDeviceSecureSessionDescription: Swift.String {
    get
  }
  public var pairingErrorDeviceCloudChallengeDescription: Swift.String {
    get
  }
  public var pairingErrorDeviceWifiScanDescription: Swift.String {
    get
  }
  public var pairingErrorDeviceWifiJoinDescription: Swift.String {
    get
  }
  public var pairingErrorDeviceWifiJoinPasswordDescription: Swift.String {
    get
  }
  public var pairingErrorDeviceWifiJoinIpDescription: Swift.String {
    get
  }
  public var pairingErrorsUnableJoinThreadNetworksDescription1: Swift.String {
    get
  }
  public func pairingErrorsUnableJoinThreadNetworksDescription2(zoneName: Swift.String) -> Swift.String
  public var pairingErrorDeviceUnknownUnrecognizedDescription: Swift.String {
    get
  }
  public var pairingThreadErrorDatasetMissingTitle: Swift.String {
    get
  }
  public var pairingThreadErrorThreadNetworkNotFoundTitle: Swift.String {
    get
  }
  public var pairingThreadErrorDatasetMissingDescription: Swift.String {
    get
  }
  public func pairingThreadErrorContactSensorNoThreadNetworksFoundDescription1(zoneName: Swift.String) -> Swift.String
  public func pairingThreadErrorNoThreadNetworksFoundDescription(zoneName: Swift.String) -> Swift.String
  public var positioningErrorTitle: Swift.String {
    get
  }
  public var deviceNotFoundMessage: Swift.String {
    get
  }
  public var retryPositioningButton: Swift.String {
    get
  }
  public var exitPositioningButton: Swift.String {
    get
  }
  public var urlNotPulsingBlue: Swift.String {
    get
  }
  public var urlNamiThreadTopology: Swift.String {
    get
  }
  public var urlNotConnectToThread: Swift.String {
    get
  }
  public var pairingScanningBleFaq: Swift.String {
    get
  }
}
extension NamiPairingFramework.Pairing.Error {
  public var localizedDescription: Swift.String {
    get
  }
  public func getFAQLink(wordings: any StandardPairingUI.WordingProtocol) -> Swift.String?
}
public class ThemeManager : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($selectedTheme) public var selectedTheme: any StandardPairingUI.ThemeProtocol {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedTheme: Combine.Published<any StandardPairingUI.ThemeProtocol>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(selectedTheme: any StandardPairingUI.ThemeProtocol)
  public func setTheme(_ theme: any StandardPairingUI.ThemeProtocol)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SwiftUI.View {
  public func namiNavBar() -> some SwiftUI.View
  
}
public protocol ThemeProtocol {
  var headline1: SwiftUI.Font { get }
  var headline2: SwiftUI.Font { get }
  var headline3: SwiftUI.Font { get }
  var headline4: SwiftUI.Font { get }
  var headline5: SwiftUI.Font { get }
  var headline6: SwiftUI.Font { get }
  var paragraph1: SwiftUI.Font { get }
  var paragraph2: SwiftUI.Font { get }
  var small1: SwiftUI.Font { get }
  var small2: SwiftUI.Font { get }
  var primaryBlack: SwiftUI.Color { get }
  var secondaryBlack: SwiftUI.Color { get }
  var tertiaryBlack: SwiftUI.Color { get }
  var navigationTitleColor: SwiftUI.Color { get }
  var white: SwiftUI.Color { get }
  var background: SwiftUI.Color { get }
  var line: SwiftUI.Color { get }
  var accent: SwiftUI.Color { get }
  var negative: SwiftUI.Color { get }
  var warning: SwiftUI.Color { get }
  var positive: SwiftUI.Color { get }
  var lowAttentionAlert: SwiftUI.Color { get }
  var redAlert3: SwiftUI.Color { get }
  var redAlert4: SwiftUI.Color { get }
  var success3: SwiftUI.Color { get }
  var success4: SwiftUI.Color { get }
  var primaryActionButtonStyle: any SwiftUI.ButtonStyle { get }
  var secondaryActionButtonStyle: any SwiftUI.ButtonStyle { get }
  var tertiaryActionButtonStyle: any SwiftUI.ButtonStyle { get }
  var destructiveActionButtonStyle: any SwiftUI.ButtonStyle { get }
}
public struct NamiTheme : StandardPairingUI.ThemeProtocol {
  public init()
  public var headline1: SwiftUI.Font
  public var headline2: SwiftUI.Font
  public var headline3: SwiftUI.Font
  public var headline4: SwiftUI.Font
  public var headline5: SwiftUI.Font
  public var headline6: SwiftUI.Font
  public var paragraph1: SwiftUI.Font
  public var paragraph2: SwiftUI.Font
  public var small1: SwiftUI.Font
  public var small2: SwiftUI.Font
  public var primaryBlack: SwiftUI.Color
  public var secondaryBlack: SwiftUI.Color
  public var tertiaryBlack: SwiftUI.Color
  public var navigationTitleColor: SwiftUI.Color
  public var white: SwiftUI.Color
  public var background: SwiftUI.Color
  public var line: SwiftUI.Color
  public var accent: SwiftUI.Color
  public var negative: SwiftUI.Color
  public var warning: SwiftUI.Color
  public var positive: SwiftUI.Color
  public var lowAttentionAlert: SwiftUI.Color
  public var redAlert3: SwiftUI.Color
  public var redAlert4: SwiftUI.Color
  public var success3: SwiftUI.Color
  public var success4: SwiftUI.Color
  public var primaryActionButtonStyle: any SwiftUI.ButtonStyle
  public var secondaryActionButtonStyle: any SwiftUI.ButtonStyle
  public var tertiaryActionButtonStyle: any SwiftUI.ButtonStyle
  public var destructiveActionButtonStyle: any SwiftUI.ButtonStyle
}
extension NamiPairingFramework.Pairing.Error {
  public func getErrorMessageTitle(wordings: any StandardPairingUI.WordingProtocol) -> Swift.String
  public func getErrorMessageDescription(wordings: any StandardPairingUI.WordingProtocol) -> Swift.String
}
public struct ViewsContainer : NamiPairingFramework.PairingStepsContainer {
  public init()
  public var bluetoothUsageHint: (NamiPairingFramework.BluetoothUsageHint.ViewModel) -> StandardPairingUI.BluetoothUsageHintView
  public var powerOnAndScanning: (NamiPairingFramework.PowerOnAndScanning.ViewModel) -> StandardPairingUI.PowerOnAndScanningView
  public var enableBluetoothInSettings: () -> StandardPairingUI.EnableBluetoothInSettingsView
  public var enableCameraInSettings: () -> StandardPairingUI.EnableCameraInSettingsView
  public var bluetoothDeviceFound: (NamiPairingFramework.BluetoothDeviceFound.ViewModel) -> StandardPairingUI.BluetoothDeviceFoundView
  public var askToConnect: (NamiPairingFramework.AskToConnect.ViewModel) -> StandardPairingUI.AskToConnectView
  public var qrCodeScanner: (NamiPairingFramework.QRScanner.ViewModel) -> StandardPairingUI.QRScannerView
  public var listWiFiNetworks: (NamiPairingFramework.ListWiFiNetworks.ViewModel) -> StandardPairingUI.ListWiFiNetworksView
  public var otherWiFiNetwork: (NamiPairingFramework.OtherWiFiNetwork.ViewModel) -> StandardPairingUI.OtherWiFiNetworkView
  public var enterWiFiPassword: (NamiPairingFramework.EnterWiFiPassword.ViewModel) -> StandardPairingUI.EnterWiFiPasswordView
  public var finishingSetup: () -> StandardPairingUI.FinishingSetupView
  public var howToPosition: (NamiPairingFramework.HowToPosition.ViewModel) -> StandardPairingUI.HowToPositionView
  public var initialPositioningScreen: (NamiPairingFramework.InitialScreen.ViewModel) -> StandardPairingUI.InitialScreenView
  public var positioningGuidance: (NamiPairingFramework.PositioningGuidance.ViewModel) -> StandardPairingUI.PositioningGuidanceView
  public var positioningComplete: (NamiPairingFramework.PositioningComplete.ViewModel) -> StandardPairingUI.PositioningCompleteView
  public var positionError: (NamiPairingFramework.ErrorScreen.ViewModel) -> StandardPairingUI.ErrorScreenView
  public var pairingError: (NamiPairingFramework.PairingErrorScreen.ViewModel) -> StandardPairingUI.PairingErrorScreenView
  public var backButton: () -> StandardPairingUI.CircleButton?
  public typealias BackButtonView = StandardPairingUI.CircleButton
  public typealias ViewForAskToConnect = StandardPairingUI.AskToConnectView
  public typealias ViewForBluetoothDeviceFound = StandardPairingUI.BluetoothDeviceFoundView
  public typealias ViewForBluetoothUsageHint = StandardPairingUI.BluetoothUsageHintView
  public typealias ViewForEnableBluetoothInSettings = StandardPairingUI.EnableBluetoothInSettingsView
  public typealias ViewForEnableCameraInSettings = StandardPairingUI.EnableCameraInSettingsView
  public typealias ViewForEnterWiFiPassword = StandardPairingUI.EnterWiFiPasswordView
  public typealias ViewForFinishingSetup = StandardPairingUI.FinishingSetupView
  public typealias ViewForHowToPosition = StandardPairingUI.HowToPositionView
  public typealias ViewForInitialPositioningScreen = StandardPairingUI.InitialScreenView
  public typealias ViewForListWiFiNetworks = StandardPairingUI.ListWiFiNetworksView
  public typealias ViewForOtherWiFiNetwork = StandardPairingUI.OtherWiFiNetworkView
  public typealias ViewForPairingError = StandardPairingUI.PairingErrorScreenView
  public typealias ViewForPositioningComplete = StandardPairingUI.PositioningCompleteView
  public typealias ViewForPositioningErrorScreen = StandardPairingUI.ErrorScreenView
  public typealias ViewForPositioningGuidance = StandardPairingUI.PositioningGuidanceView
  public typealias ViewForPowerOnAndScanning = StandardPairingUI.PowerOnAndScanningView
  public typealias ViewForQRCodeScanner = StandardPairingUI.QRScannerView
}
@_Concurrency.MainActor(unsafe) public struct QRScannerView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.QRScanner.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI13QRScannerViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct PowerOnAndScanningView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.PowerOnAndScanning.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI22PowerOnAndScanningViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct BluetoothDeviceFoundView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.BluetoothDeviceFound.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI24BluetoothDeviceFoundViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct BluetoothUsageHintView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.BluetoothUsageHint.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI22BluetoothUsageHintViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct EnableBluetoothInSettingsView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI29EnableBluetoothInSettingsViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct ErrorScreenView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.ErrorScreen.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI15ErrorScreenViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct PositioningCompleteView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.PositioningComplete.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI23PositioningCompleteViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct InitialScreenView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.InitialScreen.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI17InitialScreenViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct HowToPositionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.HowToPosition.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI17HowToPositionViewV4bodyQrvp", 0) __
}
public struct AnimationView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI13AnimationViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct PositioningGuidanceView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.PositioningGuidance.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI23PositioningGuidanceViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct EnterWiFiPasswordView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.EnterWiFiPassword.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI21EnterWiFiPasswordViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct OtherWiFiNetworkView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.OtherWiFiNetwork.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI20OtherWiFiNetworkViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct FinishingSetupView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI18FinishingSetupViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct AskToConnectView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.AskToConnect.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI16AskToConnectViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct PairingErrorScreenView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.PairingErrorScreen.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI0B15ErrorScreenViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct EnableCameraInSettingsView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI26EnableCameraInSettingsViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct ListWiFiNetworksView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: NamiPairingFramework.ListWiFiNetworks.ViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI20ListWiFiNetworksViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct SetupTopNavigationBar<LeadingGroup, TrailingGroup, NotificationArea, Subviews> : SwiftUI.View where LeadingGroup : SwiftUI.View, TrailingGroup : SwiftUI.View, NotificationArea : SwiftUI.View, Subviews : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, largeTitle: Swift.String?, color: SwiftUI.Color, statusbarColorOverride: SwiftUI.Color = .clear, navbarBackgroundBleed: CoreFoundation.CGFloat = 0, @SwiftUI.ViewBuilder leadingButtonGroup: @escaping () -> LeadingGroup = { EmptyView() }, @SwiftUI.ViewBuilder trailingButtonGroup: @escaping () -> TrailingGroup = { EmptyView() }, @SwiftUI.ViewBuilder notificationAreaView: @escaping () -> NotificationArea = { EmptyView() }, @SwiftUI.ViewBuilder additionalViews: @escaping () -> Subviews = { EmptyView() })
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI21SetupTopNavigationBarV4bodyQrvp", 0) __<LeadingGroup, TrailingGroup, NotificationArea, Subviews>
}
public struct PongView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI8PongViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct DeviceSetupScreen<LeadingGroup, Subview, BottomGroup> : SwiftUI.View where LeadingGroup : SwiftUI.View, Subview : SwiftUI.View, BottomGroup : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, @SwiftUI.ViewBuilder subview: @escaping () -> Subview, @SwiftUI.ViewBuilder leadingButtonsGroup: @escaping () -> LeadingGroup = { EmptyView() }, @SwiftUI.ViewBuilder bottomButtonsGroup: @escaping () -> BottomGroup = { EmptyView() })
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI17DeviceSetupScreenV4bodyQrvp", 0) __<LeadingGroup, Subview, BottomGroup>
}
@_Concurrency.MainActor(unsafe) public struct SetupScreenTitleTextView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI24SetupScreenTitleTextViewV4bodyQrvp", 0) __
}
public class Animations {
  public init()
  @objc deinit
}
extension UIKit.UIImage {
  public enum AnimatableImageFormat : Swift.String {
    case gif
    case webP
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum DeviceImages {
  public static func image(for codeName: Swift.String) -> StandardPairingUI.AnimatableImageView
  public static func image(for model: DeviceConnections.NamiDeviceModel) -> StandardPairingUI.AnimatableImageView
}
extension SwiftUI.Image {
  public static func webp(_ name: Swift.String) -> SwiftUI.Image
  public static func webp(_ name: Swift.String, in bundle: Foundation.Bundle) -> SwiftUI.Image
}
public struct AnimatableImageView : SwiftUI.UIViewRepresentable {
  public init?(webP: Swift.String, in bundle: Foundation.Bundle)
  public init(uiImage: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: StandardPairingUI.AnimatableImageView.Context) -> UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIImageView, context: StandardPairingUI.AnimatableImageView.Context)
  public func resizable() -> some SwiftUI.View
  
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIImageView
}
public class Colors {
  public init()
  public enum ColorSaturation : Swift.String {
    case lite
    case normal
    case saturated
    case striking
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ColorSaturationNumber : Swift.Int {
    case saturation30
    case saturation40
    case saturation50
    case saturation60
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Neutral {
    public let primaryBlack: SwiftUI.Color
    public let primaryBlackDisabled: SwiftUI.Color
    public let secondaryBlack: SwiftUI.Color
    public let tertiaryBlack: SwiftUI.Color
    public let white: SwiftUI.Color
    public let whiteDisabled: SwiftUI.Color
    public let background: SwiftUI.Color
    public let line: SwiftUI.Color
  }
  public struct Graph {
    public let noData: SwiftUI.Color
    public let movement: SwiftUI.Color
    public let noMovement: SwiftUI.Color
    public let occupied: SwiftUI.Color
    public let notOccupied: SwiftUI.Color
    public let notHealthy: SwiftUI.Color
    public let healthy: SwiftUI.Color
    public let rest: SwiftUI.Color
    public let notRest: SwiftUI.Color
  }
  public struct DataRepresentations {
    public static func maroon(_ intensity: StandardPairingUI.Colors.ColorSaturationNumber) -> SwiftUI.Color
    public static func maroon(_ intensity: StandardPairingUI.Colors.ColorSaturation) -> SwiftUI.Color
    public static func arctic(_ intensity: StandardPairingUI.Colors.ColorSaturationNumber) -> SwiftUI.Color
    public static func arctic(_ intensity: StandardPairingUI.Colors.ColorSaturation) -> SwiftUI.Color
  }
  public static let allThemes: [DeviceConnections.ThemeID]
  final public let accent: SwiftUI.Color
  final public let headline: SwiftUI.Color
  final public let linkText: SwiftUI.Color
  final public let negative: SwiftUI.Color
  final public let warning: SwiftUI.Color
  final public let warningLight: SwiftUI.Color
  final public let positive: SwiftUI.Color
  final public let allGood: SwiftUI.Color
  final public let placeholder: SwiftUI.Color
  final public let authButtonStroke: SwiftUI.Color
  final public let buttonedFieldBackground: SwiftUI.Color
  final public let buttonedFieldStroke: SwiftUI.Color
  final public let progressSelected: SwiftUI.Color
  final public let lowAttentionAlert: SwiftUI.Color
  final public let lowAttentionAlertLight: SwiftUI.Color
  final public let alert1: SwiftUI.Color
  final public let alert2: SwiftUI.Color
  final public let redAlert3: SwiftUI.Color
  final public let redAlert4: SwiftUI.Color
  final public let success3: SwiftUI.Color
  final public let success4: SwiftUI.Color
  final public let neutral: StandardPairingUI.Colors.Neutral
  final public let graph: StandardPairingUI.Colors.Graph
  public var globalBlue: SwiftUI.Color {
    get
  }
  final public let warningAlert: SwiftUI.Color
  public var alert0: SwiftUI.Color {
    get
  }
  public var alert3: SwiftUI.Color {
    get
  }
  public var bodyText: SwiftUI.Color {
    get
  }
  public var darkText: SwiftUI.Color {
    get
  }
  public var primary: SwiftUI.Color {
    get
  }
  public var lowerBackground: SwiftUI.Color {
    get
  }
  public var borderStroke: SwiftUI.Color {
    get
  }
  public var graphLines: SwiftUI.Color {
    get
  }
  public var profileTileBackground: SwiftUI.Color {
    get
  }
  public func forTheme(_ base: DeviceConnections.ThemeID, saturation: StandardPairingUI.Colors.ColorSaturation = .normal) -> SwiftUI.Color
  @objc deinit
}
public struct URLLinks {
  public static let FAQNotPulsingBlue: Swift.String
  public static let FAQNamiThreadTopology: Swift.String
  public static let FAQNotConnectToThread: Swift.String
}
extension Lottie.LottieAnimation {
  final public func animationView(looping: Lottie.LottieLoopMode = .loop) -> some SwiftUI.View
  
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func gestureRecognizerShouldBegin(_: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension SwiftUI.View {
  public func allowSwipeBackNavigation(_ isAllowed: Swift.Bool) -> some SwiftUI.View
  
}
extension SwiftUI.Text {
  public init(_ content: any Swift.StringProtocol, font: StandardPairingUI.NamiTextStyle)
  public init(_ content: any Swift.StringProtocol, font: SwiftUI.Font)
  public func fillWidth(_ width: CoreFoundation.CGFloat = .infinity, alignment: SwiftUI.Alignment = .leading) -> some SwiftUI.View
  
}
public var statusbarAndNavbarShift: CoreFoundation.CGFloat {
  get
}
public var statusbarShift: CoreFoundation.CGFloat {
  get
}
public var navbarBackgroundViewHeight: CoreFoundation.CGFloat {
  get
}
public var navbarContentViewHeight: CoreFoundation.CGFloat {
  get
}
public var screenWidth: CoreFoundation.CGFloat {
  get
}
public var firstKeyWindow: UIKit.UIWindow?
public var defaultNavbarHeight: CoreFoundation.CGFloat
extension SwiftUI.View {
  public func onHeightUpdate(_ action: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.View
  
  public func readSize(onChange: @escaping (CoreFoundation.CGSize) -> Swift.Void) -> some SwiftUI.View
  
}
extension SwiftUI.Color {
  public init(hex: Swift.UInt, alpha: Swift.Double = 1.0)
  public static var namiColors: StandardPairingUI.Colors
  public static var systemBackground: SwiftUI.Color {
    get
  }
  public static var textLabel: SwiftUI.Color {
    get
  }
  public static var invertedTextLabel: SwiftUI.Color {
    get
  }
  public static var tint: SwiftUI.Color {
    get
  }
}
extension UIKit.UIFont {
  public class func preferredFont(from font: SwiftUI.Font) -> UIKit.UIFont
}
public struct ColorsKey : SwiftUI.EnvironmentKey {
  public static let defaultValue: StandardPairingUI.Colors
  public typealias Value = StandardPairingUI.Colors
}
extension SwiftUI.EnvironmentValues {
  public var colors: StandardPairingUI.Colors {
    get
    set
  }
}
public struct RoundedRectContainerView<Subviews> : SwiftUI.View where Subviews : SwiftUI.View {
  public init(spacing: CoreFoundation.CGFloat? = nil, cornerRadius: CoreFoundation.CGFloat = 16.0, excludingCorners: UIKit.UIRectCorner = [], shadowRadius: CoreFoundation.CGFloat? = nil, strokeWidth: CoreFoundation.CGFloat? = nil, strokeColor: SwiftUI.Color = Color.primary, backgroundColor: SwiftUI.Color = Color(UIColor.systemBackground), alignment: SwiftUI.Alignment? = .center, @SwiftUI.ViewBuilder subviews: () -> Subviews)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI24RoundedRectContainerViewV4bodyQrvp", 0) __<Subviews>
}
public struct NamiXMarkButton : SwiftUI.View {
  public init(appearance: StandardPairingUI.NamiXMarkButton.Appearance = .regular, diameter: CoreFoundation.CGFloat = 60, onTap: @escaping () -> Swift.Void)
  public enum Appearance {
    case regular
    case inverted
    public static func == (a: StandardPairingUI.NamiXMarkButton.Appearance, b: StandardPairingUI.NamiXMarkButton.Appearance) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI15NamiXMarkButtonV4bodyQrvp", 0) __
}
public struct NamiNavBackButton : SwiftUI.View {
  public var action: () -> Swift.Void
  public init()
  public init(action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI17NamiNavBackButtonV4bodyQrvp", 0) __
}
public struct NamiCircularXMarkButton : SwiftUI.View {
  public init(appearance: StandardPairingUI.NamiCircularXMarkButton.Appearance = .regular, diameter: CoreFoundation.CGFloat = 60, onTap: @escaping () -> Swift.Void)
  public enum Appearance {
    case regular
    case inverted
    public static func == (a: StandardPairingUI.NamiCircularXMarkButton.Appearance, b: StandardPairingUI.NamiCircularXMarkButton.Appearance) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI23NamiCircularXMarkButtonV4bodyQrvp", 0) __
}
public struct NamiPageIndexIndicatorView : SwiftUI.View {
  public init(numberOfPages: Swift.Int, currentIndex: Swift.Int, activeColor: SwiftUI.Color = Color.gray, inactiveColor: SwiftUI.Color = Color.gray.opacity(0.5), heightOfIndicator: CoreFoundation.CGFloat = 16, spacingOfIndicator: CoreFoundation.CGFloat = 12)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI26NamiPageIndexIndicatorViewV4bodyQrvp", 0) __
}
public struct TextFieldView : SwiftUI.UIViewRepresentable {
  public init(placeholder: Swift.String, text: SwiftUI.Binding<Swift.String>, isEditing: SwiftUI.Binding<Swift.Bool>, returnKeyType: UIKit.UIReturnKeyType = .default)
  @objc final public class Coordinator : ObjectiveC.NSObject {
    public init(text: SwiftUI.Binding<Swift.String>, isEditing: SwiftUI.Binding<Swift.Bool>, showsPassword: SwiftUI.Binding<Swift.Bool>, showImageName: Swift.String, hideImageName: Swift.String)
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) public static func dismantleUIView(_ uiView: UIKit.UITextField, coordinator: StandardPairingUI.TextFieldView.Coordinator)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> StandardPairingUI.TextFieldView.Coordinator
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: StandardPairingUI.TextFieldView.Context) -> UIKit.UITextField
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ textField: UIKit.UITextField, context: StandardPairingUI.TextFieldView.Context)
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UITextField
}
extension StandardPairingUI.TextFieldView.Coordinator : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public enum NamiTextFieldStyle {
  case neutral
  case positive
  case negative
  public static func == (a: StandardPairingUI.NamiTextFieldStyle, b: StandardPairingUI.NamiTextFieldStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct NamiTextField : SwiftUI.View {
  public init(placeholder: Swift.String, text: SwiftUI.Binding<Swift.String>, isEditing: SwiftUI.Binding<Swift.Bool>? = nil, returnKeyType: UIKit.UIReturnKeyType = .default, textFieldFont: SwiftUI.Font? = nil, subTextFont: SwiftUI.Font? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI13NamiTextFieldV4bodyQrvp", 0) __
}
extension StandardPairingUI.NamiTextField {
  public func style(_ style: StandardPairingUI.NamiTextFieldStyle) -> StandardPairingUI.NamiTextField
  public func subText(_ subText: Swift.String?) -> StandardPairingUI.NamiTextField
  public func secureTextEntry(_ secure: Swift.Bool) -> StandardPairingUI.NamiTextField
}
public struct NamiErrorChatBubble : SwiftUI.View {
  public init(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI19NamiErrorChatBubbleV4bodyQrvp", 0) __
}
public struct NamiChatBubble : SwiftUI.View {
  public init(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI14NamiChatBubbleV4bodyQrvp", 0) __
}
public struct NamiTopNavigationScreen<LeadingGroup, TrailingGroup, BottomGroup, NotificationArea, Subviews, MainContent> : SwiftUI.View where LeadingGroup : SwiftUI.View, TrailingGroup : SwiftUI.View, BottomGroup : SwiftUI.View, NotificationArea : SwiftUI.View, Subviews : SwiftUI.View, MainContent : SwiftUI.View {
  public init(title: Swift.String? = nil, largeTitle: Swift.String? = nil, themeId: DeviceConnections.ThemeID = 0, colorOverride: SwiftUI.Color? = nil, statusbarColorOverride: SwiftUI.Color = .clear, navbarBackgroundBleed: CoreFoundation.CGFloat = 0, contentBehavior: StandardPairingUI.NamiTopNavigationScreen<LeadingGroup, TrailingGroup, BottomGroup, NotificationArea, Subviews, MainContent>.ContentBehavior = .scrollable, @SwiftUI.ViewBuilder mainContent: @escaping () -> MainContent = { EmptyView() }, @SwiftUI.ViewBuilder leadingButtonsGroup: @escaping () -> LeadingGroup = { EmptyView() }, @SwiftUI.ViewBuilder trailingButtonsGroup: @escaping () -> TrailingGroup = { EmptyView() }, @SwiftUI.ViewBuilder notificationAreaView: @escaping () -> NotificationArea = { EmptyView() }, @SwiftUI.ViewBuilder additionalViews: @escaping () -> Subviews = { EmptyView() }, @SwiftUI.ViewBuilder bottomButtonsGroup: @escaping () -> BottomGroup = { EmptyView() })
  public enum ContentBehavior {
    case scrollabe(onScroll: (CoreFoundation.CGFloat) -> Swift.Void)
    case fixed
    public static var scrollable: StandardPairingUI.NamiTopNavigationScreen<LeadingGroup, TrailingGroup, BottomGroup, NotificationArea, Subviews, MainContent>.ContentBehavior {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI23NamiTopNavigationScreenV4bodyQrvp", 0) __<LeadingGroup, TrailingGroup, BottomGroup, NotificationArea, Subviews, MainContent>
}
public struct LottieAnimationView : SwiftUI.View {
  public init(animation: Swift.KeyPath<StandardPairingUI.LottieAnimations, Lottie.LottieAnimation>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI19LottieAnimationViewV4bodyQrvp", 0) __
}
public typealias LottieAnimations = StandardPairingUI.Animations
public struct LottieAnimationsKey : SwiftUI.EnvironmentKey {
  public static let defaultValue: StandardPairingUI.LottieAnimations
  public typealias Value = StandardPairingUI.LottieAnimations
}
public struct CircleButton : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI12CircleButtonV4bodyQrvp", 0) __
}
public struct NamiTextStyle : Swift.Identifiable {
  public enum Leading {
    case loose
    case tight
    case standard
    public init?(rawValue: SwiftUI.Font.Leading)
    public static func == (a: StandardPairingUI.NamiTextStyle.Leading, b: StandardPairingUI.NamiTextStyle.Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let headline: StandardPairingUI.NamiTextStyle
  public static let headline2: StandardPairingUI.NamiTextStyle
  public static let headline3: StandardPairingUI.NamiTextStyle
  public static let headline4: StandardPairingUI.NamiTextStyle
  public static let headline5: StandardPairingUI.NamiTextStyle
  public static let headline6: StandardPairingUI.NamiTextStyle
  public static let paragraph1: StandardPairingUI.NamiTextStyle
  public static let paragraph2: StandardPairingUI.NamiTextStyle
  public static let small: StandardPairingUI.NamiTextStyle
  public static let small2: StandardPairingUI.NamiTextStyle
  public let id: Swift.String
  public var font: SwiftUI.Font {
    get
  }
  public var uiFont: UIKit.UIFont {
    get
  }
  public typealias ID = Swift.String
}
@available(iOS 15, *)
public struct NamiTextHyperLink : SwiftUI.View {
  public init(content: Foundation.AttributedString)
  public init(text: Swift.String, link: Swift.String, linkColor: SwiftUI.Color, underlineColor: SwiftUI.Color? = nil)
  public init(markdownString: Swift.String, linkTexts: Swift.String..., linkColor: SwiftUI.Color, underlineColor: SwiftUI.Color? = nil)
  public init(markdownString: Swift.String, linkTexts: [Swift.String], linkColor: SwiftUI.Color, underlineColor: SwiftUI.Color? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI17NamiTextHyperLinkV4bodyQrvp", 0) __
}
public struct NamiTextHyperLinkLegacy : SwiftUI.View {
  public init(text: Swift.String, link: Swift.String, linkColor: SwiftUI.Color, underlineColor: SwiftUI.Color? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI23NamiTextHyperLinkLegacyV4bodyQrvp", 0) __
}
public struct NotificationButtonStyle : SwiftUI.ButtonStyle {
  public init(color: SwiftUI.Color = Color(hex: 0xEAEAEA))
  public struct NotificationButton : SwiftUI.View {
    public init(configuration: StandardPairingUI.NotificationButtonStyle.Configuration, color: SwiftUI.Color)
    @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI23NotificationButtonStyleV0dE0V4bodyQrvp", 0) __
  }
  public func makeBody(configuration: StandardPairingUI.NotificationButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI23NotificationButtonStyleV8makeBody13configurationQr05SwiftC00eF13ConfigurationV_tF", 0) __
}
public struct NamiAuthButtonStyle : SwiftUI.ButtonStyle {
  public init(mode: StandardPairingUI.NamiAuthButtonStyle.AppearanceColorMode = .light)
  public struct NamiAuthButton : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI19NamiAuthButtonStyleV0deF0V4bodyQrvp", 0) __
  }
  public enum AppearanceColorMode {
    case light
    case dark
    public static func == (a: StandardPairingUI.NamiAuthButtonStyle.AppearanceColorMode, b: StandardPairingUI.NamiAuthButtonStyle.AppearanceColorMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func makeBody(configuration: StandardPairingUI.NamiAuthButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI19NamiAuthButtonStyleV8makeBody13configurationQr05SwiftC00fG13ConfigurationV_tF", 0) __
}
public struct NamiActionButtonStyle : SwiftUI.ButtonStyle {
  public init(rank: StandardPairingUI.NamiActionButtonStyle.AppearanceHierarchyRank = .primary, sharpCorner: UIKit.UIRectCorner = .topRight)
  public struct NamiActionButton : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI21NamiActionButtonStyleV0deF0V4bodyQrvp", 0) __
  }
  public enum AppearanceHierarchyRank {
    case primary
    case secondary
    case tertiary
    case destructive
    public static func == (a: StandardPairingUI.NamiActionButtonStyle.AppearanceHierarchyRank, b: StandardPairingUI.NamiActionButtonStyle.AppearanceHierarchyRank) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func makeBody(configuration: StandardPairingUI.NamiActionButtonStyle.Configuration) -> some SwiftUI.View
  
  public struct ConstraintLayout {
    public static let LeadingToSuperView: CoreFoundation.CGFloat
    public static let TrailingToSuperView: CoreFoundation.CGFloat
    public static let BottomToSuperView: CoreFoundation.CGFloat
    public static let BottomToNextButton: CoreFoundation.CGFloat
    public static let BottomTokeyboard: CoreFoundation.CGFloat
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI21NamiActionButtonStyleV8makeBody13configurationQr05SwiftC00fG13ConfigurationV_tF", 0) __
}
public struct ScrollViewWithOnScrollAction<Subviews> : SwiftUI.View where Subviews : SwiftUI.View {
  public init(onScroll action: @escaping ((CoreFoundation.CGFloat) -> Swift.Void) = { _ in }, @SwiftUI.ViewBuilder subviews: () -> Subviews)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17StandardPairingUI016ScrollViewWithOnD6ActionV4bodyQrvp", 0) __<Subviews>
}
extension UIKit.UIImage.AnimatableImageFormat : Swift.Equatable {}
extension UIKit.UIImage.AnimatableImageFormat : Swift.Hashable {}
extension UIKit.UIImage.AnimatableImageFormat : Swift.RawRepresentable {}
extension StandardPairingUI.Colors.ColorSaturation : Swift.Equatable {}
extension StandardPairingUI.Colors.ColorSaturation : Swift.Hashable {}
extension StandardPairingUI.Colors.ColorSaturation : Swift.RawRepresentable {}
extension StandardPairingUI.Colors.ColorSaturationNumber : Swift.Equatable {}
extension StandardPairingUI.Colors.ColorSaturationNumber : Swift.Hashable {}
extension StandardPairingUI.Colors.ColorSaturationNumber : Swift.RawRepresentable {}
extension StandardPairingUI.NamiXMarkButton.Appearance : Swift.Equatable {}
extension StandardPairingUI.NamiXMarkButton.Appearance : Swift.Hashable {}
extension StandardPairingUI.NamiCircularXMarkButton.Appearance : Swift.Equatable {}
extension StandardPairingUI.NamiCircularXMarkButton.Appearance : Swift.Hashable {}
extension StandardPairingUI.NamiTextFieldStyle : Swift.Equatable {}
extension StandardPairingUI.NamiTextFieldStyle : Swift.Hashable {}
extension StandardPairingUI.NamiTextStyle.Leading : Swift.Equatable {}
extension StandardPairingUI.NamiTextStyle.Leading : Swift.Hashable {}
extension StandardPairingUI.NamiAuthButtonStyle.AppearanceColorMode : Swift.Equatable {}
extension StandardPairingUI.NamiAuthButtonStyle.AppearanceColorMode : Swift.Hashable {}
extension StandardPairingUI.NamiActionButtonStyle.AppearanceHierarchyRank : Swift.Equatable {}
extension StandardPairingUI.NamiActionButtonStyle.AppearanceHierarchyRank : Swift.Hashable {}
