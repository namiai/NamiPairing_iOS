// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DeviceConnections
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CryptoKit
@_exported import DeviceConnections
import Foundation
import Network
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public struct DevicesCommandRequest : Swift.Encodable, Swift.Equatable {
  public init(seqTime: Swift.UInt64, commands: [DeviceConnections.DevicesCommand])
  public var seqTime: Swift.UInt64
  public var commands: [DeviceConnections.DevicesCommand]
  public static func == (a: DeviceConnections.DevicesCommandRequest, b: DeviceConnections.DevicesCommandRequest) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DevicesCommand : Swift.Encodable, Swift.Equatable {
  public init(devicesUids: [DeviceConnections.DeviceUniversalID], messages: [Foundation.Data])
  public var devicesUids: [DeviceConnections.DeviceUniversalID]
  public var messages: [Foundation.Data]
  public static func == (a: DeviceConnections.DevicesCommand, b: DeviceConnections.DevicesCommand) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DevicesCommandResponse : DeviceConnections.DevicesCommandResponseProtocol, Swift.Decodable {
  public init(seqTime: Swift.UInt64, results: [DeviceConnections.DeviceCommandResponseResult])
  public var seqTime: Swift.UInt64
  public var results: [DeviceConnections.DeviceCommandResponseResult]
  public typealias DeviceConnections_DeviceCommandResponseResult = DeviceConnections.DeviceCommandResponseResult
  public init(from decoder: any Swift.Decoder) throws
}
public struct DeviceCommandResponseResult : DeviceConnections.DeviceCommandResponseResultProtocol, Swift.Decodable {
  public init(devices: [DeviceConnections.DeviceUniversalID : DeviceConnections.DeviceCommandResponseContent])
  public init(from decoder: any Swift.Decoder) throws
  public var devices: [DeviceConnections.DeviceUniversalID : DeviceConnections.DeviceCommandResponseContent]
  public typealias DeviceConnections_DeviceCommandResponseContent = DeviceConnections.DeviceCommandResponseContent
}
public struct DeviceCommandResponseContent : DeviceConnections.DeviceCommandResponseContentProtocol, Swift.Decodable {
  public init(success: Swift.Bool, error: DeviceConnections.DeviceCommandResponseContent.Error? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public struct Error : DeviceConnections.DeviceCommandResponseErrorProtocol {
    public var error: Swift.String
    public var errorCode: Swift.String
  }
  public var success: Swift.Bool
  public var error: DeviceConnections.DeviceCommandResponseContent.Error?
  public typealias DeviceConnections_DeviceCommandResponseError = DeviceConnections.DeviceCommandResponseContent.Error
}
public struct DevicesResponse : DeviceConnections.DevicesResponseProtocol, Swift.Decodable {
  public var devices: [DeviceConnections.Device]
  public var total: Swift.Int
  public typealias Device = DeviceConnections.Device
  public init(from decoder: any Swift.Decoder) throws
}
public struct Device : DeviceConnections.DeviceProtocol, Swift.Decodable, Swift.Equatable {
  public var id: DeviceConnections.DeviceID
  public var uid: DeviceConnections.DeviceUniversalID
  public var urn: Swift.String
  public var name: Swift.String
  public var model: DeviceConnections.DeviceModel
  public var deviceState: DeviceConnections.DeviceCloudState?
  public static func == (a: DeviceConnections.Device, b: DeviceConnections.Device) -> Swift.Bool
  public typealias DeviceCloudState = DeviceConnections.DeviceCloudState
  public init(from decoder: any Swift.Decoder) throws
}
public struct DeviceCloudState : DeviceConnections.DeviceCloudStateProtocol, Swift.Decodable, Swift.Equatable {
  public var seqTime: Swift.UInt64
  public var payload: Foundation.Data
  public static func == (a: DeviceConnections.DeviceCloudState, b: DeviceConnections.DeviceCloudState) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct DeviceModel : DeviceConnections.DeviceModelProtocol, Swift.Decodable, Swift.Equatable {
  public var codeName: Swift.String
  public var productLabel: Swift.String
  public var productId: DeviceConnections.DeviceProductID
  public static func == (a: DeviceConnections.DeviceModel, b: DeviceConnections.DeviceModel) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct Place : Swift.Decodable, Swift.Equatable, Swift.Identifiable {
  public var id: DeviceConnections.PlaceID
  public static func == (a: DeviceConnections.Place, b: DeviceConnections.Place) -> Swift.Bool
  public typealias ID = DeviceConnections.PlaceID
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlacesResponse : Swift.Decodable {
  public init(places: [DeviceConnections.Place], permissions: [DeviceConnections.URN : DeviceConnections.UserPermissionsSet])
  public var places: [DeviceConnections.Place]
  public var permissions: [DeviceConnections.URN : DeviceConnections.UserPermissionsSet]
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceZone : DeviceConnections.PlaceZoneProtocol, Swift.Decodable, Swift.Equatable, Swift.Identifiable {
  public var id: DeviceConnections.PlaceZoneID
  public var externalId: Swift.String
  public var urn: Swift.String
  public var name: Swift.String
  public static func == (a: DeviceConnections.PlaceZone, b: DeviceConnections.PlaceZone) -> Swift.Bool
  public typealias ID = DeviceConnections.PlaceZoneID
  public init(from decoder: any Swift.Decoder) throws
}
public struct Room : Swift.Codable, Swift.Equatable, Swift.Identifiable {
  public var id: DeviceConnections.RoomID
  public static func == (a: DeviceConnections.Room, b: DeviceConnections.Room) -> Swift.Bool
  public typealias ID = DeviceConnections.RoomID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessToken : Swift.Equatable, Swift.Codable {
  public init(accessToken: DeviceConnections.TokenString, expiresAt: Foundation.Date)
  public var accessToken: DeviceConnections.TokenString
  public var expiresAt: Foundation.Date
  public func isValid() -> Swift.Bool
  public static func == (a: DeviceConnections.AccessToken, b: DeviceConnections.AccessToken) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CloudPlaceKey : Swift.Decodable, Swift.Equatable, Swift.Identifiable {
  public init(id: Swift.String, key: Swift.String)
  public var id: Swift.String
  public var key: Swift.String
  public static func == (a: DeviceConnections.CloudPlaceKey, b: DeviceConnections.CloudPlaceKey) -> Swift.Bool
  public typealias ID = Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceKeyRequest : Swift.Encodable {
  public init(publicKey: Swift.String)
  public var publicKey: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DecodedPlaceKeys : Swift.Decodable {
  public init(keys: [DeviceConnections.CloudPlaceKey])
  public var keys: [DeviceConnections.CloudPlaceKey]
  public init(from decoder: any Swift.Decoder) throws
}
public struct WiredPlaceKeys : Swift.Decodable, Swift.Equatable {
  public init(ciphertext: Swift.String, iv: Swift.String, authTag: Swift.String, serverKey: Swift.String)
  public var ciphertext: Swift.String
  public var iv: Swift.String
  public var authTag: Swift.String
  public var serverKey: Swift.String
  public static func == (a: DeviceConnections.WiredPlaceKeys, b: DeviceConnections.WiredPlaceKeys) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct DevicesQuery : DeviceConnections.DevicesQueryProtocol {
  public init(placeIds: [DeviceConnections.PlaceID] = [], zoneIds: [DeviceConnections.PlaceZoneID] = [], roomIds: [DeviceConnections.RoomID] = [], uids: [DeviceConnections.DeviceUniversalID] = [])
  public init(cursor: Swift.String)
  public var placeIds: [DeviceConnections.PlaceID]
  public var zoneIds: [DeviceConnections.PlaceZoneID]
  public var roomIds: [DeviceConnections.RoomID]
  public var uids: [DeviceConnections.DeviceUniversalID]
  public var cursor: Swift.String?
  public static func parameters(placeIds: [DeviceConnections.PlaceID] = [], zoneIds: [DeviceConnections.PlaceZoneID] = [], roomIds: [DeviceConnections.RoomID] = [], uids: [DeviceConnections.DeviceUniversalID] = []) -> DeviceConnections.DevicesQuery
  public static func cursor(_ cursor: Swift.String) -> DeviceConnections.DevicesQuery
}
final public class DeviceConnectionsAPI : DeviceConnections.DeviceConnectionsManagerWebAPIProtocol {
  public init(baseUrl: Foundation.URL, session: Foundation.URLSession, accessToken: DeviceConnections.AccessToken, refreshToken: DeviceConnections.TokenString)
  final public func listDevices(query: any DeviceConnections.DevicesQueryProtocol) -> Combine.AnyPublisher<DeviceConnections.DevicesResponse, any Swift.Error>
  final public func sendDeviceCommandRequests(in placeId: DeviceConnections.PlaceID, uids: [DeviceConnections.DeviceUniversalID], messages: [Foundation.Data]) -> Combine.AnyPublisher<DeviceConnections.DevicesCommandResponse, any Swift.Error>
  final public func listPlaceKeys() -> Combine.AnyPublisher<[DeviceConnections.CloudPlaceKey], any Swift.Error>
  public typealias DeviceConnections_DevicesCommandResponse = DeviceConnections.DevicesCommandResponse
  public typealias DeviceConnections_DevicesResponse = DeviceConnections.DevicesResponse
  @objc deinit
}
extension Combine.Publisher {
  public func retry(_ retries: Swift.Int, if condition: @escaping (Self.Failure) -> Swift.Bool) -> Combine.Publishers.RetryIf<Self>
}
extension Foundation.URLRequest {
  public init(method: Swift.String = "GET", base: Foundation.URL, path: Swift.String, query: [Swift.String : Swift.String], headers: [Swift.String : Swift.String] = [:], body: Foundation.Data? = nil)
  public init(method: Swift.String = "GET", base: Foundation.URL, path: Swift.String, query: [Foundation.URLQueryItem] = [], headers: [Swift.String : Swift.String] = [:], body: Foundation.Data? = nil)
}
public struct NetworkError : Swift.Error {
  public init(statusCode: Swift.Int, body: Foundation.Data? = nil)
  public init(_ urlError: Foundation.URLError, body: Foundation.Data? = nil)
  public static var unknown: DeviceConnections.NetworkError
  public let code: DeviceConnections.NetworkErrorCode
  public var isRecoverable: Swift.Bool {
    get
  }
  public var customErrorDescription: Swift.String? {
    get
  }
  public func decodeBody<ErrorBody>(to type: ErrorBody.Type) -> ErrorBody? where ErrorBody : Swift.Decodable
}
public enum NetworkErrorCode : Swift.Equatable {
  case unknown(Swift.Int)
  case connectionError(Foundation.URLError)
  case invalidParameters
  case unauthorized
  case notFound
  case conflict
  case serverError
  public init(statusCode: Swift.Int)
  public init(urlError: Foundation.URLError)
  public var code: Swift.Int {
    get
  }
  public static func == (lhs: DeviceConnections.NetworkErrorCode, rhs: DeviceConnections.NetworkErrorCode) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case loginRequired
  case unknown
  public static func == (a: DeviceConnections.AuthenticationError, b: DeviceConnections.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class InMemoryDeviceConnectionsStorage : DeviceConnections.DeviceConnectionsManagerStorageProtocol {
  public init(api: DeviceConnections.DeviceConnectionsAPI)
  final public func placeIds() -> Combine.AnyPublisher<[DeviceConnections.PlaceID], Swift.Never>
  final public func placeKeys() -> Combine.AnyPublisher<[DeviceConnections.NamiPlaceKey], Swift.Never>
  final public func deviceUids(placeId: DeviceConnections.PlaceID) -> Combine.AnyPublisher<[DeviceConnections.DeviceUniversalID], Swift.Never>
  final public func updateDeviceState(uid: DeviceConnections.DeviceUniversalID, state: Foundation.Data, seqTime: Swift.UInt64) throws
  final public func refreshPlaceKeys() -> Combine.AnyPublisher<Swift.Void, any Swift.Error>
  final public func refreshDevices(placeId: DeviceConnections.PlaceID) -> Combine.AnyPublisher<Swift.Void, any Swift.Error>
  public typealias DeviceConnectionsManager_PlaceKey = DeviceConnections.NamiPlaceKey
  @objc deinit
}
public typealias PlaceKeysPublisher = Combine.AnyPublisher<[DeviceConnections.NamiPlaceKey], Swift.Never>
extension Combine.Publishers {
  public struct RetryIf<Upstream> : Combine.Publisher where Upstream : Combine.Publisher {
    public typealias Output = Upstream.Output
    public typealias Failure = Upstream.Failure
    public let publisher: Upstream
    public let retries: Swift.Int
    public let condition: (Upstream.Failure) -> Swift.Bool
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, Upstream.Failure == S.Failure, Upstream.Output == S.Input
  }
}
public struct NamiPlaceKey : Swift.Codable, Swift.Equatable, Swift.Identifiable, DeviceConnections.PlaceKeyProtocol {
  public init?(_ from: DeviceConnections.CloudPlaceKey)
  public init?(_ from: DeviceConnections.StorablePlaceKey)
  public let id: Swift.String
  public let placeId: DeviceConnections.PlaceID
  public let valid: Foundation.DateInterval
  public let key: Foundation.Data
  public static func decodeId(_ id: Swift.String) -> (placeId: DeviceConnections.PlaceID, valid: Foundation.DateInterval)?
  public static func == (a: DeviceConnections.NamiPlaceKey, b: DeviceConnections.NamiPlaceKey) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PlaceZoneProtocol : Swift.Equatable {
  var id: DeviceConnections.PlaceZoneID { get }
  var externalId: Swift.String { get }
  var name: Swift.String { get }
}
public protocol DeviceModelProtocol : Swift.Equatable {
  var codeName: Swift.String { get }
  var productLabel: Swift.String { get }
  var productId: DeviceConnections.DeviceProductID { get }
}
public typealias NamiI18n = DeviceConnections.I18n
extension DeviceConnections.I18n.SignUp {
  public static func localizedButtonTitle(for providerName: Swift.String) -> Swift.String
}
public enum I18n {
  public static let accountLinkingAuthorizeSignInRequest: Swift.String
  public static let accountLinkingDidYouMakeThisRequest: Swift.String
  public static let accountLinkingPleaseSignin: Swift.String
  public static let accountLinkingSignInConfirmedBodyMessage: Swift.String
  public static let accountLinkingSignInError: Swift.String
  public static func accountLinkingSignInRequestIpTimeBrowser(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func accountLinkingSignInRequestPlaceIpTimeBrowserAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let activityEventOngoing: Swift.String
  public static let activityMotion: Swift.String
  public static let activityMotionDetectedIn: Swift.String
  public static let activityNoMotion: Swift.String
  public static let activityNoPresence: Swift.String
  public static let activityPresence: Swift.String
  public static let activityPresenceDetectedIn: Swift.String
  public static let activityTitle: Swift.String
  public static let activityTotalMotionTime: Swift.String
  public static func alarmDetectedAt(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func alarmDetectedAtAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmDisarm: Swift.String
  public static func alarmFalseAlarmCauseListTitle(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmFalseAlarmCauseMyself: Swift.String
  public static let alarmFalseAlarmCauseOther: Swift.String
  public static let alarmFalseAlarmCauseSmallMovingObjects: Swift.String
  public static let alarmFalseAlarmReportButtonTitle: Swift.String
  public static func alarmFalseAlarmReportHint(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmFalseAlarmSelectCauseTitle: Swift.String
  public static let alarmFalseAlarmSensitivityExplanatioAdjustSensitivityButton: Swift.String
  public static let alarmFalseAlarmSensitivityExplanatioArmSelectedZones: Swift.String
  public static let alarmFalseAlarmSensitivityExplanatioPossibleReasons: Swift.String
  public static let alarmFalseAlarmSensitivityExplanatioSensitivityLevelHint: Swift.String
  public static let alarmFalseAlarmSensitivityExplanationReduceFalseAlarmsTitle: Swift.String
  public static let alarmFalseAlarmTitle: Swift.String
  public static func alarmIntrusionDescription(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func alarmIntrusionDescriptionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmIntrusionTitle: Swift.String
  public static func alarmLiveAlarmActivitiesStopped(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func alarmLiveAlarmNoActivity(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func alarmLiveAlarmOngoingActivity(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmLiveAlarmSecurityMonitoring: Swift.String
  public static func alarmLiveAlarmStartedAtInZone(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func alarmLiveAlarmStoppedActivity(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func alarmPillAlarmTriggered(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmReasonCo2: Swift.String
  public static let alarmReasonFire: Swift.String
  public static let alarmReasonFlood: Swift.String
  public static let alarmReasonIntrusion: Swift.String
  public static let alarmReportAlarmDisarmed: Swift.String
  public static let alarmReportAlarmTriggered: Swift.String
  public static let alarmReportDuration: Swift.String
  public static func alarmReportEventStartEndTime(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmReportFalse: Swift.String
  public static let alarmReportSecurityLog: Swift.String
  public static func alarmReportStartedAt(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func alarmReportSubjectHistory(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmReportTitle: Swift.String
  public static func alarmReportTotalActiveTime(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let alarmReportZonesAffected: Swift.String
  public static let appName: Swift.String
  public static let appNameDebug: Swift.String
  public static let areYouWantToCancelPairingProcess: Swift.String
  public static let automationsActionCannotUndone: Swift.String
  public static let automationsAt: Swift.String
  public static let automationsAutomationCannotBeSaved: Swift.String
  public static let automationsChangeModeTo: Swift.String
  public static let automationsCreateAutomation: Swift.String
  public static let automationsCreateError: Swift.String
  public static let automationsDateAndTimeBasedOn: Swift.String
  public static let automationsDeleteAutomation: Swift.String
  public static let automationsEditAutomation: Swift.String
  public static let automationsEveryWeekday: Swift.String
  public static let automationsEveryWeekend: Swift.String
  public static let automationsEveryday: Swift.String
  public static let automationsFor: Swift.String
  public static let automationsModes: Swift.String
  public static let automationsNewAutomation: Swift.String
  public static let automationsNoZonesAvailable: Swift.String
  public static let automationsNoZonesSelected: Swift.String
  public static let automationsRepeatOn: Swift.String
  public static let automationsSetAScheduleToActivateModesAutomatically: Swift.String
  public static let automationsYouHaveConflict: Swift.String
  public static let changeUsernameEmptyErrorMessage: Swift.String
  public static let changeUsernamePlaceholder: Swift.String
  public static let changeUsernamePromptMessage: Swift.String
  public static let chooseRoomConfirm: Swift.String
  public static let chooseRoomCreateRoom: Swift.String
  public static let chooseRoomHeader: Swift.String
  public static let chooseRoomLoadDataFailed: Swift.String
  public static let chooseRoomSelectOrCreateHeader: Swift.String
  public static let chooseZoneConfirm: Swift.String
  public static let chooseZoneCreateZone: Swift.String
  public static let chooseZoneHeader: Swift.String
  public static let chooseZoneLoadDataFailed: Swift.String
  public static let chooseZoneNoDevices: Swift.String
  public static func chooseZoneThreadDevicesCount(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func chooseZoneWifiDevicesCount(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let commissioningModeCheckupZoneContactIsntaller: Swift.String
  public static let commissioningModeCompanionLandingCancel: Swift.String
  public static let commissioningModeCompanionLandingContactSupport: Swift.String
  public static let commissioningModeCompanionLandingGoToPlaceButton: Swift.String
  public static let commissioningModeCompanionLandingLoadingInfo: Swift.String
  public static let commissioningModeCompanionLandingPlaceFound: Swift.String
  public static let commissioningModeConfirmPlaceConfirmButton: Swift.String
  public static let commissioningModeConfirmPlaceNamePlaceHint: Swift.String
  public static let commissioningModeConfirmPlaceNamePlacePlaceholder: Swift.String
  public static let commissioningModeLoadingScreenLoadingContent: Swift.String
  public static let commissioningModePlaceDetailsAddDevice: Swift.String
  public static let commissioningModePlaceDetailsAddDevicesHint: Swift.String
  public static let commissioningModePlaceDetailsAddZone: Swift.String
  public static let commissioningModePlaceDetailsContactIsntaller: Swift.String
  public static let commissioningModePlaceDetailsCreatedAt: Swift.String
  public static let commissioningModePlaceDetailsCreatedAtAndroid: Swift.String
  public static let commissioningModePlaceDetailsExitButton: Swift.String
  public static let commissioningModePlaceDetailsFinishSetupButton: Swift.String
  public static let commissioningModePlaceDetailsRenamePlaceButton: Swift.String
  public static let commissioningModePlaceDetailsUpdatedAt: Swift.String
  public static let commissioningModePlaceDetailsUpdatedAtAndroid: Swift.String
  public static let commissioningModePlaceDetailsZonesSectionTitle: Swift.String
  public static let commissioningModeSetupModeSettingsExitSetup: Swift.String
  public static let commissioningModeSetupModeSettingsInstaller: Swift.String
  public static let commissioningModeSetupModeSettingsPlaceSettings: Swift.String
  public static let commissioningModeSetupModeSettingsSettings: Swift.String
  public static let commissioningModeSetupModeSettingsUser: Swift.String
  public static let companionAddZone: Swift.String
  public static let companionEditPlaceNameHint: Swift.String
  public static let companionExitSetup: Swift.String
  public static let companionExitSetupAndroid: Swift.String
  public static let companionHomeContactYourInstallerToSetUpYourPlace: Swift.String
  public static let companionZoneHealth: Swift.String
  public static let companionZoneHealthCheckAllDevices: Swift.String
  public static let companionZoneHealthDegraded: Swift.String
  public static let companionZoneHealthHealthy: Swift.String
  public static let companionZoneHealthUnhealthy: Swift.String
  public static let companionZoneHealthWorksWell: Swift.String
  public static let companionZoneMotionSensing: Swift.String
  public static let companionZoneMotionSensingConnectLocalWifi: Swift.String
  public static let companionZoneMotionSensingDataNotAvailable: Swift.String
  public static let companionZoneMotionSensingMovementDetected: Swift.String
  public static let companionZoneMotionSensingNoMovementDetected: Swift.String
  public static let companionZones: Swift.String
  public static let confirmCancelPairing: Swift.String
  public static let confirmPlaceNameButtonConfirm: Swift.String
  public static let confirmPlaceNameHeader: Swift.String
  public static let confirmPlaceNameSubhead: Swift.String
  public static let confirmRoomNameButtonConfirm: Swift.String
  public static let confirmRoomNameHeader: Swift.String
  public static let confirmRoomNameSubhead: Swift.String
  public static let connectivityIndicatorDeviceConnected: Swift.String
  public static let connectivityIndicatorDeviceDisconnected: Swift.String
  public static func connectivityIndicatorDeviceRssi(_ p1: Swift.Int) -> Swift.String
  public static let createFirstPlaceCancel: Swift.String
  public static let createFirstPlaceCreatePlace: Swift.String
  public static let createFirstPlaceCreatePlaceSlideText: Swift.String
  public static let createFirstPlaceJoinPlace: Swift.String
  public static let createFirstPlaceJoinPlaceSlideText: Swift.String
  public static let createFirstPlaceLetsStart: Swift.String
  public static let createFirstPlaceWelcomeText: Swift.String
  public static let createPlaceSectionTitle: Swift.String
  public static let createZoneButtonConfirm: Swift.String
  public static let createZoneDescription: Swift.String
  public static let createZoneEnterName: Swift.String
  public static let createZoneEnterNameHint: Swift.String
  public static let createZoneHeader: Swift.String
  public static let createZoneNameTheZoneDescription: Swift.String
  public static let createZonePlaceholder: Swift.String
  public static let createZoneSecondFloorPlaceholder: Swift.String
  public static let createZoneTitle: Swift.String
  public static let dashboardAddNewPlace: Swift.String
  public static let dashboardAddNewUser: Swift.String
  public static let dashboardFineMessage: Swift.String
  public static func dashboardFormatDisconnectedDeviceInMultipleZoneAndroid(_ p1: Swift.Int) -> Swift.String
  public static func dashboardFormatDisconnectedDeviceInOneZoneAndroid(_ p1: Swift.Int) -> Swift.String
  public static func dashboardFormatIssueInAPlace(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func dashboardFormatIssueInMultiplePlace(_ p1: Swift.Int) -> Swift.String
  public static let dashboardLastSeen: Swift.String
  public static let dashboardPeople: Swift.String
  public static let dashboardPlaceTileAddOneMoreDevice: Swift.String
  public static let dashboardPlaceTileAddTwoDevices: Swift.String
  public static let dashboardPlaceTileCheckYourDeviceSetup: Swift.String
  public static let dashboardPlaceTileCurrentStatus: Swift.String
  public static let dashboardPlaceTileIntrusionDetected: Swift.String
  public static let dashboardPlaceTileMovementDetected: Swift.String
  public static let dashboardPlaceTileNoMovementDetected: Swift.String
  public static let dashboardPlaceTileNoSensingData: Swift.String
  public static let dashboardPlaceTileNotAvailable: Swift.String
  public static let dashboardPlaceTilePairKit: Swift.String
  public static let dashboardPlaceTilePairMore: Swift.String
  public static let dashboardPlaceTilePairOneMore: Swift.String
  public static let dashboardPlaceTilePairTwo: Swift.String
  public static func dashboardPlaceTileSinceStartedDate(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func dashboardPlaceTileSinceStartedDateAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let dashboardPlaces: Swift.String
  public static let dashboardSensingLinkBrokenInMultipleZone: Swift.String
  public static let dashboardSensingLinkBrokenInOneZone: Swift.String
  public static let defaultNotificationChannelId: Swift.String
  public static let defaultNotificationChannelName: Swift.String
  public static let deletePlaceConfirmDeletePlace: Swift.String
  public static let deletePlaceConfirmLeavePlace: Swift.String
  public static let deletePlaceDeleteAllRelatedData: Swift.String
  public static let deletePlaceDeleteAllRelatedDataDescription: Swift.String
  public static let deletePlaceDeletePlaceAndData: Swift.String
  public static let deletePlaceDeletePlaceTitle: Swift.String
  public static let deletePlaceInviteAgain: Swift.String
  public static let deletePlaceLeavePlaceTitle: Swift.String
  public static let deletePlaceLoseAccessToAllData: Swift.String
  public static let deletePlaceLoseAccessToAllDataDescription: Swift.String
  public static let deletePlaceLoseAccessToAllDevices: Swift.String
  public static let deletePlaceLoseAccessToAllDevicesDescription: Swift.String
  public static let deletePlaceRemoveAllUsers: Swift.String
  public static let deletePlaceRemoveAllUsersDescription: Swift.String
  public static let deletePlaceResetAllDevices: Swift.String
  public static let deletePlaceResetAllDevicesDescription: Swift.String
  public static let deletePlaceThisActionIsIrreversible: Swift.String
  public static let deletePlaceThisWillAlso: Swift.String
  public static let deviceDetailsConnected: Swift.String
  public static func deviceDetailsDeleteDeviceFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func deviceDetailsLoadDataFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let deviceDetailsRelay: Swift.String
  public static func deviceDetailsToggleDeviceFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let deviceDetailsTooltipConnect: Swift.String
  public static let deviceDetailsTooltipNotConnect: Swift.String
  public static let deviceEditCustomizeDeviceDescription: Swift.String
  public static let deviceEditCustomizeDeviceTitle: Swift.String
  public static let deviceEditDeviceInfoDescription: Swift.String
  public static let deviceEditDeviceInfoTitle: Swift.String
  public static let deviceEditDeviceNamePlaceholder: Swift.String
  public static let deviceEditTitle: Swift.String
  public static let deviceEnginesMotion: Swift.String
  public static let deviceEnginesSecurity: Swift.String
  public static let deviceEnginesUnknown: Swift.String
  public static let deviceInfoBbsid: Swift.String
  public static let deviceInfoBorderRouter: Swift.String
  public static let deviceInfoBssid: Swift.String
  public static let deviceInfoCloudConnection: Swift.String
  public static let deviceInfoDeviceConnected: Swift.String
  public static let deviceInfoDeviceDisconnected: Swift.String
  public static let deviceInfoDeviceModel: Swift.String
  public static let deviceInfoDeviceModelId: Swift.String
  public static let deviceInfoDeviceName: Swift.String
  public static let deviceInfoFirmvareVesrion: Swift.String
  public static let deviceInfoFirmwareAutomaticUpdateHint: Swift.String
  public static let deviceInfoLocalConnection: Swift.String
  public static let deviceInfoMacAddress: Swift.String
  public static let deviceInfoNonBorderRouter: Swift.String
  public static let deviceInfoPairedAt: Swift.String
  public static let deviceInfoPanid: Swift.String
  public static let deviceInfoRole: Swift.String
  public static let deviceInfoRoom: Swift.String
  public static let deviceInfoRssi: Swift.String
  public static let deviceInfoTechnicalInformation: Swift.String
  public static let deviceInfoThreadNetwork: Swift.String
  public static let deviceInfoTitle: Swift.String
  public static let deviceInfoWifiNetwork: Swift.String
  public static let deviceInfoZone: Swift.String
  public static let deviceInstructionsBulletPoint1: Swift.String
  public static let deviceInstructionsBulletPoint2: Swift.String
  public static let deviceInstructionsBulletPoint3: Swift.String
  public static let deviceInstructionsBulletPoint4: Swift.String
  public static let deviceInstructionsConfirmButton: Swift.String
  public static let deviceInstructionsDescription: Swift.String
  public static let deviceInstructionsTitle: Swift.String
  public static let deviceIsDisconnectedToInternet: Swift.String
  public static let deviceOverviewConnection: Swift.String
  public static let deviceOverviewConnectionCloud: Swift.String
  public static let deviceOverviewConnectionDirect: Swift.String
  public static let deviceOverviewConnectionLost: Swift.String
  public static func deviceOverviewDeletionDeleteAlertMessage(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let deviceOverviewDeletionDeleteAlertMessageAndroid: Swift.String
  public static let deviceOverviewDeletionDeleteAlertTitle: Swift.String
  public static let deviceOverviewDeletionDeleteButton: Swift.String
  public static let deviceOverviewDeletionDeleteConfirm: Swift.String
  public static let deviceOverviewRelayExplanation: Swift.String
  public static let deviceOverviewRelayIsOff: Swift.String
  public static let deviceOverviewRelayIsOn: Swift.String
  public static let deviceOverviewSchedule: Swift.String
  public static let deviceOverviewSiren: Swift.String
  public static let deviceOverviewStatus: Swift.String
  public static func deviceOverviewWaitingForConnection(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func deviceOverviewWaitingForConnectionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let deviceOverviewWifiDisconnected: Swift.String
  public static let deviceOverviewWifiGood: Swift.String
  public static let deviceOverviewWifiPoor: Swift.String
  public static let deviceOverviewZone: Swift.String
  public static let devicePlacementConfirmButton: Swift.String
  public static let devicePlacementFirstDeviceSetup: Swift.String
  public static let devicePlacementFirstDeviceSetupStep1: Swift.String
  public static let devicePlacementFirstDeviceSetupStep2: Swift.String
  public static let devicePlacementFirstDeviceSetupStep2Imperial: Swift.String
  public static let devicePlacementFirstDeviceSetupStep2Metric: Swift.String
  public static let devicePlacementNoticeNotice: Swift.String
  public static func devicePlacementNoticeNoticeKnownZone(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func devicePlacementNoticeNoticeKnownZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let devicePlacementRemainingDevicesSetup: Swift.String
  public static let devicePlacementRemainingDevicesSetupStep1Imprerial: Swift.String
  public static let devicePlacementRemainingDevicesSetupStep1Metric: Swift.String
  public static let devicePlacementRemainingDevicesSetupStep2: Swift.String
  public static let devicePlacementRemainingDevicesSetupStep2Imperial: Swift.String
  public static let devicePlacementRemainingDevicesSetupStep2Metric: Swift.String
  public static let devicePlacementRemainingDevicesSetupStep3: Swift.String
  public static let devicePlacementRemainingDevicesSetupStep4: Swift.String
  public static let deviceSettingsCustomizeDeviceDescription: Swift.String
  public static let deviceSettingsCustomizeDeviceTitle: Swift.String
  public static let deviceSettingsDeviceInfoDescription: Swift.String
  public static let deviceSettingsDeviceInfoTitle: Swift.String
  public static let deviceSettingsErrorDeviceNotFound: Swift.String
  public static let deviceSettingsRemoveDevice: Swift.String
  public static func deviceSettingsRemoveDeviceName(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let deviceSettingsTechnicalInformationSubtitleThread: Swift.String
  public static let deviceSettingsTechnicalInformationSubtitleWifi: Swift.String
  public static let deviceSettingsTitle: Swift.String
  public static let devicesAddNewDevice: Swift.String
  public static let devicesAddNewRoom: Swift.String
  public static let devicesAddNewZone: Swift.String
  public static let devicesInformationAutoUpdate: Swift.String
  public static let editDeviceEditDeviceNameHint: Swift.String
  public static let editDeviceEditDeviceTitle: Swift.String
  public static let editIconHeader: Swift.String
  public static let editPlaceCategory: Swift.String
  public static let editPlaceColor: Swift.String
  public static let editPlaceDeleteButton: Swift.String
  public static let editPlaceDeletePlaceGuideDescription2Android: Swift.String
  public static let editPlaceDeletePlaceGuideDescription4Android: Swift.String
  public static let editPlaceDeletePlaceGuideDescription6Android: Swift.String
  public static let editPlaceDeletePlaceGuideDescriptionAndroid: Swift.String
  public static func editPlaceDeletionDeleteAlertMessage(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let editPlaceDeletionDeleteAlertMessageAndroid: Swift.String
  public static let editPlaceDeletionDeleteAlertTitle: Swift.String
  public static let editPlaceDeletionDeleteButton: Swift.String
  public static let editPlaceDeletionDeleteConfirm: Swift.String
  public static let editPlaceDeviceEngine: Swift.String
  public static let editPlaceDevices: Swift.String
  public static let editPlaceDevicesAndroid: Swift.String
  public static func editPlaceDevicesInZone(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func editPlaceDevicesInZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let editPlaceEditPlace: Swift.String
  public static let editPlaceEditPlaceAndroid: Swift.String
  public static let editPlaceEditPlaceDescription: Swift.String
  public static let editPlaceEnterName: Swift.String
  public static let editPlaceIcon: Swift.String
  public static let editPlaceLeavePlaceGuideDescription4Android: Swift.String
  public static let editPlaceLeavePlaceGuideTitle: Swift.String
  public static let editPlaceLocation: Swift.String
  public static let editPlacePluralDevicesAndroid: Swift.String
  public static let editPlaceSensitivity: Swift.String
  public static let editPlaceZeroDeviceAndroid: Swift.String
  public static func editProfileLoadFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func editProfileSaveFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let editRoomCategory: Swift.String
  public static let editRoomDeleteButton: Swift.String
  public static let editRoomDeleteDisabledHint: Swift.String
  public static func editRoomDeleteFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func editRoomDeleteZoneFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let editRoomDeletionDeleteRoomAlertMessage: Swift.String
  public static let editRoomDeletionDeleteZoneAlertMessage: Swift.String
  public static let editRoomEditRoom: Swift.String
  public static let editRoomEnterName: Swift.String
  public static let editRoomIcon: Swift.String
  public static func editRoomLoadFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func editRoomSaveFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let editUserProfileChooseImageColor: Swift.String
  public static let editUserProfileChooseProfileImage: Swift.String
  public static let editUserProfileEmptyErrorMessage: Swift.String
  public static let editUserProfilePlaceholder: Swift.String
  public static let editUserProfileProfileName: Swift.String
  public static let editUserProfileTitle: Swift.String
  public static let editZoneDeleteAlertDescription: Swift.String
  public static let editZoneDeleteAlertTitle: Swift.String
  public static let editZoneDeleteButton: Swift.String
  public static let editZoneDeleteDisabledHint: Swift.String
  public static let editZoneEditZone: Swift.String
  public static let editZoneEnterName: Swift.String
  public static let engineSettingsEngineSettingsDescription: Swift.String
  public static let engineSettingsMotionEngine: Swift.String
  public static let engineSettingsMotionEngineDescription: Swift.String
  public static let engineSettingsSaveButton: Swift.String
  public static let engineSettingsSecurityEngine: Swift.String
  public static let engineSettingsSecurityEngineDescription: Swift.String
  public static let engineSettingsTitle: Swift.String
  public static let errorNoInternetConnection: Swift.String
  public static let errorsAuthenticationLoginRequired: Swift.String
  public static let errorsAuthenticationTitle: Swift.String
  public static let errorsLinkingErrorResponseParseError: Swift.String
  public static let errorsLinkingErrorTitle: Swift.String
  public static let errorsMoveDeviceErrorNoDeviceSelected: Swift.String
  public static let errorsMoveDeviceErrorTitle: Swift.String
  public static func errorsNetworkErrorConflict(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func errorsNetworkErrorConnectionError(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func errorsNetworkErrorInvalidParameters(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func errorsNetworkErrorNotFound(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func errorsNetworkErrorServerError(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let errorsNetworkErrorTitle: Swift.String
  public static func errorsNetworkErrorUnauthorized(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func errorsNetworkErrorUnknown(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let errorsPairingDeviceNotFoundDescription: Swift.String
  public static let errorsPairingDeviceNotFoundTitle: Swift.String
  public static let errorsPairingErrorDeviceCloudChallengeError: Swift.String
  public static let errorsPairingErrorDeviceSecureSessionError: Swift.String
  public static let errorsPairingErrorDeviceThreadJoinError: Swift.String
  public static let errorsPairingErrorDeviceThreadScanError: Swift.String
  public static let errorsPairingErrorDeviceTitle: Swift.String
  public static let errorsPairingErrorDeviceUnknownUnrecognized: Swift.String
  public static let errorsPairingErrorDeviceWifiJoinError: Swift.String
  public static let errorsPairingErrorDeviceWifiJoinIpError: Swift.String
  public static let errorsPairingErrorDeviceWifiJoinPasswordError: Swift.String
  public static let errorsPairingErrorDeviceWifiScanError: Swift.String
  public static let errorsPairingIncorrectWifiPasswordDescription: Swift.String
  public static let errorsPairingIncorrectWifiPasswordTitle: Swift.String
  public static let errorsPairingMachineDeserializationError: Swift.String
  public static let errorsPairingMachineEncryptionError: Swift.String
  public static let errorsPairingMachineSeanceError: Swift.String
  public static let errorsPairingMachineSerializationError: Swift.String
  public static let errorsPairingMachineTitle: Swift.String
  public static let errorsPairingMachineUnexpectedMessage: Swift.String
  public static let errorsPairingMachineUnexpectedState: Swift.String
  public static let errorsPairingThreadSetupErrorMixedEnvironment: Swift.String
  public static let errorsPairingThreadSetupErrorThreadNetworkNotFound: Swift.String
  public static let errorsPairingThreadSetupErrorThreadOperationalDatasetMissing: Swift.String
  public static let errorsPairingTimedOutConnectWifi: Swift.String
  public static let externalSigninCheckIfUsersRequest: Swift.String
  public static let externalSigninConfirmRequest: Swift.String
  public static let externalSigninConfirmedTitle: Swift.String
  public static let externalSigninContinueOauth: Swift.String
  public static func externalSigninFromLocation(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func externalSigninOnOs(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let externalSigninRejectRequest: Swift.String
  public static let externalSigninRequestCodeCodeScreenTitle: Swift.String
  public static let externalSigninRequestCodeGrantAccess: Swift.String
  public static let externalSigninRequestCodeInstructions: Swift.String
  public static let externalSigninRequestCodePasteboardAccessExplained: Swift.String
  public static let externalSigninRequestedTitle: Swift.String
  public static func externalSigninSigninRequestPeekDescription(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let externalSigninSucce: Swift.String
  public static let externalSigninSuccessMessage: Swift.String
  public static func externalSigninWithBrowser(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let faqTitle: Swift.String
  public static let fcmMessageTitle: Swift.String
  public static let generalAnd: Swift.String
  public static let generalCamera: Swift.String
  public static let generalCancel: Swift.String
  public static let generalDelete: Swift.String
  public static let generalDeleting: Swift.String
  public static let generalDone: Swift.String
  public static let generalError: Swift.String
  public static let generalErrorDescription: Swift.String
  public static let generalIntrusionTriggered: Swift.String
  public static let generalLoading: Swift.String
  public static let generalMore: Swift.String
  public static let generalMove: Swift.String
  public static let generalNext: Swift.String
  public static let generalNo: Swift.String
  public static let generalNotification: Swift.String
  public static let generalOk: Swift.String
  public static let generalSave: Swift.String
  public static let generalSaving: Swift.String
  public static let generalSuccess: Swift.String
  public static let generalUnavailable: Swift.String
  public static let generalYes: Swift.String
  public static let homepageEmptyPlaceCreatePlace: Swift.String
  public static func homepageEmptyPlaceWelcome(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let internetConnection: Swift.String
  public static func intrusionBannerIntrusionDetectedAt(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let intrusionEventReportIntrusionHistory: Swift.String
  public static let intrusionHistoryErrorDataNotFound: Swift.String
  public static let intrusionHistoryHumanMotion: Swift.String
  public static let intrusionHistoryNoMotion: Swift.String
  public static func intrusionHistoryTimestamp(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let intrusionHistoryTitle: Swift.String
  public static let intrusionLiveViewNoActivitySinceIntrusionBega: Swift.String
  public static let invitationDetailAcceptButton: Swift.String
  public static let invitationDetailAgreementDetails: Swift.String
  public static let invitationDetailCancelButton: Swift.String
  public static let invitationDetailDeclineButton: Swift.String
  public static func invitationDetailHello(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func invitationDetailHelloAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let invitationDetailInviteFound: Swift.String
  public static let invitationDetailInviteNotFound: Swift.String
  public static func invitationDetailQuestion(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func invitationDetailQuestionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let invitationDetailRetrievingInviteDetails: Swift.String
  public static let invitationDetailRole: Swift.String
  public static let invitationDetailsRevoke: Swift.String
  public static let invitationDetailsRevokeRevokeAlertMessage: Swift.String
  public static let inviteDetailsAskRevokeButton: Swift.String
  public static let inviteDetailsAskShareButton: Swift.String
  public static let inviteDetailsConfirmRevokeButton: Swift.String
  public static func inviteDetailsInviteExpirationText(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func inviteDetailsInviteExpirationTextAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let inviteDetailsInviteExpired: Swift.String
  public static func inviteDetailsInviteExpiresInText(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func inviteDetailsInviteExpiresInTextAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func inviteDetailsInviteTitle(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func inviteDetailsInviteTitleAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func inviteDetailsRevokeAlertMessage(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func inviteDetailsRevokeAlertMessageAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let inviteDetailsRevokeAlertTitle: Swift.String
  public static let joinPlaceCameraPermissionGuide: Swift.String
  public static let joinPlaceInvalidInvite: Swift.String
  public static let joinPlaceInvalidQrCode: Swift.String
  public static let joinPlaceInviteFound: Swift.String
  public static let joinPlaceRetrievingInvite: Swift.String
  public static func joinPlaceRoleGuide(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let joinPlaceRoleGuideAdmin: Swift.String
  public static let joinPlaceScanAgain: Swift.String
  public static let joinPlaceScanInviteQr: Swift.String
  public static let letsAddDeviceChooseRoom: Swift.String
  public static let letsAddDeviceCreateRoom: Swift.String
  public static let letsAddDeviceDismissScreen: Swift.String
  public static let letsAddDeviceHeader: Swift.String
  public static let localConnectionWithMobile: Swift.String
  public static let lostAccessPopupMessageMultiplePlaces: Swift.String
  public static let lostAccessPopupMessageSinglePlace: Swift.String
  public static func lostAccessPopupTitle(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let manageDevicesEmptyPlace: Swift.String
  public static func memberDetailsLeaveMessage(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let memberDetailsLeavePlace: Swift.String
  public static let memberDetailsRemoveMember: Swift.String
  public static func memberDetailsRemovePeopleMessage(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let motionHistoryActiveTime: Swift.String
  public static let motionHistoryActiveZones: Swift.String
  public static let motionHistoryDeviceIssue: Swift.String
  public static let motionHistoryDuration: Swift.String
  public static func motionHistoryFormatHour(_ p1: Swift.Int) -> Swift.String
  public static func motionHistoryFormatHours(_ p1: Swift.Int) -> Swift.String
  public static func motionHistoryFormatHoursAndroid(_ p1: Swift.Int) -> Swift.String
  public static func motionHistoryFormatMinute(_ p1: Swift.Int) -> Swift.String
  public static func motionHistoryFormatSecond(_ p1: Swift.Int) -> Swift.String
  public static let motionHistoryIntensity: Swift.String
  public static let motionHistoryMonitorWasDegradedDueToDeviceIssue: Swift.String
  public static let motionHistoryMonitorWasDegradedInZonesWithDeviceIssue: Swift.String
  public static let motionHistoryMonitorWasDisabledDueToDeviceIssue: Swift.String
  public static let motionHistoryMonitorWasDisabledInZonesWithDeviceIssue: Swift.String
  public static let motionHistoryMotion: Swift.String
  public static let motionHistoryNoData: Swift.String
  public static let motionHistoryNoMotion: Swift.String
  public static let motionHistoryNotAvailable: Swift.String
  public static let motionHistorySensingDataNotAvailable: Swift.String
  public static let motionHistoryTileHistory: Swift.String
  public static let motionHistoryTileToday: Swift.String
  public static let motionHistoryTileTotalActiveTime: Swift.String
  public static let motionHistoryTitle: Swift.String
  public static let motionHistoryToday: Swift.String
  public static let motionNowConnectToWifi: Swift.String
  public static let motionNowConnectToWifiAsZone: Swift.String
  public static let motionNowConnectToWifiYourDeviceUsing: Swift.String
  public static func motionNowFormatActiveZones(_ p1: Swift.Int) -> Swift.String
  public static func motionNowFormatActiveZonesAndroid(_ p1: Swift.Int) -> Swift.String
  public static let motionNowGoToWifiSettings: Swift.String
  public static let motionNowHowPlaceGraphWorks: Swift.String
  public static let motionNowHowPlaceGraphWorksDescription: Swift.String
  public static let motionNowIntensity: Swift.String
  public static let motionNowMax: Swift.String
  public static let motionNowMin: Swift.String
  public static let motionNowMotionDetectedIn: Swift.String
  public static let motionNowNoSensingData: Swift.String
  public static let motionNowNow: Swift.String
  public static let motionNowThirtySecsAgo: Swift.String
  public static let motionNowTileConnectToWifi: Swift.String
  public static let motionNowTileMore: Swift.String
  public static let motionNowTileMovementDetected: Swift.String
  public static let motionNowTileNoMovementDetected: Swift.String
  public static let motionNowTileNoSensingData: Swift.String
  public static func motionNowTileNumberOfActiveZones(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func motionNowTileNumberOfActiveZonesAndroid(_ p1: Swift.Int) -> Swift.String
  public static let motionNowTileToViewMotionNow: Swift.String
  public static let motionNowTitle: Swift.String
  public static func muliplePlacesIntrusionInManyPlaces(_ p1: Swift.Int) -> Swift.String
  public static func muliplePlacesIntrusionInOnePlace(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let newInviteGenerateInviteButton: Swift.String
  public static let newInviteInviteDescription: Swift.String
  public static let newInviteInviteTitle: Swift.String
  public static let newInviteInviteeNamePlaceholder: Swift.String
  public static let newInviteInviteeNameTitle: Swift.String
  public static let notificationGoToSettings: Swift.String
  public static func notificationMissingPermission(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func notificationMissingPermissionDesc(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let notificationPermissionGuide: Swift.String
  public static let pairDeviceGoToSettings: Swift.String
  public static func pairDeviceMissingPermission(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairDeviceMissingPermissionDesc(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairDevicePermissionBluetooth: Swift.String
  public static let pairDevicePermissionLocationAndBluetooth: Swift.String
  public static let pairDevicePermissionLocationAndBluetoothUsages: Swift.String
  public static let pairingAddAnotherNetworkTitle: Swift.String
  public static let pairingAskToConnectConnectToWifi: Swift.String
  public static let pairingAskToConnectConnectToWifiFirstDescription: Swift.String
  public static func pairingAskToConnectConnectToWifiRemainingDescription(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingAskToConnectFirstThreadDeviceDescription1: Swift.String
  public static let pairingAskToConnectFirstThreadDeviceDescription2: Swift.String
  public static let pairingAskToConnectFirstThreadDeviceDescription3: Swift.String
  public static func pairingAskToConnectFirstWifiDeviceDescription1(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingAskToConnectFirstWifiDeviceDescription2: Swift.String
  public static let pairingAskToConnectNonFirstThreadDeviceDescription1: Swift.String
  public static let pairingAskToConnectNonFirstThreadDeviceDescription2: Swift.String
  public static func pairingAskToConnectNonFirstThreadDeviceDescription3(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairingAskToConnectNonFirstWifiDeviceDescription1(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingAskToConnectRemainingThreadDevice: Swift.String
  public static let pairingAskToConnectRemainingThreadDeviceDescription: Swift.String
  public static let pairingAskToConnectThreadBorderRouter: Swift.String
  public static let pairingAskToConnectThreadBorderRouterDescription: Swift.String
  public static let pairingAskToConnectToWifiHeader: Swift.String
  public static let pairingAskToConnectToWifiUseSameWifi: Swift.String
  public static func pairingAskToConnectToWifiUseSameWifiAsZone(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingAskToConnectWifiDeviceImperialDistanceDescription: Swift.String
  public static let pairingAskToConnectWifiDeviceMetricDistanceDescription: Swift.String
  public static let pairingBluetoothDeviceFoundExplainedReadyToPair: Swift.String
  public static let pairingBluetoothDeviceFoundHeader1: Swift.String
  public static func pairingBluetoothDeviceFoundHeader1Known(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairingBluetoothDeviceFoundHeader1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingBluetoothDeviceFoundHeader2: Swift.String
  public static let pairingBluetoothDeviceFoundHeaderConnectToPower: Swift.String
  public static let pairingBluetoothDeviceFoundNameDeviceExplained: Swift.String
  public static func pairingBluetoothDeviceFoundNameDeviceHeader(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingBluetoothDeviceFoundNextButton: Swift.String
  public static let pairingBluetoothUsageHintConfirm: Swift.String
  public static let pairingBluetoothUsageHintHeader: Swift.String
  public static let pairingCameraPermissionGuide: Swift.String
  public static let pairingCancel: Swift.String
  public static let pairingConfirmCancelPairingDescription: Swift.String
  public static let pairingConfirmCancelPairingTitle: Swift.String
  public static func pairingConnectSuccessDeviceHasBeenSetupInZone(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingConnectSuccessSetupAnotherDevice: Swift.String
  public static func pairingConnectWifiInputPassword(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingConnectWifiNoWiFiNetworksFound: Swift.String
  public static let pairingConnectWifiSetUpAsBorderRouter: Swift.String
  public static let pairingConnectWifiSettingUpThisDevice: Swift.String
  public static let pairingConnectWifiSettingUpYourDevice: Swift.String
  public static let pairingConnectWifiTitle: Swift.String
  public static let pairingDeviceSetupNavigagtionTitle: Swift.String
  public static let pairingDone: Swift.String
  public static let pairingEnableBluetoothInSettingsBluetoothDisabled: Swift.String
  public static let pairingEnableBluetoothInSettingsButtonSettings: Swift.String
  public static let pairingEnableBluetoothInSettingsHeader: Swift.String
  public static let pairingEnterWifiPasswordButtonGoBack: Swift.String
  public static let pairingEnterWifiPasswordButtonReadyToConnect: Swift.String
  public static let pairingEnterWifiPasswordEnterPassword: Swift.String
  public static func pairingEnterWifiPasswordHeader(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairingEnterWifiPasswordHeaderAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingEnterWifiPasswordPasswordEntryFieldHint: Swift.String
  public static let pairingEnterWifiPasswordPasswordPlaceholder: Swift.String
  public static let pairingErrorsActionIgnore: Swift.String
  public static let pairingErrorsActionRestart: Swift.String
  public static let pairingErrorsActionTryAgain: Swift.String
  public static func pairingErrorsErrorOccurredDescription(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairingErrorsErrorOccurredDescriptionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingErrorsErrorOccurredTitle: Swift.String
  public static let pairingExit: Swift.String
  public static let pairingExitDeviceSetupDescription: Swift.String
  public static let pairingExitDeviceSetupTitle: Swift.String
  public static let pairingExitSetup: Swift.String
  public static let pairingFinishingSetupGameOfPong: Swift.String
  public static let pairingFinishingSetupHeader: Swift.String
  public static let pairingListWifiNetworksApOutOfReach: Swift.String
  public static let pairingListWifiNetworksAvailableNetworks: Swift.String
  public static let pairingListWifiNetworksButtonCancelPairing: Swift.String
  public static let pairingListWifiNetworksButtonContinue: Swift.String
  public static let pairingListWifiNetworksButtonOtherNetwork: Swift.String
  public static let pairingListWifiNetworksButtonRefresh: Swift.String
  public static let pairingListWifiNetworksConnectWifiTitle: Swift.String
  public static let pairingListWifiNetworksForget: Swift.String
  public static let pairingListWifiNetworksFoundSavedPassword: Swift.String
  public static let pairingListWifiNetworksHeader: Swift.String
  public static func pairingListWifiNetworksHeader2Android(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairingListWifiNetworksHeader2BssidPinnedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingListWifiNetworksLookingForNetworks: Swift.String
  public static let pairingListWifiNetworksNoNetworksFound: Swift.String
  public static let pairingListWifiNetworksProceed: Swift.String
  public static let pairingListWifiNetworksRetryingForNetworks: Swift.String
  public static let pairingListWifiNetworksSelectNetwork: Swift.String
  public static func pairingListWifiNetworksUseSavedPassword(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairingListWifiNetworksUseSavedPasswordAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingListWifiNetworksWarning: Swift.String
  public static func pairingLoadingDeviceConnecting(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingMultizonesGuideAlertModesExplanation: Swift.String
  public static let pairingMultizonesGuideCancelPairingButton: Swift.String
  public static let pairingMultizonesGuideContinueButton: Swift.String
  public static let pairingMultizonesGuideEnterFirstZoneName: Swift.String
  public static let pairingMultizonesGuideInvitation: Swift.String
  public static let pairingMultizonesGuideKeepSingleZoneButton: Swift.String
  public static let pairingMultizonesGuideKeepSingleZoneDescription: Swift.String
  public static let pairingMultizonesGuideNameSecondZoneDescription: Swift.String
  public static let pairingMultizonesGuideRenameDefaultZoneDescription: Swift.String
  public static let pairingMultizonesGuideSeveralZonesExplanation: Swift.String
  public static let pairingMultizonesGuideShortDescription: Swift.String
  public static let pairingMultizonesGuideSkipExplanationButton: Swift.String
  public static let pairingMultizonesGuideUpdateToMultizones: Swift.String
  public static let pairingMultizonesGuideUpgradeToMultizonesButton: Swift.String
  public static let pairingNo: Swift.String
  public static let pairingOther: Swift.String
  public static let pairingOtherWifiNetworkButtonBack: Swift.String
  public static let pairingOtherWifiNetworkDeviceConnectivityHint: Swift.String
  public static let pairingOtherWifiNetworkHeader: Swift.String
  public static let pairingOtherWifiNetworkNetworkNamePlaceholder: Swift.String
  public static let pairingPairedSuccessfullyButtonDone: Swift.String
  public static let pairingPairedSuccessfullyButtonPairAnother: Swift.String
  public static let pairingPairedSuccessfullyButtonReturn: Swift.String
  public static let pairingPairedSuccessfullyButtonUpdateAnother: Swift.String
  public static let pairingPairedSuccessfullyHeader1: Swift.String
  public static func pairingPairedSuccessfullyHeader1Known(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairingPairedSuccessfullyHeader1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingPairedSuccessfullyHeader2: Swift.String
  public static func pairingPairedSuccessfullyHeader2Known(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func pairingPairedSuccessfullyHeader2KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let pairingPairedSuccessfullyHeader3: Swift.String
  public static let pairingPowerOnAndScanningAskUserToWait: Swift.String
  public static let pairingPowerOnAndScanningHeader1: Swift.String
  public static let pairingPowerOnAndScanningHeader2: Swift.String
  public static let pairingPowerOnAndScanningScanning: Swift.String
  public static let pairingScanBluetoothError: Swift.String
  public static let pairingScanDeviceConnectingToThisDevice: Swift.String
  public static let pairingScanDeviceMissingBluetoothLocationPermissionsDescription: Swift.String
  public static let pairingScanDeviceMissingBluetoothLocationPermissionsTitle: Swift.String
  public static let pairingScanDeviceMissingBluetoothPermissionDescription: Swift.String
  public static let pairingScanDeviceMissingBluetoothPermissionTitle: Swift.String
  public static let pairingScanDevicePleaseHold: Swift.String
  public static let pairingScanDeviceSearchingForDevice: Swift.String
  public static let pairingScanQrCodeErrorDescription: Swift.String
  public static let pairingScanQrCodeErrorTitle: Swift.String
  public static let pairingScanQrSubtitle: Swift.String
  public static let pairingScanQrTitle: Swift.String
  public static let pairingScanQrcodeMissingCameraPermissionDescription: Swift.String
  public static let pairingScanQrcodeMissingCameraPermissionTitle: Swift.String
  public static let pairingSuccess: Swift.String
  public static let paringBluetoothIsOff: Swift.String
  public static let paringExplanationTurnOnBluetooth: Swift.String
  public static let paringScanDeviceBluetoothIsOffDescription: Swift.String
  public static let paringScanDeviceBluetoothIsOffTitle: Swift.String
  public static let placeCreation: Swift.String
  public static let placeCreationCustomizeColorSelection: Swift.String
  public static let placeCreationCustomizeHeader: Swift.String
  public static let placeCreationErrorNoCategory: Swift.String
  public static let placeCreationFloorDescription: Swift.String
  public static func placeCreationFloorFloorNumberAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeCreationFloorHeader: Swift.String
  public static let placeCreationHeader: Swift.String
  public static let placeCreationNameDescription: Swift.String
  public static let placeCreationNameEditHint: Swift.String
  public static let placeCreationNameError: Swift.String
  public static let placeCreationNameHeader: Swift.String
  public static let placeCreationSizeDescription: Swift.String
  public static let placeCreationSizeHeader: Swift.String
  public static func placeCreationZoneDefaultNameMultipleFloor(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeCreationZoneDefaultNameSingleFloor: Swift.String
  public static func placeDetailFormatDisconnectedDeviceInOneZoneAndroid(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailNumberOfZone(_ p1: Swift.Int) -> Swift.String
  public static let placeDetailsChangePlaceModeToArmedContainDegradedDescription: Swift.String
  public static let placeDetailsChangePlaceModeToArmedContainUnhealthyDescription: Swift.String
  public static let placeDetailsChangePlaceModeToAwareContainDegradedDescription: Swift.String
  public static let placeDetailsChangePlaceModeToAwareContainUnhealthyDescription: Swift.String
  public static let placeDetailsCustomize: Swift.String
  public static func placeDetailsEventUserRemoveMessage(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeDetailsEvents: Swift.String
  public static func placeDetailsFormatDisconnectedDeviceInMultipleZoneAndroid(_ p1: Swift.Int) -> Swift.String
  public static let placeDetailsGetHelp: Swift.String
  public static let placeDetailsGraph: Swift.String
  public static let placeDetailsGraphLive: Swift.String
  public static func placeDetailsMemberPendingExpiryTime(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeDetailsMemberPendingExpiryTimeDays(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMemberPendingExpiryTimeDaysWithHours(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
  public static func placeDetailsMemberPendingExpiryTimeHours(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMemberPendingExpiryTimeMinutes(_ p1: Swift.Int) -> Swift.String
  public static let placeDetailsMembersActive: Swift.String
  public static func placeDetailsMembersDays(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMembersHours(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMembersMinutes(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsMembersMonths(_ p1: Swift.Int) -> Swift.String
  public static let placeDetailsNoDevicesPaired: Swift.String
  public static let placeDetailsOffline: Swift.String
  public static func placeDetailsOfflineDeviceNotification(_ p1: Swift.Int) -> Swift.String
  public static let placeDetailsPeople: Swift.String
  public static let placeDetailsPlaceMode: Swift.String
  public static func placeDetailsProceedWithDegradedZone(_ p1: Swift.Int) -> Swift.String
  public static func placeDetailsProceedWithUnhealthyZone(_ p1: Swift.Int) -> Swift.String
  public static let placeDetailsSecurityMode: Swift.String
  public static let placeDetailsSecurityModeDescription: Swift.String
  public static let placeDetailsSensingLinkBrokenInMultipleZone: Swift.String
  public static let placeDetailsSensingLinkBrokenInOneZone: Swift.String
  public static let placeDetailsSensorsAreNotResponding: Swift.String
  public static let placeDetailsYesProceed: Swift.String
  public static func placeDetailsZoneInMode(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsDisarmedBy(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsDisarmedByAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeEventsDownloadingHistory: Swift.String
  public static func placeEventsEmptyHistoryPlaceholder(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsEmptyHistoryPlaceholderAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeEventsEventsHistory: Swift.String
  public static func placeEventsMessageIntrusion(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsMessageUserJoined(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsMessageUserJoinedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsMessageUserLeft(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsMessageUserLeftAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsMessageUserRemoved(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsMessageUserRemovedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeEventsTitleIntrusion: Swift.String
  public static func placeEventsTitleUserJoined(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsTitleUserJoinedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsTitleUserLeft(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsTitleUserLeftAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsTitleUserRemoved(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeEventsTitleUserRemovedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeInformationAvgFloorArea: Swift.String
  public static let placeInformationFloors: Swift.String
  public static let placeInformationName: Swift.String
  public static let placeInformationTitle: Swift.String
  public static let placeInformationType: Swift.String
  public static func placeIntegrationsDescriptionPlaceholder(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeIntegrationsEnablingPlaceholder: Swift.String
  public static func placeIntegrationsIntegrationIs(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeIntegrationsIntegrations: Swift.String
  public static let placeIntegrationsIsDisabled: Swift.String
  public static let placeIntegrationsIsEnabled: Swift.String
  public static let placeIntegrationsWantDisable: Swift.String
  public static let placeOverviewGraphLegendBarFourHour: Swift.String
  public static let placeOverviewGraphLegendBarThiryMin: Swift.String
  public static let placeOverviewGraphLegendBarThirySec: Swift.String
  public static let placeOverviewGraphLegendBarTwelveHour: Swift.String
  public static let placeOverviewGraphNow: Swift.String
  public static let placeOverviewGraphPairOneMore: Swift.String
  public static let placeOverviewGraphPairTwoDevices: Swift.String
  public static let placeOverviewGraphThirtySecsAgo: Swift.String
  public static func placeOverviewIntrusionDetectionEndTime(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeOverviewIntrusionDetectionEndTimeFormatHour(_ p1: Swift.Int) -> Swift.String
  public static func placeOverviewIntrusionDetectionEndTimeFormatMinute(_ p1: Swift.Int) -> Swift.String
  public static func placeOverviewIntrusionDetectionStartTime(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeOverviewIntrusionDetectionTitle: Swift.String
  public static let placeOverviewMotion: Swift.String
  public static let placeOverviewPairKitUnlockMotionSensing: Swift.String
  public static let placeOverviewPairingRequestAddDeviceButton: Swift.String
  public static let placeOverviewPairingRequestAddMoreHint: Swift.String
  public static let placeOverviewPairingRequestContinuePairingButton: Swift.String
  public static let placeOverviewPairingRequestSetupAKit: Swift.String
  public static let placeOverviewPairingRequestSetupAKitGuide: Swift.String
  public static let placeOverviewPickerFourHr: Swift.String
  public static let placeOverviewPickerThirtyMin: Swift.String
  public static let placeOverviewPickerThirtySec: Swift.String
  public static let placeOverviewPickerTwelveHr: Swift.String
  public static let placeOverviewResumeSetupKitButton: Swift.String
  public static let placeOverviewSetupKitButton: Swift.String
  public static let placeOverviewZones: Swift.String
  public static let placePairOneMoreDeviceToUnlockTheMotionSensing: Swift.String
  public static let placePropertiesApartment: Swift.String
  public static let placePropertiesHouse: Swift.String
  public static let placeResumeSetUpAKit: Swift.String
  public static let placeSettingEditPlaceToolbar: Swift.String
  public static let placeSettingHeaderGeneral: Swift.String
  public static let placeSettingHeaderSetup: Swift.String
  public static let placeSettingHeaderSetupADeviceDescription: Swift.String
  public static let placeSettingHeaderSetupADeviceTitle: Swift.String
  public static let placeSettingHeaderSetupAKitDescriptionDisableNonFirstKit: Swift.String
  public static let placeSettingHeaderSetupAKitDescriptionDisableOldPlace: Swift.String
  public static let placeSettingHeaderSetupAKitDescriptionEnable: Swift.String
  public static let placeSettingHeaderSetupAKitTitle: Swift.String
  public static let placeSettingPlaceInformation: Swift.String
  public static let placeSettingPlaceInformationDescription: Swift.String
  public static let placeSettingPlaceInformationEditName: Swift.String
  public static let placeSettingPlaceInformationFloor: Swift.String
  public static let placeSettingPlaceInformationName: Swift.String
  public static let placeSettingPlaceInformationSize: Swift.String
  public static let placeSettingPlaceInformationType: Swift.String
  public static let placeSettingsCustomizePlaceDescription: Swift.String
  public static let placeSettingsDeletePlaceButton: Swift.String
  public static func placeSettingsDevicesDescription(_ p1: Swift.Int) -> Swift.String
  public static func placeSettingsDevicesDescriptionAndroid(_ p1: Swift.Int) -> Swift.String
  public static let placeSettingsEditPlace: Swift.String
  public static let placeSettingsEditPlaceAndroid: Swift.String
  public static let placeSettingsEditPlaceDescription: Swift.String
  public static let placeSettingsEngine: Swift.String
  public static let placeSettingsEngineDoesNotSupportSensitivity: Swift.String
  public static let placeSettingsFeatureUnlockWarning: Swift.String
  public static let placeSettingsLeavePlaceButton: Swift.String
  public static let placeSettingsManageDevices: Swift.String
  public static let placeSettingsMotion: Swift.String
  public static func placeSettingsNumberOfDevices(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeSettingsOnlyAvailableForFirstKit: Swift.String
  public static let placeSettingsPlaceSettings: Swift.String
  public static let placeSettingsSectionGeneral: Swift.String
  public static let placeSettingsSectionSetup: Swift.String
  public static let placeSettingsSecurity: Swift.String
  public static let placeSettingsSensitivity: Swift.String
  public static func placeSettingsSensitivityLevel(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeSettingsSetupKit: Swift.String
  public static let placeSettingsSetupKitDescription: Swift.String
  public static let placeSettingsSetupSingleDevice: Swift.String
  public static let placeSettingsSetupSingleDeviceDescription: Swift.String
  public static let placeSettingsTitle: Swift.String
  public static let placeSettingsUpdateWifiNetwork: Swift.String
  public static let placeSettingsUpdateWifiNetworkDescription: Swift.String
  public static let placeSettingsZeroDeviceDescription: Swift.String
  public static func placeSettingsZonesDescription(_ p1: Swift.Int) -> Swift.String
  public static func placeSettingsZonesDescriptionAndroid(_ p1: Swift.Int) -> Swift.String
  public static let placeUsersInvitationInvitePeople: Swift.String
  public static func placeUsersInvitationUsersLimitReached(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func placeUsersInvitationUsersLimitReachedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let placeUsersRoleRole: Swift.String
  public static let placesCategoryApartment: Swift.String
  public static let placesCategoryEating: Swift.String
  public static let placesCategoryHouse: Swift.String
  public static let placesCategoryShopping: Swift.String
  public static let placesCategoryUnknown: Swift.String
  public static let placesCategoryWork: Swift.String
  public static let placesTitle: Swift.String
  public static let profileAbout: Swift.String
  public static let profileAccount: Swift.String
  public static let profileAccountManagementAccountDeletionDescription: Swift.String
  public static let profileAccountManagementConfirmAccountDeletion: Swift.String
  public static let profileAccountManagementDeleteAccountAlertDescription: Swift.String
  public static let profileAccountManagementDeleteAccountAlertTitle: Swift.String
  public static let profileAccountManagementDeleteAccountButton: Swift.String
  public static let profileAccountManagementTitle: Swift.String
  public static let profileAppVersion: Swift.String
  public static let profileAuthentication: Swift.String
  public static let profileCopied: Swift.String
  public static let profileCopyRecoveryKey: Swift.String
  public static let profileCustomer: Swift.String
  public static let profileGoConfirmSigninRequest: Swift.String
  public static let profileHelpAndFeedback: Swift.String
  public static let profileHelpNFeedback: Swift.String
  public static let profileInstaller: Swift.String
  public static let profileJoined: Swift.String
  public static let profileLegal: Swift.String
  public static let profileLinkAccountGuideText: Swift.String
  public static let profileLinked3rdPartyAccount: Swift.String
  public static let profileLinkedThirdPartyAccounts: Swift.String
  public static let profileLinkedThirdPartyAccountsNotLinkYet: Swift.String
  public static let profileLinkedThirdPartyAccountsUnlink: Swift.String
  public static let profileNoLinkedAccountsMessage: Swift.String
  public static let profilePrivacyPolicy: Swift.String
  public static let profileRecoveryInfoTitle: Swift.String
  public static let profileRecoveryKey: Swift.String
  public static let profileRecoveryKeyHint: Swift.String
  public static let profileSectionTitleAccount: Swift.String
  public static let profileSectionTitleHelp: Swift.String
  public static let profileSendTestPush: Swift.String
  public static let profileSettings: Swift.String
  public static let profileSignOut: Swift.String
  public static let profileSupportArticle: Swift.String
  public static let profileSupportArticles: Swift.String
  public static let profileTermsOfServices: Swift.String
  public static let profileTitle: Swift.String
  public static let profileUnlinkAlertConfirm: Swift.String
  public static let profileUnlinkAlertMessage: Swift.String
  public static let profileUnlinkAlertMessageAndroid: Swift.String
  public static let profileUnlinkAlertTitle: Swift.String
  public static let profileUser: Swift.String
  public static let profileUsername: Swift.String
  public static let profileUsernameMissing: Swift.String
  public static let profileUsernameYou: Swift.String
  public static let pushRegisterPushTokenFailed: Swift.String
  public static let qrscannerHelp: Swift.String
  public static let qrscannerTitle: Swift.String
  public static let qrscannerWhereQr: Swift.String
  public static let recoverKeyGoBack: Swift.String
  public static let recoveryButtonRecover: Swift.String
  public static let recoveryError: Swift.String
  public static let recoveryRecoveryKeyPlaceholder: Swift.String
  public static let recoveryTextGuide: Swift.String
  public static let removeDeviceChangeThreadNetwork: Swift.String
  public static func removeDeviceChangeThreadNetworkDescription(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let removeDeviceDataRemovedWarningThread: Swift.String
  public static let removeDeviceDataRemovedWarningWifi: Swift.String
  public static let removeDeviceDisableSensingFunction: Swift.String
  public static func removeDeviceDisableSensingFunctionDescription(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func removeDeviceRemoveDeviceName(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let removeDeviceRemoveThisDevice: Swift.String
  public static let removeDeviceRemoveThreadNetwork: Swift.String
  public static func removeDeviceRemoveThreadNetworkDescription(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func removeDeviceRestoreSensingInZone(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let removeDeviceRestoreSensingInZoneDescription: Swift.String
  public static let reportFalseAlarmReportingAsFalseAlarmWillAlsoDisarmTheIntrusion: Swift.String
  public static let reportFalseAlarmTheIntrusionWasTriggeredBy: Swift.String
  public static let roomSelectionConfirmButton: Swift.String
  public static let roomSelectionDescription: Swift.String
  public static let roomSelectionTitle: Swift.String
  public static let roomsCategoryBathroom: Swift.String
  public static let roomsCategoryBedroom: Swift.String
  public static let roomsCategoryKitchen: Swift.String
  public static let roomsCategoryLivingRoom: Swift.String
  public static let roomsCategoryOther: Swift.String
  public static let roomsCategoryUnknown: Swift.String
  public static let securityModeAddMoreZoneToShowZoneSettings: Swift.String
  public static let securityModeDegradedZone: Swift.String
  public static let securityModeDisabled: Swift.String
  public static let securityModeDisabledZone: Swift.String
  public static let securityModeDiscard: Swift.String
  public static let securityModeDiscardChanges: Swift.String
  public static let securityModeDiscardChangesDescription: Swift.String
  public static func securityModePlaceDeviceOffline(_ p1: Swift.Int) -> Swift.String
  public static let securityModeStatusArmedDescription: Swift.String
  public static let securityModeStatusAwareDescription: Swift.String
  public static let securityModeStatusRelaxedDescription: Swift.String
  public static let securityModeZoneMode: Swift.String
  public static let securityModeZoneModeDescription: Swift.String
  public static let selectFloorAreaDescription: Swift.String
  public static let selectFloorAreaHeader: Swift.String
  public static let selectFloorAreaOption1Imperial: Swift.String
  public static let selectFloorAreaOption1Metric: Swift.String
  public static let selectFloorAreaOption2Imperial: Swift.String
  public static let selectFloorAreaOption2Metric: Swift.String
  public static let selectFloorAreaOption3Imperial: Swift.String
  public static let selectFloorAreaOption3Metric: Swift.String
  public static let selectFloorAreaOption4Imperial: Swift.String
  public static let selectFloorAreaOption4Metric: Swift.String
  public static let selectFloorNumberDescription: Swift.String
  public static let selectFloorNumberHeader: Swift.String
  public static let selectKitDescription: Swift.String
  public static let selectKitMonitoringKit: Swift.String
  public static let selectKitMonitoringKitDescription: Swift.String
  public static let selectKitSecurityKit: Swift.String
  public static let selectKitSecurityKitDescription: Swift.String
  public static let selectKitTitle: Swift.String
  public static let selectPlaceIconHeader: Swift.String
  public static let selectPlaceThemeHeader: Swift.String
  public static let selectPlaceTypeDescription: Swift.String
  public static let selectPlaceTypeHeader: Swift.String
  public static let selectRoomCategoryHeader: Swift.String
  public static let selectRoomIconHeader: Swift.String
  public static let selectUserIconChooseImageColor: Swift.String
  public static let selectUserIconChooseProfileImage: Swift.String
  public static let selectUserIconPromptMessage: Swift.String
  public static let selectZoneDescription: Swift.String
  public static func selectZoneFormatThreadDevices(_ p1: Swift.Int) -> Swift.String
  public static func selectZoneFormatWifiDevices(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func selectZoneFormatWifidevices(_ p1: Swift.Int) -> Swift.String
  public static let selectZoneTitle: Swift.String
  public static let sensitivitySettingsDescriptionUnavailable: Swift.String
  public static let sensitivitySettingsEngineUnavailable: Swift.String
  public static let sensitivitySettingsFourToSix: Swift.String
  public static let sensitivitySettingsFourToSixDescription: Swift.String
  public static func sensitivitySettingsLevelAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let sensitivitySettingsMaxTitle: Swift.String
  public static let sensitivitySettingsMaxTitleAndroid: Swift.String
  public static let sensitivitySettingsMinTitle: Swift.String
  public static let sensitivitySettingsMinTitleAndroid: Swift.String
  public static let sensitivitySettingsOneToThree: Swift.String
  public static let sensitivitySettingsOneToThreeDescription: Swift.String
  public static let sensitivitySettingsSaveSensitivtyButtonTitle: Swift.String
  public static let sensitivitySettingsSensitivityLevelDescription: Swift.String
  public static let sensitivitySettingsSevenToNine: Swift.String
  public static let sensitivitySettingsSevenToNineDescription: Swift.String
  public static let sensitivitySettingsSuccess: Swift.String
  public static let sensitivitySettingsTenToTwelve: Swift.String
  public static let sensitivitySettingsTenToTwelveDescription: Swift.String
  public static let sensitivitySettingsTestSensitivityButtonTitle: Swift.String
  public static let sensitivitySettingsTitle: Swift.String
  public static let setupADeviceRoomSelectionSubTittle: Swift.String
  public static let setupADeviceRoomSelectionTittle: Swift.String
  public static let setupADeviceToolbarTittle: Swift.String
  public static let setupAKitFeatureNotAvailableDescription: Swift.String
  public static let setupAKitFeatureNotAvailableHeader: Swift.String
  public static let setupAKitHowDeviceWorkDescription: Swift.String
  public static let setupAKitHowDeviceWorkSubTittle: Swift.String
  public static let setupAKitHowDeviceWorkTittle: Swift.String
  public static let setupAKitHowDeviceWorksGuideContent1: Swift.String
  public static let setupAKitHowDeviceWorksGuideContent2: Swift.String
  public static let setupAKitHowDeviceWorksGuideContent3: Swift.String
  public static let setupAKitHowDeviceWorksGuideContent4: Swift.String
  public static let setupAKitHowDeviceWorksGuideContent5: Swift.String
  public static let setupAKitHowDeviceWorksStart: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent1FirstPairedDevice: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent1NonFirstPairedDeviceImperial: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent1NonFirstPairedDeviceMetric: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent2FirstPairedDeviceImperial: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent2FirstPairedDeviceMetric: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent2FirstPairedDeviceSecurityKit: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent2NonFirstPairedDeviceImperial: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent2NonFirstPairedDeviceMetric: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent3NonFirstPairedDevice: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideContent4NonFirstPairedDevice: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideFirstDevice: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideFirstDeviceInZone: Swift.String
  public static let setupAKitHowToPlaceDeviceGuideNonFirstDevice: Swift.String
  public static let setupAKitHowToPlaceDeviceNonFirstPairedDeviceGuideContent1: Swift.String
  public static let setupAKitHowToPlaceDeviceNonFirstPairedDeviceGuideContent2Imperial: Swift.String
  public static let setupAKitHowToPlaceDeviceNonFirstPairedDeviceGuideContent2Metric: Swift.String
  public static let setupAKitHowToPlaceDeviceSensingZone: Swift.String
  public static let setupAKitHowToPlaceDeviceSubTittle: Swift.String
  public static let setupAKitHowToPlaceDeviceTittle: Swift.String
  public static let setupAKitKitSelectionSubTittle: Swift.String
  public static let setupAKitKitSelectionTittle: Swift.String
  public static let setupAKitToolbarTittle: Swift.String
  public static let setupAKitWhereToSetupAddGuide: Swift.String
  public static let setupAKitWhereToSetupFirstFloor: Swift.String
  public static let setupAKitWhereToSetupOneFloorTitle: Swift.String
  public static func setupAKitWhereToSetupPlaceSizeLargeCoverage1Floor(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func setupAKitWhereToSetupPlaceSizeLargeCoverageMoreFloors(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let setupAKitWhereToSetupPlaceSizeSmallCoverage1Floor: Swift.String
  public static func setupAKitWhereToSetupPlaceSizeSmallCoverageMoreFloors(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let setupAKitWhereToSetupSubTittleFloorBigSize: Swift.String
  public static let setupAKitWhereToSetupSubTittleFloorSmallSize: Swift.String
  public static let setupAKitWhereToSetupSubTittleMoreFloorMonitoring: Swift.String
  public static let setupAKitWhereToSetupSubTittleMoreFloorSecurity: Swift.String
  public static let setupAKitWhereToSetupSubtitleMonitorOneFloorBigSize: Swift.String
  public static let setupAKitWhereToSetupSubtitleOneFloorSmallSize: Swift.String
  public static let setupAKitWhereToSetupSubtitleSecurityOneFloorBigSize: Swift.String
  public static let setupAKitWhereToSetupTittle: Swift.String
  public static let setupKitTitle: Swift.String
  public static let signUpAnonymousAccountText: Swift.String
  public static let signUpAnonymousAccountText1: Swift.String
  public static let signUpAnonymousAccountText2: Swift.String
  public static let signUpAnonymousAccountText3: Swift.String
  public static let signUpButtonRecoveryKey: Swift.String
  public static let signUpButtonSignUp: Swift.String
  public static let signUpButtonSignUpAnonymous: Swift.String
  public static let signUpContinueWithApple: Swift.String
  public static let signUpContinueWithGoogle: Swift.String
  public static let signUpOtherSignUpOptions: Swift.String
  public static let signUpPrivacyPolicy: Swift.String
  public static let signUpTermsOfService: Swift.String
  public static let signUpTosAndPrivacy: Swift.String
  public static let signUpTosAndPrivacyPart1: Swift.String
  public static let signUpTosAndPrivacyPart2: Swift.String
  public static let signUpTosAndPrivacyPart2Android: Swift.String
  public static let signUpTosAndPrivacyPart3: Swift.String
  public static let signUpTosAndPrivacyPart4: Swift.String
  public static let signUpTosAndPrivacyPart4Android: Swift.String
  public static let signUpUnknownProvider: Swift.String
  public static let signUpWelcomeText: Swift.String
  public static let statusAlert: Swift.String
  public static let statusArmedHint: Swift.String
  public static let statusArmedHintDisabled: Swift.String
  public static let statusAware: Swift.String
  public static let statusAwareHint: Swift.String
  public static func statusInSwitchingMode(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let statusRelaxed: Swift.String
  public static let statusRelaxedHint: Swift.String
  public static let timeZoneNoResultsFound: Swift.String
  public static let timeZoneSearchTimeZone: Swift.String
  public static let timeZoneTitle: Swift.String
  public static func updateWifiDeviceAlreadyUpdated(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func updateWifiDeviceNotInZone(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let updateWifiHowItWorksConfirmButton: Swift.String
  public static let updateWifiHowItWorksDescription: Swift.String
  public static let updateWifiHowItWorksHelp: Swift.String
  public static let updateWifiHowItWorksInstructionBulletPoint1: Swift.String
  public static let updateWifiHowItWorksInstructionBulletPoint2: Swift.String
  public static let updateWifiHowItWorksInstructionBulletPoint3: Swift.String
  public static let updateWifiHowItWorksInstructionBulletPoint4: Swift.String
  public static let updateWifiHowItWorksInstructionPart1: Swift.String
  public static let updateWifiHowItWorksInstructionPart2: Swift.String
  public static let updateWifiHowItWorksInstructionTitle: Swift.String
  public static let updateWifiHowItWorksTitle: Swift.String
  public static let updateWifiLocateDeviceButton: Swift.String
  public static let updateWifiNetworkCommissioningModeCustomizePlace: Swift.String
  public static func updateWifiNetworkDeviceQrCodeDeviceAlreadyRepairedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func updateWifiNetworkDeviceQrCodeDeviceNotInZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let updateWifiNetworkDeviceQrCodeInvalid: Swift.String
  public static let updateWifiNetworkHowItWorksGuideSubtitle: Swift.String
  public static let updateWifiNetworkResetDeviceGuidePlugType: Swift.String
  public static let updateWifiNetworkResetDeviceGuidePod2: Swift.String
  public static let updateWifiNetworkResetDeviceGuidePodType: Swift.String
  public static let updateWifiNetworkUpdateSuccessfullyHeader1: Swift.String
  public static func updateWifiNetworkUpdateSuccessfullyHeader1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let updateWifiNetworkZoneStatusGuideCompletedUpdate: Swift.String
  public static let updateWifiNetworkZonesSelectionGuide: Swift.String
  public static func updateWifiNotNamiQrCode(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let updateWifiNotNamiQrCodeNoZone: Swift.String
  public static let updateWifiPlug: Swift.String
  public static let updateWifiPod: Swift.String
  public static let updateWifiQrCodeError: Swift.String
  public static let updateWifiQrDoesNotMatch: Swift.String
  public static let updateWifiRepeatQrScan: Swift.String
  public static let updateWifiResetDeviceConfirmButton: Swift.String
  public static let updateWifiResetDeviceDescription: Swift.String
  public static func updateWifiResetDeviceHowToReset(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let updateWifiResetDevicePlugResetInstructions: Swift.String
  public static let updateWifiResetDevicePlugResetInstructions1: Swift.String
  public static let updateWifiResetDevicePlugResetInstructions2: Swift.String
  public static let updateWifiResetDevicePlugResetInstructions3: Swift.String
  public static let updateWifiResetDevicePlugResetInstructions4: Swift.String
  public static let updateWifiResetDevicePodResetInstructions: Swift.String
  public static let updateWifiResetDevicePodResetInstructions1: Swift.String
  public static let updateWifiResetDevicePodResetInstructions2: Swift.String
  public static let updateWifiResetDevicePodResetInstructions3: Swift.String
  public static let updateWifiResetDevicePodResetInstructions4: Swift.String
  public static let updateWifiResetDeviceTitle: Swift.String
  public static let updateWifiResumeUpdate: Swift.String
  public static func updateWifiResumeUpdateInstruction(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let updateWifiSelectZoneToUpdateConfirmButton: Swift.String
  public static let updateWifiSelectZoneToUpdateDescription: Swift.String
  public static let updateWifiSelectZoneToUpdateNonThreadZoneSupport: Swift.String
  public static func updateWifiSelectZoneToUpdateNumberOfDevices(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let updateWifiSelectZoneToUpdateSelectZone: Swift.String
  public static let updateWifiSelectZoneToUpdateTitle: Swift.String
  public static let updateWifiTitle: Swift.String
  public static let updateWifiZoneDeviceCheckScanQr: Swift.String
  public static let updateWifiZoneWifiUpdateConfirmButton: Swift.String
  public static let updateWifiZoneWifiUpdateCongratulations: Swift.String
  public static let updateWifiZoneWifiUpdateDescription: Swift.String
  public static let updateWifiZoneWifiUpdateDevicesUpdated: Swift.String
  public static let updateWifiZoneWifiUpdateFinishButton: Swift.String
  public static let updateWifiZoneWifiUpdateLastDeviceDescription: Swift.String
  public static let updateWifiZoneWifiUpdateLocateDevice: Swift.String
  public static let updateWifiZoneWifiUpdateLocateLastDevice: Swift.String
  public static let updateWifiZoneWifiUpdateSessionCompleted: Swift.String
  public static let updateWifiZoneWifiUpdateTitle: Swift.String
  public static let updateWifiZoneWifiUpdateUpdateAnotherZoneButton: Swift.String
  public static let updateWifiZoneWifiUpdateUpdateSuccess: Swift.String
  public static func upgradeMultiZonesCreateFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func upgradeMultiZonesLoadDataFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func upgradeMultiZonesLoadZoneFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func upgradeMultiZonesUpdateFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let userDetailsAskLeavePlaceButton: Swift.String
  public static func userDetailsAskRemoveUserAlertMessage(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let userDetailsAskRemoveUserButton: Swift.String
  public static let userDetailsConfirmLeavePlaceButton: Swift.String
  public static let userDetailsConfirmRemoveUserButton: Swift.String
  public static func userDetailsLastActive(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func userDetailsLastActiveAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func userDetailsLeavePlaceAlertMessage(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let userDetailsLeavePlaceAlertTitle: Swift.String
  public static func userDetailsRemoveUserAlertMessage(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static func userDetailsRemoveUserAlertMessageAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let userDetailsRemoveUserAlertTitle: Swift.String
  public static let userDetailsRemoveUserButton: Swift.String
  public static let userDetailsSaveChangesButton: Swift.String
  public static let welcomePagePolicy: Swift.String
  public static let widarCancelPopupBackToPositioningButton: Swift.String
  public static let widarCancelPopupCancelButton: Swift.String
  public static let widarCancelPopupMessage: Swift.String
  public static let widarCancelPopupTitle: Swift.String
  public static let widarErrorDeviceNotFoundMessage: Swift.String
  public static let widarErrorExitButton: Swift.String
  public static let widarErrorRetryButton: Swift.String
  public static let widarErrorTitle: Swift.String
  public static let widarHeaderTitle: Swift.String
  public static let widarInfoButtonText: Swift.String
  public static let widarInfoInfoAvoidMovingWhenOptimized: Swift.String
  public static let widarInfoInfoMustOptimisePosition: Swift.String
  public static let widarInfoTitle: Swift.String
  public static let widarPositionCancelButton: Swift.String
  public static let widarPositionFinishButton: Swift.String
  public static let widarPositionGuideImperial: Swift.String
  public static let widarPositionGuideMetric: Swift.String
  public static let widarPositionStatusChecking: Swift.String
  public static let widarPositionStatusGettingBetter: Swift.String
  public static let widarPositionStatusLabel: Swift.String
  public static let widarPositionStatusMispositioned: Swift.String
  public static let widarPositionStatusOptimized: Swift.String
  public static let widarPositionTip: Swift.String
  public static let widarPositionTitle: Swift.String
  public static let widarRecommendationsButtonText: Swift.String
  public static let widarRecommendationsInfoAttachBase: Swift.String
  public static let widarRecommendationsInfoKeepAreaClear: Swift.String
  public static let widarRecommendationsInfoWireOnBack: Swift.String
  public static let widarRecommendationsTitle: Swift.String
  public static func widarSuccessContentMessage(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  public static let widarSuccessDoneButton: Swift.String
  public static let widarSuccessTitle: Swift.String
  public static let zoneChecksMotionSensingCheckName: Swift.String
  public static let zoneChecksMotionSensingStatusDisconnected: Swift.String
  public static let zoneChecksMotionSensingStatusNotWorking: Swift.String
  public static let zoneChecksMotionSensingStatusWorkingMotionDetected: Swift.String
  public static let zoneChecksMotionSensingStatusWorkingMotionNotDetected: Swift.String
  public static let zoneChecksZoneHealthCheckName: Swift.String
  public static let zoneChecksZoneHealthHintAssessingZoneHealth: Swift.String
  public static let zoneChecksZoneHealthHintCheckNeeded: Swift.String
  public static let zoneChecksZoneHealthHintWorksWell: Swift.String
  public static let zoneChecksZoneHealthStatusDegraded: Swift.String
  public static let zoneChecksZoneHealthStatusHealthy: Swift.String
  public static let zoneChecksZoneHealthStatusUnhealthy: Swift.String
  public static let zoneChecksZoneHealthStatusUnknown: Swift.String
  public static let zoneDefaultName: Swift.String
  public static let zoneSelectionAddYourKitTo: Swift.String
  public static let zoneSelectionDescription: Swift.String
  public static let zoneSelectionMonitoringKitDescription: Swift.String
  public static let zoneSelectionSecurityKitDescription: Swift.String
  public static let zoneSelectionTitle: Swift.String
  public enum AccountLinking {
    public static let authorizeSignInRequest: Swift.String
    public static let pleaseSignin: Swift.String
    public static func signInRequestIpTimeBrowser(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func signInRequestPlaceIpTimeBrowserAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum Activity {
    public static let motion: Swift.String
    public static let motionDetectedIn: Swift.String
    public static let noMotion: Swift.String
    public static let noPresence: Swift.String
    public static let presence: Swift.String
    public static let presenceDetectedIn: Swift.String
    public static let title: Swift.String
    public static let totalMotionTime: Swift.String
    public enum Event {
      public static let ongoing: Swift.String
    }
  }
  public enum Alarm {
    public static func detectedAt(_ p1: Any, _ p2: Any) -> Swift.String
    public static func detectedAtAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let disarm: Swift.String
    public static func intrusionDescription(_ p1: Any, _ p2: Any) -> Swift.String
    public static func intrusionDescriptionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let intrusionTitle: Swift.String
    public static let reportFalse: Swift.String
    public enum FalseAlarm {
      public static func causeListTitle(_ p1: Any) -> Swift.String
      public static let reportButtonTitle: Swift.String
      public static func reportHint(_ p1: Any) -> Swift.String
      public static let selectCauseTitle: Swift.String
      public static let title: Swift.String
      public enum Cause {
        public static let myself: Swift.String
        public static let other: Swift.String
        public static let smallMovingObjects: Swift.String
      }
      public enum SensitivityExplanatio {
        public static let adjustSensitivityButton: Swift.String
        public static let armSelectedZones: Swift.String
        public static let possibleReasons: Swift.String
        public static let sensitivityLevelHint: Swift.String
      }
      public enum SensitivityExplanation {
        public static let reduceFalseAlarmsTitle: Swift.String
      }
    }
    public enum LiveAlarm {
      public static func activitiesStopped(_ p1: Any) -> Swift.String
      public static func noActivity(_ p1: Any) -> Swift.String
      public static func ongoingActivity(_ p1: Any) -> Swift.String
      public static let securityMonitoring: Swift.String
      public static func startedAtInZone(_ p1: Any, _ p2: Any) -> Swift.String
      public static func stoppedActivity(_ p1: Any) -> Swift.String
    }
    public enum Pill {
      public static func alarmTriggered(_ p1: Any) -> Swift.String
    }
    public enum Reason {
      public static let co2: Swift.String
      public static let fire: Swift.String
      public static let flood: Swift.String
      public static let intrusion: Swift.String
    }
    public enum Report {
      public static let alarmDisarmed: Swift.String
      public static let alarmTriggered: Swift.String
      public static let duration: Swift.String
      public static func eventStartEndTime(_ p1: Any, _ p2: Any) -> Swift.String
      public static let securityLog: Swift.String
      public static func startedAt(_ p1: Any) -> Swift.String
      public static func subjectHistory(_ p1: Any) -> Swift.String
      public static let title: Swift.String
      public static func totalActiveTime(_ p1: Any) -> Swift.String
      public static let zonesAffected: Swift.String
    }
  }
  public enum AlertMessage {
    public static func nolongerAccess(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let pluralPlacesWereDeleted: Swift.String
    public static let singularPlaceWasDeleted: Swift.String
  }
  public enum ChangeUsername {
    public static let emptyErrorMessage: Swift.String
    public static let placeholder: Swift.String
    public static let promptMessage: Swift.String
  }
  public enum ChooseRoom {
    public static let confirm: Swift.String
    public static let createRoom: Swift.String
    public static let header: Swift.String
    public static let loadDataFailed: Swift.String
    public static let selectOrCreateHeader: Swift.String
  }
  public enum ChooseZone {
    public static let confirm: Swift.String
    public static let createZone: Swift.String
    public static let header: Swift.String
    public static let loadDataFailed: Swift.String
    public static let noDevices: Swift.String
    public static func threadDevicesCount(_ p1: Any) -> Swift.String
    public static func wifiDevicesCount(_ p1: Any) -> Swift.String
  }
  public enum CommissioningMode {
    public enum CheckupZone {
      public static let contactIsntaller: Swift.String
    }
    public enum CompanionLanding {
      public static let cancel: Swift.String
      public static let contactSupport: Swift.String
      public static let goToPlaceButton: Swift.String
      public static let loadingInfo: Swift.String
      public static let placeFound: Swift.String
    }
    public enum ConfirmPlace {
      public static let confirmButton: Swift.String
      public static let namePlaceHint: Swift.String
      public static let namePlacePlaceholder: Swift.String
    }
    public enum LoadingScreen {
      public static let loadingContent: Swift.String
    }
    public enum PlaceDetails {
      public static let addDevice: Swift.String
      public static let addDevicesHint: Swift.String
      public static let addZone: Swift.String
      public static let contactIsntaller: Swift.String
      public static let createdAt: Swift.String
      public static let createdAtAndroid: Swift.String
      public static let exitButton: Swift.String
      public static let finishSetupButton: Swift.String
      public static let renamePlaceButton: Swift.String
      public static let updatedAt: Swift.String
      public static let updatedAtAndroid: Swift.String
      public static let zonesSectionTitle: Swift.String
    }
    public enum SetupModeSettings {
      public static let exitSetup: Swift.String
      public static let installer: Swift.String
      public static let placeSettings: Swift.String
      public static let settings: Swift.String
      public static let user: Swift.String
    }
  }
  public enum Companion {
    public static let addZone: Swift.String
    public static let editPlaceNameHint: Swift.String
    public static let exitSetup: Swift.String
    public static let exitSetupAndroid: Swift.String
    public static let zoneHealth: Swift.String
    public static let zoneMotionSensing: Swift.String
    public static let zones: Swift.String
    public enum Home {
      public static let contactYourInstallerToSetUpYourPlace: Swift.String
    }
    public enum ZoneHealth {
      public static let checkAllDevices: Swift.String
      public static let degraded: Swift.String
      public static let healthy: Swift.String
      public static let unhealthy: Swift.String
      public static let worksWell: Swift.String
    }
    public enum ZoneMotionSensing {
      public static let connectLocalWifi: Swift.String
      public static let dataNotAvailable: Swift.String
      public static let movementDetected: Swift.String
      public static let noMovementDetected: Swift.String
    }
  }
  public enum ConfirmPlaceName {
    public static let buttonConfirm: Swift.String
    public static let header: Swift.String
    public static let subhead: Swift.String
  }
  public enum ConfirmRoomName {
    public static let buttonConfirm: Swift.String
    public static let header: Swift.String
    public static let subhead: Swift.String
  }
  public enum ConnectivityIndicator {
    public static let deviceConnected: Swift.String
    public static let deviceDisconnected: Swift.String
    public static func deviceRssi(_ p1: Swift.Int) -> Swift.String
  }
  public enum CreateFirstPlace {
    public static let cancel: Swift.String
    public static let createPlace: Swift.String
    public static let createPlaceSlideText: Swift.String
    public static let joinPlace: Swift.String
    public static let joinPlaceSlideText: Swift.String
    public static let letsStart: Swift.String
    public static let welcomeText: Swift.String
  }
  public enum CreatePlace {
    public static let sectionTitle: Swift.String
  }
  public enum CreateZone {
    public static let buttonConfirm: Swift.String
    public static let description: Swift.String
    public static let enterName: Swift.String
    public static let enterNameHint: Swift.String
    public static let header: Swift.String
    public static let nameTheZoneDescription: Swift.String
    public static let placeholder: Swift.String
    public static let secondFloorPlaceholder: Swift.String
    public static let title: Swift.String
  }
  public enum Dashboard {
    public static let addNewPlace: Swift.String
    public static let addNewUser: Swift.String
    public static let fineMessage: Swift.String
    public static func formatDisconnectedDeviceInMultipleZoneAndroid(_ p1: Swift.Int) -> Swift.String
    public static func formatIssueInAPlace(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func formatIssueInMultiplePlace(_ p1: Swift.Int) -> Swift.String
    public static let lastSeen: Swift.String
    public static let people: Swift.String
    public static let places: Swift.String
    public static let sensingLinkBrokenInMultipleZone: Swift.String
    public static let sensingLinkBrokenInOneZone: Swift.String
    public enum PlaceTile {
      public static let addOneMoreDevice: Swift.String
      public static let addTwoDevices: Swift.String
      public static let checkYourDeviceSetup: Swift.String
      public static let currentStatus: Swift.String
      public static let intrusionDetected: Swift.String
      public static let movementDetected: Swift.String
      public static let noMovementDetected: Swift.String
      public static let noSensingData: Swift.String
      public static let notAvailable: Swift.String
      public static let pairKit: Swift.String
      public static let pairMore: Swift.String
      public static let pairOneMore: Swift.String
      public static let pairTwo: Swift.String
      public static func sinceStartedDate(_ p1: Any) -> Swift.String
      public static func sinceStartedDateAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum DeletePlace {
    public static let confirmDeletePlace: Swift.String
    public static let confirmLeavePlace: Swift.String
    public static let deleteAllRelatedData: Swift.String
    public static let deleteAllRelatedDataDescription: Swift.String
    public static let deletePlaceAndData: Swift.String
    public static let deletePlaceTitle: Swift.String
    public static let inviteAgain: Swift.String
    public static let leavePlaceTitle: Swift.String
    public static let loseAccessToAllData: Swift.String
    public static let loseAccessToAllDataDescription: Swift.String
    public static let loseAccessToAllDevices: Swift.String
    public static let loseAccessToAllDevicesDescription: Swift.String
    public static let removeAllUsers: Swift.String
    public static let removeAllUsersDescription: Swift.String
    public static let resetAllDevices: Swift.String
    public static let resetAllDevicesDescription: Swift.String
    public static let thisActionIsIrreversible: Swift.String
    public static let thisWillAlso: Swift.String
  }
  public enum DeviceDetails {
    public static let connected: Swift.String
    public static func deleteDeviceFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func loadDataFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let relay: Swift.String
    public static func toggleDeviceFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum DeviceEdit {
    public static let customizeDeviceDescription: Swift.String
    public static let customizeDeviceTitle: Swift.String
    public static let deviceInfoDescription: Swift.String
    public static let deviceInfoTitle: Swift.String
    public static let deviceNamePlaceholder: Swift.String
    public static let title: Swift.String
  }
  public enum DeviceEngines {
    public static let motion: Swift.String
    public static let security: Swift.String
    public static let unknown: Swift.String
  }
  public enum DeviceInfo {
    public static let bbsid: Swift.String
    public static let borderRouter: Swift.String
    public static let bssid: Swift.String
    public static let cloudConnection: Swift.String
    public static let deviceConnected: Swift.String
    public static let deviceDisconnected: Swift.String
    public static let deviceModel: Swift.String
    public static let deviceModelId: Swift.String
    public static let deviceName: Swift.String
    public static let firmvareVesrion: Swift.String
    public static let firmwareAutomaticUpdateHint: Swift.String
    public static let localConnection: Swift.String
    public static let macAddress: Swift.String
    public static let nonBorderRouter: Swift.String
    public static let pairedAt: Swift.String
    public static let panid: Swift.String
    public static let role: Swift.String
    public static let room: Swift.String
    public static let rssi: Swift.String
    public static let technicalInformation: Swift.String
    public static let threadNetwork: Swift.String
    public static let title: Swift.String
    public static let wifiNetwork: Swift.String
    public static let zone: Swift.String
  }
  public enum DeviceInstructions {
    public static let bulletPoint1: Swift.String
    public static let bulletPoint2: Swift.String
    public static let bulletPoint3: Swift.String
    public static let bulletPoint4: Swift.String
    public static let confirmButton: Swift.String
    public static let description: Swift.String
    public static let title: Swift.String
  }
  public enum DeviceOverview {
    public static let connection: Swift.String
    public static let schedule: Swift.String
    public static let siren: Swift.String
    public static let status: Swift.String
    public static func waitingForConnection(_ p1: Any) -> Swift.String
    public static func waitingForConnectionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let zone: Swift.String
    public enum Connection {
      public static let cloud: Swift.String
      public static let direct: Swift.String
      public static let lost: Swift.String
    }
    public enum Deletion {
      public static func deleteAlertMessage(_ p1: Any, _ p2: Any) -> Swift.String
      public static let deleteAlertMessageAndroid: Swift.String
      public static let deleteAlertTitle: Swift.String
      public static let deleteButton: Swift.String
      public static let deleteConfirm: Swift.String
    }
    public enum Relay {
      public static let explanation: Swift.String
      public static let isOff: Swift.String
      public static let isOn: Swift.String
    }
    public enum Wifi {
      public static let disconnected: Swift.String
      public static let good: Swift.String
      public static let poor: Swift.String
    }
  }
  public enum DevicePlacement {
    public static let confirmButton: Swift.String
    public static let firstDeviceSetup: Swift.String
    public static let firstDeviceSetupStep1: Swift.String
    public static let firstDeviceSetupStep2: Swift.String
    public static let firstDeviceSetupStep2Imperial: Swift.String
    public static let firstDeviceSetupStep2Metric: Swift.String
    public static let remainingDevicesSetup: Swift.String
    public static let remainingDevicesSetupStep1Imprerial: Swift.String
    public static let remainingDevicesSetupStep1Metric: Swift.String
    public static let remainingDevicesSetupStep2: Swift.String
    public static let remainingDevicesSetupStep2Imperial: Swift.String
    public static let remainingDevicesSetupStep2Metric: Swift.String
    public static let remainingDevicesSetupStep3: Swift.String
    public static let remainingDevicesSetupStep4: Swift.String
  }
  public enum DevicePlacementNotice {
    public static let notice: Swift.String
    public static func noticeKnownZone(_ p1: Any) -> Swift.String
    public static func noticeKnownZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum DeviceSettings {
    public static let customizeDeviceDescription: Swift.String
    public static let customizeDeviceTitle: Swift.String
    public static let deviceInfoDescription: Swift.String
    public static let deviceInfoTitle: Swift.String
    public static let errorDeviceNotFound: Swift.String
    public static let removeDevice: Swift.String
    public static func removeDeviceName(_ p1: Any) -> Swift.String
    public static let technicalInformationSubtitleThread: Swift.String
    public static let technicalInformationSubtitleWifi: Swift.String
    public static let title: Swift.String
  }
  public enum Devices {
    public static let addNewDevice: Swift.String
    public static let addNewRoom: Swift.String
    public static let addNewZone: Swift.String
    public static let informationAutoUpdate: Swift.String
  }
  public enum EditDevice {
    public static let editDeviceNameHint: Swift.String
    public static let editDeviceTitle: Swift.String
  }
  public enum EditIcon {
    public static let header: Swift.String
  }
  public enum EditPlace {
    public static let category: Swift.String
    public static let color: Swift.String
    public static let deleteButton: Swift.String
    public static let deviceEngine: Swift.String
    public static let devices: Swift.String
    public static let devicesAndroid: Swift.String
    public static func devicesInZone(_ p1: Any, _ p2: Any) -> Swift.String
    public static func devicesInZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let editPlace: Swift.String
    public static let editPlaceAndroid: Swift.String
    public static let editPlaceDescription: Swift.String
    public static let enterName: Swift.String
    public static let icon: Swift.String
    public static let location: Swift.String
    public static let pluralDevicesAndroid: Swift.String
    public static let sensitivity: Swift.String
    public static let zeroDeviceAndroid: Swift.String
    public enum DeletePlace {
      public static let guideDescription2Android: Swift.String
      public static let guideDescription4Android: Swift.String
      public static let guideDescription6Android: Swift.String
      public static let guideDescriptionAndroid: Swift.String
    }
    public enum Deletion {
      public static func deleteAlertMessage(_ p1: Any) -> Swift.String
      public static let deleteAlertMessageAndroid: Swift.String
      public static let deleteAlertTitle: Swift.String
      public static let deleteButton: Swift.String
      public static let deleteConfirm: Swift.String
    }
    public enum LeavePlace {
      public static let guideDescription4Android: Swift.String
      public static let guideTitle: Swift.String
    }
  }
  public enum EditProfile {
    public static func loadFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func saveFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum EditRoom {
    public static let category: Swift.String
    public static let deleteButton: Swift.String
    public static let deleteDisabledHint: Swift.String
    public static func deleteFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func deleteZoneFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let editRoom: Swift.String
    public static let enterName: Swift.String
    public static let icon: Swift.String
    public static func loadFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func saveFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public enum Deletion {
      public static let deleteRoomAlertMessage: Swift.String
      public static let deleteZoneAlertMessage: Swift.String
    }
  }
  public enum EditUserProfile {
    public static let chooseImageColor: Swift.String
    public static let chooseProfileImage: Swift.String
    public static let emptyErrorMessage: Swift.String
    public static let placeholder: Swift.String
    public static let profileName: Swift.String
    public static let title: Swift.String
  }
  public enum EditZone {
    public static let deleteAlertDescription: Swift.String
    public static let deleteAlertTitle: Swift.String
    public static let deleteButton: Swift.String
    public static let deleteDisabledHint: Swift.String
    public static let editZone: Swift.String
    public static let enterName: Swift.String
  }
  public enum EngineSettings {
    public static let engineSettingsDescription: Swift.String
    public static let motionEngine: Swift.String
    public static let motionEngineDescription: Swift.String
    public static let saveButton: Swift.String
    public static let securityEngine: Swift.String
    public static let securityEngineDescription: Swift.String
    public static let title: Swift.String
  }
  public enum Error {
    public static let noInternetConnection: Swift.String
  }
  public enum Errors {
    public enum Authentication {
      public static let loginRequired: Swift.String
      public static let title: Swift.String
    }
    public enum LinkingError {
      public static let responseParseError: Swift.String
      public static let title: Swift.String
    }
    public enum MoveDeviceError {
      public static let noDeviceSelected: Swift.String
      public static let title: Swift.String
    }
    public enum NetworkError {
      public static func conflict(_ p1: Any) -> Swift.String
      public static func connectionError(_ p1: Any) -> Swift.String
      public static func invalidParameters(_ p1: Any) -> Swift.String
      public static func notFound(_ p1: Any) -> Swift.String
      public static func serverError(_ p1: Any) -> Swift.String
      public static let title: Swift.String
      public static func unauthorized(_ p1: Any) -> Swift.String
      public static func unknown(_ p1: Any) -> Swift.String
    }
    public enum Pairing {
      public static let timedOutConnectWifi: Swift.String
      public enum DeviceNotFound {
        public static let description: Swift.String
        public static let title: Swift.String
      }
      public enum IncorrectWifiPassword {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
    public enum PairingErrorDevice {
      public static let cloudChallengeError: Swift.String
      public static let secureSessionError: Swift.String
      public static let threadJoinError: Swift.String
      public static let threadScanError: Swift.String
      public static let title: Swift.String
      public static let unknownUnrecognized: Swift.String
      public static let wifiJoinError: Swift.String
      public static let wifiJoinIpError: Swift.String
      public static let wifiJoinPasswordError: Swift.String
      public static let wifiScanError: Swift.String
    }
    public enum PairingMachine {
      public static let deserializationError: Swift.String
      public static let encryptionError: Swift.String
      public static let seanceError: Swift.String
      public static let serializationError: Swift.String
      public static let title: Swift.String
      public static let unexpectedMessage: Swift.String
      public static let unexpectedState: Swift.String
    }
    public enum PairingThreadSetupError {
      public static let mixedEnvironment: Swift.String
      public static let threadNetworkNotFound: Swift.String
      public static let threadOperationalDatasetMissing: Swift.String
    }
  }
  public enum ExternalSignin {
    public static let checkIfUsersRequest: Swift.String
    public static let confirmRequest: Swift.String
    public static let confirmedTitle: Swift.String
    public static func fromLocation(_ p1: Any) -> Swift.String
    public static func onOs(_ p1: Any) -> Swift.String
    public static let rejectRequest: Swift.String
    public static let requestedTitle: Swift.String
    public static func signinRequestPeekDescription(_ p1: Any, _ p2: Any, _ p3: Any, _ p4: Any) -> Swift.String
    public static let succe: Swift.String
    public static let successMessage: Swift.String
    public static func withBrowser(_ p1: Any) -> Swift.String
    public enum RequestCode {
      public static let codeScreenTitle: Swift.String
      public static let grantAccess: Swift.String
      public static let instructions: Swift.String
      public static let pasteboardAccessExplained: Swift.String
    }
  }
  public enum Faq {
    public static let title: Swift.String
  }
  public enum General {
    public static let and: Swift.String
    public static let at: Swift.String
    public static let camera: Swift.String
    public static let cancel: Swift.String
    public static let delete: Swift.String
    public static let deleting: Swift.String
    public static let discard: Swift.String
    public static let discardChanges: Swift.String
    public static let discardChangesDescription: Swift.String
    public static let done: Swift.String
    public static let error: Swift.String
    public static let errorDescription: Swift.String
    public static let intrusionTriggered: Swift.String
    public static let loading: Swift.String
    public static let more: Swift.String
    public static let move: Swift.String
    public static let next: Swift.String
    public static let no: Swift.String
    public static let notification: Swift.String
    public static let ok: Swift.String
    public static let save: Swift.String
    public static let saving: Swift.String
    public static let success: Swift.String
    public static let unavailable: Swift.String
    public static let yes: Swift.String
    public static func zones(_ p1: Swift.Int) -> Swift.String
  }
  public enum Hint {
    public enum Issue {
      public static func alarmIssues(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func pluralSystemIssues(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func singularSystemIssue(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum Homepage {
    public enum EmptyPlace {
      public static let createPlace: Swift.String
      public static func welcome(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum IntrusionEventReport {
    public static let intrusionHistory: Swift.String
  }
  public enum IntrusionHistory {
    public static let errorDataNotFound: Swift.String
    public static let humanMotion: Swift.String
    public static let noMotion: Swift.String
    public static func timestamp(_ p1: Any) -> Swift.String
    public static let title: Swift.String
  }
  public enum IntrusionLiveView {
    public static let noActivitySinceIntrusionBega: Swift.String
  }
  public enum InvitationDetail {
    public static let acceptButton: Swift.String
    public static let agreementDetails: Swift.String
    public static let cancelButton: Swift.String
    public static let declineButton: Swift.String
    public static func hello(_ p1: Any) -> Swift.String
    public static func helloAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let inviteFound: Swift.String
    public static let inviteNotFound: Swift.String
    public static func question(_ p1: Any) -> Swift.String
    public static func questionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let retrievingInviteDetails: Swift.String
    public static let role: Swift.String
  }
  public enum InviteDetails {
    public static let askRevokeButton: Swift.String
    public static let askShareButton: Swift.String
    public static let confirmRevokeButton: Swift.String
    public static func inviteExpirationText(_ p1: Any) -> Swift.String
    public static func inviteExpirationTextAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let inviteExpired: Swift.String
    public static func inviteExpiresInText(_ p1: Any) -> Swift.String
    public static func inviteExpiresInTextAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func inviteTitle(_ p1: Any) -> Swift.String
    public static func inviteTitleAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func revokeAlertMessage(_ p1: Any) -> Swift.String
    public static func revokeAlertMessageAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let revokeAlertTitle: Swift.String
  }
  public enum JoinPlace {
    public static let cameraPermissionGuide: Swift.String
    public static let invalidInvite: Swift.String
    public static let invalidQrCode: Swift.String
    public static let inviteFound: Swift.String
    public static let retrievingInvite: Swift.String
    public static func roleGuide(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let roleGuideAdmin: Swift.String
    public static let scanAgain: Swift.String
    public static let scanInviteQr: Swift.String
  }
  public enum LetsAddDevice {
    public static let chooseRoom: Swift.String
    public static let createRoom: Swift.String
    public static let dismissScreen: Swift.String
    public static let header: Swift.String
  }
  public enum ManageDevices {
    public static let emptyPlace: Swift.String
  }
  public enum MotionHistory {
    public static let activeTime: Swift.String
    public static let activeZones: Swift.String
    public static let deviceIssue: Swift.String
    public static let duration: Swift.String
    public static func formatHour(_ p1: Swift.Int) -> Swift.String
    public static func formatHours(_ p1: Swift.Int) -> Swift.String
    public static func formatMinute(_ p1: Swift.Int) -> Swift.String
    public static func formatSecond(_ p1: Swift.Int) -> Swift.String
    public static let intensity: Swift.String
    public static let monitorWasDegradedDueToDeviceIssue: Swift.String
    public static let monitorWasDegradedInZonesWithDeviceIssue: Swift.String
    public static let monitorWasDisabledDueToDeviceIssue: Swift.String
    public static let monitorWasDisabledInZonesWithDeviceIssue: Swift.String
    public static let motion: Swift.String
    public static let noData: Swift.String
    public static let noMotion: Swift.String
    public static let notAvailable: Swift.String
    public static let sensingDataNotAvailable: Swift.String
    public static let title: Swift.String
    public static let today: Swift.String
    public enum Tile {
      public static let history: Swift.String
      public static let today: Swift.String
      public static let totalActiveTime: Swift.String
    }
  }
  public enum MotionNow {
    public static let connectToWifi: Swift.String
    public static let connectToWifiAsZone: Swift.String
    public static let connectToWifiYourDeviceUsing: Swift.String
    public static func formatActiveZones(_ p1: Swift.Int) -> Swift.String
    public static func formatActiveZonesAndroid(_ p1: Swift.Int) -> Swift.String
    public static let goToWifiSettings: Swift.String
    public static let howPlaceGraphWorks: Swift.String
    public static let howPlaceGraphWorksDescription: Swift.String
    public static let intensity: Swift.String
    public static let max: Swift.String
    public static let min: Swift.String
    public static let motionDetectedIn: Swift.String
    public static let noSensingData: Swift.String
    public static let now: Swift.String
    public static let thirtySecsAgo: Swift.String
    public static let title: Swift.String
    public enum Tile {
      public static let connectToWifi: Swift.String
      public static let more: Swift.String
      public static let movementDetected: Swift.String
      public static let noMovementDetected: Swift.String
      public static let noSensingData: Swift.String
      public static func numberOfActiveZones(_ p1: Any) -> Swift.String
      public static func numberOfActiveZonesAndroid(_ p1: Swift.Int) -> Swift.String
      public static let toViewMotionNow: Swift.String
    }
  }
  public enum NewInvite {
    public static let generateInviteButton: Swift.String
    public static let inviteDescription: Swift.String
    public static let inviteTitle: Swift.String
    public static let inviteeNamePlaceholder: Swift.String
    public static let inviteeNameTitle: Swift.String
  }
  public enum Notification {
    public static let goToSettings: Swift.String
    public static func missingPermission(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func missingPermissionDesc(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let permissionGuide: Swift.String
  }
  public enum PairDevice {
    public static let goToSettings: Swift.String
    public static func missingPermission(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func missingPermissionDesc(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let permissionBluetooth: Swift.String
    public static let permissionLocationAndBluetooth: Swift.String
    public static let permissionLocationAndBluetoothUsages: Swift.String
  }
  public enum Pairing {
    public static let cameraPermissionGuide: Swift.String
    public static let cancel: Swift.String
    public static let done: Swift.String
    public static let exit: Swift.String
    public static let exitSetup: Swift.String
    public static let no: Swift.String
    public static let other: Swift.String
    public static let scanBluetoothError: Swift.String
    public static let success: Swift.String
    public enum AddAnotherNetwork {
      public static let title: Swift.String
    }
    public enum AskToConnect {
      public static let connectToWifi: Swift.String
      public static let connectToWifiFirstDescription: Swift.String
      public static func connectToWifiRemainingDescription(_ p1: Any) -> Swift.String
      public static let remainingThreadDevice: Swift.String
      public static let remainingThreadDeviceDescription: Swift.String
      public static let threadBorderRouter: Swift.String
      public static let threadBorderRouterDescription: Swift.String
      public enum FirstThreadDevice {
        public static let description1: Swift.String
        public static let description2: Swift.String
        public static let description3: Swift.String
      }
      public enum FirstWifiDevice {
        public static func description1(_ p1: Any) -> Swift.String
        public static let description2: Swift.String
      }
      public enum NonFirstThreadDevice {
        public static let description1: Swift.String
        public static let description2: Swift.String
        public static func description3(_ p1: Any) -> Swift.String
      }
      public enum NonFirstWifiDevice {
        public static func description1(_ p1: Any) -> Swift.String
      }
      public enum WifiDeviceImperialDistance {
        public static let description: Swift.String
      }
      public enum WifiDeviceMetricDistance {
        public static let description: Swift.String
      }
    }
    public enum AskToConnectToWifi {
      public static let header: Swift.String
      public static let useSameWifi: Swift.String
      public static func useSameWifiAsZone(_ p1: Any) -> Swift.String
    }
    public enum BluetoothDeviceFound {
      public static let explainedReadyToPair: Swift.String
      public static let header1: Swift.String
      public static func header1Known(_ p1: Any) -> Swift.String
      public static func header1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let header2: Swift.String
      public static let headerConnectToPower: Swift.String
      public static let nameDeviceExplained: Swift.String
      public static func nameDeviceHeader(_ p1: Any) -> Swift.String
      public static let nextButton: Swift.String
    }
    public enum BluetoothUsageHint {
      public static let confirm: Swift.String
      public static let header: Swift.String
    }
    public enum ConfirmCancelPairing {
      public static let description: Swift.String
      public static let title: Swift.String
    }
    public enum ConnectSuccess {
      public static func deviceHasBeenSetupInZone(_ p1: Any, _ p2: Any) -> Swift.String
      public static let setupAnotherDevice: Swift.String
    }
    public enum ConnectWifi {
      public static func inputPassword(_ p1: Any) -> Swift.String
      public static let noWiFiNetworksFound: Swift.String
      public static let setUpAsBorderRouter: Swift.String
      public static let settingUpThisDevice: Swift.String
      public static let settingUpYourDevice: Swift.String
      public static let title: Swift.String
    }
    public enum DeviceSetup {
      public static let navigagtionTitle: Swift.String
    }
    public enum EnableBluetoothInSettings {
      public static let bluetoothDisabled: Swift.String
      public static let buttonSettings: Swift.String
      public static let header: Swift.String
    }
    public enum EnterWifiPassword {
      public static let buttonGoBack: Swift.String
      public static let buttonReadyToConnect: Swift.String
      public static let enterPassword: Swift.String
      public static func header(_ p1: Any) -> Swift.String
      public static func headerAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let passwordEntryFieldHint: Swift.String
      public static let passwordPlaceholder: Swift.String
    }
    public enum Errors {
      public static let actionIgnore: Swift.String
      public static let actionRestart: Swift.String
      public static let actionTryAgain: Swift.String
      public static func errorOccurredDescription(_ p1: Any) -> Swift.String
      public static func errorOccurredDescriptionAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let errorOccurredTitle: Swift.String
    }
    public enum ExitDeviceSetup {
      public static let description: Swift.String
      public static let title: Swift.String
    }
    public enum FinishingSetup {
      public static let gameOfPong: Swift.String
      public static let header: Swift.String
    }
    public enum ListWifiNetworks {
      public static let apOutOfReach: Swift.String
      public static let availableNetworks: Swift.String
      public static let buttonCancelPairing: Swift.String
      public static let buttonContinue: Swift.String
      public static let buttonOtherNetwork: Swift.String
      public static let buttonRefresh: Swift.String
      public static let connectWifiTitle: Swift.String
      public static let forget: Swift.String
      public static let foundSavedPassword: Swift.String
      public static let header: Swift.String
      public static func header2Android(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func header2BssidPinnedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let lookingForNetworks: Swift.String
      public static let noNetworksFound: Swift.String
      public static let proceed: Swift.String
      public static let retryingForNetworks: Swift.String
      public static let selectNetwork: Swift.String
      public static func useSavedPassword(_ p1: Any) -> Swift.String
      public static func useSavedPasswordAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let warning: Swift.String
    }
    public enum LoadingDevice {
      public static func connecting(_ p1: Any) -> Swift.String
    }
    public enum MultizonesGuide {
      public static let alertModesExplanation: Swift.String
      public static let cancelPairingButton: Swift.String
      public static let continueButton: Swift.String
      public static let enterFirstZoneName: Swift.String
      public static let invitation: Swift.String
      public static let keepSingleZoneButton: Swift.String
      public static let keepSingleZoneDescription: Swift.String
      public static let nameSecondZoneDescription: Swift.String
      public static let renameDefaultZoneDescription: Swift.String
      public static let severalZonesExplanation: Swift.String
      public static let shortDescription: Swift.String
      public static let skipExplanationButton: Swift.String
      public static let updateToMultizones: Swift.String
      public static let upgradeToMultizonesButton: Swift.String
    }
    public enum OtherWifiNetwork {
      public static let buttonBack: Swift.String
      public static let deviceConnectivityHint: Swift.String
      public static let header: Swift.String
      public static let networkNamePlaceholder: Swift.String
    }
    public enum PairedSuccessfully {
      public static let buttonDone: Swift.String
      public static let buttonPairAnother: Swift.String
      public static let buttonReturn: Swift.String
      public static let buttonUpdateAnother: Swift.String
      public static let header1: Swift.String
      public static func header1Known(_ p1: Any) -> Swift.String
      public static func header1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let header2: Swift.String
      public static func header2Known(_ p1: Any) -> Swift.String
      public static func header2KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let header3: Swift.String
    }
    public enum PowerOnAndScanning {
      public static let askUserToWait: Swift.String
      public static let header1: Swift.String
      public static let header2: Swift.String
      public static let scanning: Swift.String
    }
    public enum ScanDevice {
      public static let connectingToThisDevice: Swift.String
      public static let pleaseHold: Swift.String
      public static let searchingForDevice: Swift.String
      public enum MissingBluetoothLocationPermissions {
        public static let description: Swift.String
        public static let title: Swift.String
      }
      public enum MissingBluetoothPermission {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
    public enum ScanQr {
      public static let subtitle: Swift.String
      public static let title: Swift.String
      public enum CodeError {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
    public enum ScanQrcode {
      public enum MissingCameraPermission {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
  }
  public enum Paring {
    public static let bluetoothIsOff: Swift.String
    public static let explanationTurnOnBluetooth: Swift.String
    public enum ScanDevice {
      public enum BluetoothIsOff {
        public static let description: Swift.String
        public static let title: Swift.String
      }
    }
  }
  public enum Place {
    public static let pairOneMoreDeviceToUnlockTheMotionSensing: Swift.String
  }
  public enum PlaceCreation {
    public static let errorNoCategory: Swift.String
    public static let header: Swift.String
    public enum Customize {
      public static let colorSelection: Swift.String
      public static let header: Swift.String
    }
    public enum Floor {
      public static let description: Swift.String
      public static func floorNumberAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let header: Swift.String
    }
    public enum Name {
      public static let description: Swift.String
      public static let editHint: Swift.String
      public static let error: Swift.String
      public static let header: Swift.String
    }
    public enum Size {
      public static let description: Swift.String
      public static let header: Swift.String
    }
    public enum Zone {
      public static func defaultNameMultipleFloor(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let defaultNameSingleFloor: Swift.String
    }
  }
  public enum PlaceDetails {
    public static let changePlaceModeToArmedContainDegradedDescription: Swift.String
    public static let changePlaceModeToArmedContainUnhealthyDescription: Swift.String
    public static let changePlaceModeToAwareContainDegradedDescription: Swift.String
    public static let changePlaceModeToAwareContainUnhealthyDescription: Swift.String
    public static let customize: Swift.String
    public static func formatDisconnectedDeviceInMultipleZoneAndroid(_ p1: Swift.Int) -> Swift.String
    public static let getHelp: Swift.String
    public static let noDevicesPaired: Swift.String
    public static let offline: Swift.String
    public static func offlineDeviceNotification(_ p1: Swift.Int) -> Swift.String
    public static let placeMode: Swift.String
    public static func proceedWithDegradedZones(_ p1: Swift.Int) -> Swift.String
    public static func proceedWithDisabledZones(_ p1: Swift.Int) -> Swift.String
    public static let securityMode: Swift.String
    public static let securityModeDescription: Swift.String
    public static let sensingLinkBrokenInMultipleZone: Swift.String
    public static let sensingLinkBrokenInOneZone: Swift.String
    public static let sensorsAreNotResponding: Swift.String
    public static let yesProceed: Swift.String
    public static func zoneInMode(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum PlaceEvents {
    public static func disarmedBy(_ p1: Any) -> Swift.String
    public static func disarmedByAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let downloadingHistory: Swift.String
    public static func emptyHistoryPlaceholder(_ p1: Any) -> Swift.String
    public static func emptyHistoryPlaceholderAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let eventsHistory: Swift.String
    public enum Message {
      public static func intrusion(_ p1: Any, _ p2: Any, _ p3: Any, _ p4: Any) -> Swift.String
      public static func userJoined(_ p1: Any, _ p2: Any) -> Swift.String
      public static func userJoinedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func userLeft(_ p1: Any, _ p2: Any) -> Swift.String
      public static func userLeftAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func userRemoved(_ p1: Any, _ p2: Any, _ p3: Any) -> Swift.String
      public static func userRemovedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>, _ p3: Swift.UnsafePointer<Swift.CChar>, _ p4: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
    public enum Title {
      public static let intrusion: Swift.String
      public static func userJoined(_ p1: Any) -> Swift.String
      public static func userJoinedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func userLeft(_ p1: Any) -> Swift.String
      public static func userLeftAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func userRemoved(_ p1: Any) -> Swift.String
      public static func userRemovedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum PlaceInformation {
    public static let avgFloorArea: Swift.String
    public static let floors: Swift.String
    public static let name: Swift.String
    public static let title: Swift.String
    public static let type: Swift.String
  }
  public enum PlaceIntegrations {
    public static func descriptionPlaceholder(_ p1: Any) -> Swift.String
    public static let enablingPlaceholder: Swift.String
    public static func integrationIs(_ p1: Any) -> Swift.String
    public static let integrations: Swift.String
    public static let isDisabled: Swift.String
    public static let isEnabled: Swift.String
    public static let wantDisable: Swift.String
  }
  public enum PlaceOverview {
    public static func disconnectedDevices(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
    public static let motion: Swift.String
    public static let pairKitUnlockMotionSensing: Swift.String
    public static let resumeSetupKitButton: Swift.String
    public static let setupKitButton: Swift.String
    public static let zones: Swift.String
    public enum Graph {
      public static let legendBarFourHour: Swift.String
      public static let legendBarThiryMin: Swift.String
      public static let legendBarThirySec: Swift.String
      public static let legendBarTwelveHour: Swift.String
      public static let now: Swift.String
      public static let pairOneMore: Swift.String
      public static let pairTwoDevices: Swift.String
      public static let thirtySecsAgo: Swift.String
    }
    public enum IntrusionDetection {
      public static func endTime(_ p1: Any) -> Swift.String
      public static func endTimeFormatHour(_ p1: Swift.Int) -> Swift.String
      public static func endTimeFormatMinute(_ p1: Swift.Int) -> Swift.String
      public static func startTime(_ p1: Any) -> Swift.String
      public static let title: Swift.String
    }
    public enum PairingRequest {
      public static let addDeviceButton: Swift.String
      public static let addMoreHint: Swift.String
      public static let continuePairingButton: Swift.String
      public static let setupAKit: Swift.String
      public static let setupAKitGuide: Swift.String
    }
    public enum Picker {
      public static let fourHr: Swift.String
      public static let thirtyMin: Swift.String
      public static let thirtySec: Swift.String
      public static let twelveHr: Swift.String
    }
  }
  public enum PlaceProperties {
    public static let apartment: Swift.String
    public static let house: Swift.String
  }
  public enum PlaceSetting {
    public static let placeInformation: Swift.String
    public enum EditPlace {
      public static let toolbar: Swift.String
    }
    public enum Header {
      public static let general: Swift.String
      public static let setup: Swift.String
      public static let setupADeviceDescription: Swift.String
      public static let setupADeviceTitle: Swift.String
      public static let setupAKitDescriptionDisableNonFirstKit: Swift.String
      public static let setupAKitDescriptionDisableOldPlace: Swift.String
      public static let setupAKitDescriptionEnable: Swift.String
      public static let setupAKitTitle: Swift.String
    }
    public enum PlaceInformation {
      public static let description: Swift.String
      public static let editName: Swift.String
      public static let floor: Swift.String
      public static let name: Swift.String
      public static let size: Swift.String
      public static let type: Swift.String
    }
  }
  public enum PlaceSettings {
    public static let customizePlaceDescription: Swift.String
    public static let deletePlaceButton: Swift.String
    public static func devicesInZones(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
    public static let editPlace: Swift.String
    public static let editPlaceAndroid: Swift.String
    public static let editPlaceDescription: Swift.String
    public static let engine: Swift.String
    public static let engineDoesNotSupportSensitivity: Swift.String
    public static let featureUnlockWarning: Swift.String
    public static let leavePlaceButton: Swift.String
    public static func manageDevices(_ p1: Swift.Int) -> Swift.String
    public static let motion: Swift.String
    public static func numberOfDevices(_ p1: Swift.Int) -> Swift.String
    public static let onlyAvailableForFirstKit: Swift.String
    public static let placeSettings: Swift.String
    public static let sectionGeneral: Swift.String
    public static let sectionSetup: Swift.String
    public static let security: Swift.String
    public static let sensitivity: Swift.String
    public static func sensitivityLevel(_ p1: Any) -> Swift.String
    public static let setupKit: Swift.String
    public static let setupKitDescription: Swift.String
    public static let setupSingleDevice: Swift.String
    public static let setupSingleDeviceDescription: Swift.String
    public static let title: Swift.String
    public static let updateWifiNetwork: Swift.String
    public static let updateWifiNetworkDescription: Swift.String
  }
  public enum PlaceTileView {
    public static func disconnectedDevices(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
  }
  public enum PlaceUsers {
    public enum Invitation {
      public static let invitePeople: Swift.String
      public static func usersLimitReached(_ p1: Any) -> Swift.String
      public static func usersLimitReachedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
    public enum Role {
      public static let role: Swift.String
    }
  }
  public enum Places {
    public static let title: Swift.String
    public enum Category {
      public static let apartment: Swift.String
      public static let eating: Swift.String
      public static let house: Swift.String
      public static let shopping: Swift.String
      public static let unknown: Swift.String
      public static let work: Swift.String
    }
  }
  public enum Profile {
    public static let about: Swift.String
    public static let authentication: Swift.String
    public static let copied: Swift.String
    public static let copyRecoveryKey: Swift.String
    public static let goConfirmSigninRequest: Swift.String
    public static let helpAndFeedback: Swift.String
    public static let joined: Swift.String
    public static let legal: Swift.String
    public static let linkAccountGuideText: Swift.String
    public static let linked3rdPartyAccount: Swift.String
    public static let noLinkedAccountsMessage: Swift.String
    public static let privacyPolicy: Swift.String
    public static let recoveryInfoTitle: Swift.String
    public static let recoveryKey: Swift.String
    public static let recoveryKeyHint: Swift.String
    public static let sectionTitleAccount: Swift.String
    public static let sectionTitleHelp: Swift.String
    public static let sendTestPush: Swift.String
    public static let signOut: Swift.String
    public static let supportArticles: Swift.String
    public static let termsOfServices: Swift.String
    public static let title: Swift.String
    public static let username: Swift.String
    public static let usernameMissing: Swift.String
    public static let usernameYou: Swift.String
    public enum AccountManagement {
      public static let accountDeletionDescription: Swift.String
      public static let confirmAccountDeletion: Swift.String
      public static let deleteAccountAlertDescription: Swift.String
      public static let deleteAccountAlertTitle: Swift.String
      public static let deleteAccountButton: Swift.String
      public static let title: Swift.String
    }
    public enum Unlink {
      public static let alertConfirm: Swift.String
      public static let alertMessage: Swift.String
      public static let alertMessageAndroid: Swift.String
      public static let alertTitle: Swift.String
    }
  }
  public enum Push {
    public static let registerPushTokenFailed: Swift.String
  }
  public enum Qrscanner {
    public static let help: Swift.String
    public static let title: Swift.String
    public static let whereQr: Swift.String
  }
  public enum RecoverKey {
    public static let goBack: Swift.String
  }
  public enum Recovery {
    public static let buttonRecover: Swift.String
    public static let error: Swift.String
    public static let recoveryKeyPlaceholder: Swift.String
    public static let textGuide: Swift.String
  }
  public enum RemoveDevice {
    public static let changeThreadNetwork: Swift.String
    public static func changeThreadNetworkDescription(_ p1: Any) -> Swift.String
    public static let dataRemovedWarningThread: Swift.String
    public static let dataRemovedWarningWifi: Swift.String
    public static let disableSensingFunction: Swift.String
    public static func disableSensingFunctionDescription(_ p1: Any) -> Swift.String
    public static func removeDeviceName(_ p1: Any) -> Swift.String
    public static let removeThisDevice: Swift.String
    public static let removeThreadNetwork: Swift.String
    public static func removeThreadNetworkDescription(_ p1: Any) -> Swift.String
    public static func restoreSensingInZone(_ p1: Any) -> Swift.String
    public static let restoreSensingInZoneDescription: Swift.String
  }
  public enum ReportFalseAlarm {
    public static let reportingAsFalseAlarmWillAlsoDisarmTheIntrusion: Swift.String
    public static let theIntrusionWasTriggeredBy: Swift.String
  }
  public enum RoomSelection {
    public static let confirmButton: Swift.String
    public static let description: Swift.String
    public static let title: Swift.String
  }
  public enum Rooms {
    public enum Category {
      public static let bathroom: Swift.String
      public static let bedroom: Swift.String
      public static let kitchen: Swift.String
      public static let livingRoom: Swift.String
      public static let other: Swift.String
      public static let unknown: Swift.String
    }
  }
  public enum SecurityMode {
    public static let addMoreZoneToShowZoneSettings: Swift.String
    public static let degradedZone: Swift.String
    public static let disabled: Swift.String
    public static let disabledZone: Swift.String
    public static let discard: Swift.String
    public static let discardChanges: Swift.String
    public static let discardChangesDescription: Swift.String
    public static func placeDeviceOffline(_ p1: Swift.Int) -> Swift.String
    public static let statusArmedDescription: Swift.String
    public static let statusAwareDescription: Swift.String
    public static let statusRelaxedDescription: Swift.String
    public static let zoneMode: Swift.String
    public static let zoneModeDescription: Swift.String
  }
  public enum SelectFloorArea {
    public static let description: Swift.String
    public static let header: Swift.String
    public static let option1Imperial: Swift.String
    public static let option1Metric: Swift.String
    public static let option2Imperial: Swift.String
    public static let option2Metric: Swift.String
    public static let option3Imperial: Swift.String
    public static let option3Metric: Swift.String
    public static let option4Imperial: Swift.String
    public static let option4Metric: Swift.String
  }
  public enum SelectFloorNumber {
    public static let description: Swift.String
    public static let header: Swift.String
  }
  public enum SelectKit {
    public static let description: Swift.String
    public static let monitoringKit: Swift.String
    public static let monitoringKitDescription: Swift.String
    public static let securityKit: Swift.String
    public static let securityKitDescription: Swift.String
    public static let title: Swift.String
  }
  public enum SelectPlaceIcon {
    public static let header: Swift.String
  }
  public enum SelectPlaceTheme {
    public static let header: Swift.String
  }
  public enum SelectPlaceType {
    public static let description: Swift.String
    public static let header: Swift.String
  }
  public enum SelectRoomCategory {
    public static let header: Swift.String
  }
  public enum SelectRoomIcon {
    public static let header: Swift.String
  }
  public enum SelectUserIcon {
    public static let chooseImageColor: Swift.String
    public static let chooseProfileImage: Swift.String
    public static let promptMessage: Swift.String
  }
  public enum SelectZone {
    public static let description: Swift.String
    public static func formatThreadDevices(_ p1: Any) -> Swift.String
    public static func formatWifiDevices(_ p1: Any) -> Swift.String
    public static let title: Swift.String
  }
  public enum SensitivitySettings {
    public static let descriptionUnavailable: Swift.String
    public static let fourToSix: Swift.String
    public static let fourToSixDescription: Swift.String
    public static func levelAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let maxTitle: Swift.String
    public static let maxTitleAndroid: Swift.String
    public static let minTitle: Swift.String
    public static let minTitleAndroid: Swift.String
    public static let oneToThree: Swift.String
    public static let oneToThreeDescription: Swift.String
    public static let saveSensitivtyButtonTitle: Swift.String
    public static let sensitivityLevelDescription: Swift.String
    public static let sevenToNine: Swift.String
    public static let sevenToNineDescription: Swift.String
    public static let success: Swift.String
    public static let tenToTwelve: Swift.String
    public static let tenToTwelveDescription: Swift.String
    public static let testSensitivityButtonTitle: Swift.String
    public static let title: Swift.String
    public enum Engine {
      public static let unavailable: Swift.String
    }
  }
  public enum SetupADevice {
    public static let toolbarTittle: Swift.String
    public enum RoomSelection {
      public static let subTittle: Swift.String
      public static let tittle: Swift.String
    }
  }
  public enum SetupAKit {
    public static let featureNotAvailableDescription: Swift.String
    public static let featureNotAvailableHeader: Swift.String
    public static let howDeviceWorksGuideContent1: Swift.String
    public static let howDeviceWorksGuideContent2: Swift.String
    public static let howDeviceWorksGuideContent3: Swift.String
    public static let howDeviceWorksGuideContent4: Swift.String
    public static let howDeviceWorksGuideContent5: Swift.String
    public static let howDeviceWorksStart: Swift.String
    public static let toolbarTittle: Swift.String
    public enum HowDeviceWork {
      public static let description: Swift.String
      public static let subTittle: Swift.String
      public static let tittle: Swift.String
    }
    public enum HowToPlaceDevice {
      public static let guideContent1FirstPairedDevice: Swift.String
      public static let guideContent1NonFirstPairedDeviceImperial: Swift.String
      public static let guideContent1NonFirstPairedDeviceMetric: Swift.String
      public static let guideContent2FirstPairedDeviceImperial: Swift.String
      public static let guideContent2FirstPairedDeviceMetric: Swift.String
      public static let guideContent2FirstPairedDeviceSecurityKit: Swift.String
      public static let guideContent2NonFirstPairedDeviceImperial: Swift.String
      public static let guideContent2NonFirstPairedDeviceMetric: Swift.String
      public static let guideContent3NonFirstPairedDevice: Swift.String
      public static let guideContent4NonFirstPairedDevice: Swift.String
      public static let guideFirstDevice: Swift.String
      public static let guideFirstDeviceInZone: Swift.String
      public static let guideNonFirstDevice: Swift.String
      public static let nonFirstPairedDeviceGuideContent1: Swift.String
      public static let nonFirstPairedDeviceGuideContent2Imperial: Swift.String
      public static let nonFirstPairedDeviceGuideContent2Metric: Swift.String
      public static let sensingZone: Swift.String
      public static let subTittle: Swift.String
      public static let tittle: Swift.String
    }
    public enum KitSelection {
      public static let subTittle: Swift.String
      public static let tittle: Swift.String
    }
    public enum WhereToSetup {
      public static let addGuide: Swift.String
      public static let firstFloor: Swift.String
      public static let oneFloorTitle: Swift.String
      public static func placeSizeLargeCoverage1Floor(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func placeSizeLargeCoverageMoreFloors(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let placeSizeSmallCoverage1Floor: Swift.String
      public static func placeSizeSmallCoverageMoreFloors(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let subTittleFloorBigSize: Swift.String
      public static let subTittleFloorSmallSize: Swift.String
      public static let subTittleMoreFloorMonitoring: Swift.String
      public static let subTittleMoreFloorSecurity: Swift.String
      public static let subtitleMonitorOneFloorBigSize: Swift.String
      public static let subtitleOneFloorSmallSize: Swift.String
      public static let subtitleSecurityOneFloorBigSize: Swift.String
      public static let tittle: Swift.String
    }
  }
  public enum SetupKit {
    public static let title: Swift.String
  }
  public enum SignUp {
    public static let anonymousAccountText: Swift.String
    public static let anonymousAccountText1: Swift.String
    public static let anonymousAccountText2: Swift.String
    public static let anonymousAccountText3: Swift.String
    public static let buttonRecoveryKey: Swift.String
    public static let buttonSignUp: Swift.String
    public static let buttonSignUpAnonymous: Swift.String
    public static let continueWithApple: Swift.String
    public static let continueWithGoogle: Swift.String
    public static let otherSignUpOptions: Swift.String
    public static let privacyPolicy: Swift.String
    public static let termsOfService: Swift.String
    public static let tosAndPrivacy: Swift.String
    public static let tosAndPrivacyPart1: Swift.String
    public static let tosAndPrivacyPart2: Swift.String
    public static let tosAndPrivacyPart2Android: Swift.String
    public static let tosAndPrivacyPart3: Swift.String
    public static let tosAndPrivacyPart4: Swift.String
    public static let tosAndPrivacyPart4Android: Swift.String
    public static let unknownProvider: Swift.String
    public static let welcomeText: Swift.String
  }
  public enum Status {
    public static let alert: Swift.String
    public static let armedHint: Swift.String
    public static let armedHintDisabled: Swift.String
    public static let aware: Swift.String
    public static let awareHint: Swift.String
    public static func inSwitchingMode(_ p1: Any, _ p2: Any) -> Swift.String
    public static let relaxed: Swift.String
    public static let relaxedHint: Swift.String
  }
  public enum UpdateWifi {
    public static func deviceAlreadyUpdated(_ p1: Any) -> Swift.String
    public static func deviceNotInZone(_ p1: Any) -> Swift.String
    public static let locateDeviceButton: Swift.String
    public static func notNamiQrCode(_ p1: Any) -> Swift.String
    public static let notNamiQrCodeNoZone: Swift.String
    public static let plug: Swift.String
    public static let pod: Swift.String
    public static let qrCodeError: Swift.String
    public static let qrDoesNotMatch: Swift.String
    public static let repeatQrScan: Swift.String
    public static let resumeUpdate: Swift.String
    public static func resumeUpdateInstruction(_ p1: Any) -> Swift.String
    public static let title: Swift.String
    public enum HowItWorks {
      public static let confirmButton: Swift.String
      public static let description: Swift.String
      public static let help: Swift.String
      public static let instructionBulletPoint1: Swift.String
      public static let instructionBulletPoint2: Swift.String
      public static let instructionBulletPoint3: Swift.String
      public static let instructionBulletPoint4: Swift.String
      public static let instructionPart1: Swift.String
      public static let instructionPart2: Swift.String
      public static let instructionTitle: Swift.String
      public static let title: Swift.String
    }
    public enum ResetDevice {
      public static let confirmButton: Swift.String
      public static let description: Swift.String
      public static func howToReset(_ p1: Any) -> Swift.String
      public static let plugResetInstructions: Swift.String
      public static let plugResetInstructions1: Swift.String
      public static let plugResetInstructions2: Swift.String
      public static let plugResetInstructions3: Swift.String
      public static let plugResetInstructions4: Swift.String
      public static let podResetInstructions: Swift.String
      public static let podResetInstructions1: Swift.String
      public static let podResetInstructions2: Swift.String
      public static let podResetInstructions3: Swift.String
      public static let podResetInstructions4: Swift.String
      public static let title: Swift.String
    }
    public enum SelectZoneToUpdate {
      public static let confirmButton: Swift.String
      public static let description: Swift.String
      public static let nonThreadZoneSupport: Swift.String
      public static func numberOfDevices(_ p1: Any) -> Swift.String
      public static let selectZone: Swift.String
      public static let title: Swift.String
    }
    public enum ZoneDeviceCheck {
      public static let scanQr: Swift.String
    }
    public enum ZoneWifiUpdate {
      public static let confirmButton: Swift.String
      public static let congratulations: Swift.String
      public static let description: Swift.String
      public static let devicesUpdated: Swift.String
      public static let finishButton: Swift.String
      public static let lastDeviceDescription: Swift.String
      public static let locateDevice: Swift.String
      public static let locateLastDevice: Swift.String
      public static let sessionCompleted: Swift.String
      public static let title: Swift.String
      public static let updateAnotherZoneButton: Swift.String
      public static let updateSuccess: Swift.String
    }
  }
  public enum UpdateWifiNetwork {
    public static let howItWorksGuideSubtitle: Swift.String
    public static let resetDeviceGuidePlugType: Swift.String
    public static let resetDeviceGuidePod2: Swift.String
    public static let resetDeviceGuidePodType: Swift.String
    public static let zoneStatusGuideCompletedUpdate: Swift.String
    public static let zonesSelectionGuide: Swift.String
    public enum CommissioningMode {
      public static let customizePlace: Swift.String
    }
    public enum DeviceQrCode {
      public static func deviceAlreadyRepairedAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static func deviceNotInZoneAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
      public static let invalid: Swift.String
    }
    public enum UpdateSuccessfully {
      public static let header1: Swift.String
      public static func header1KnownAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    }
  }
  public enum UpgradeMultiZones {
    public static func createFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func loadDataFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func loadZoneFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func updateFailed(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
  }
  public enum UserDetails {
    public static let askLeavePlaceButton: Swift.String
    public static func askRemoveUserAlertMessage(_ p1: Any, _ p2: Any) -> Swift.String
    public static let askRemoveUserButton: Swift.String
    public static let confirmLeavePlaceButton: Swift.String
    public static let confirmRemoveUserButton: Swift.String
    public static func lastActive(_ p1: Any) -> Swift.String
    public static func lastActiveAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static func leavePlaceAlertMessage(_ p1: Any) -> Swift.String
    public static let leavePlaceAlertTitle: Swift.String
    public static func removeUserAlertMessage(_ p1: Any, _ p2: Any) -> Swift.String
    public static func removeUserAlertMessageAndroid(_ p1: Swift.UnsafePointer<Swift.CChar>, _ p2: Swift.UnsafePointer<Swift.CChar>) -> Swift.String
    public static let removeUserAlertTitle: Swift.String
    public static let removeUserButton: Swift.String
    public static let saveChangesButton: Swift.String
  }
  public enum Widar {
    public static let headerTitle: Swift.String
    public enum CancelPopup {
      public static let backToPositioningButton: Swift.String
      public static let cancelButton: Swift.String
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum Error {
      public static let deviceNotFoundMessage: Swift.String
      public static let exitButton: Swift.String
      public static let retryButton: Swift.String
      public static let title: Swift.String
    }
    public enum Info {
      public static let buttonText: Swift.String
      public static let infoAvoidMovingWhenOptimized: Swift.String
      public static let infoMustOptimisePosition: Swift.String
      public static let title: Swift.String
    }
    public enum Position {
      public static let cancelButton: Swift.String
      public static let finishButton: Swift.String
      public static let guideImperial: Swift.String
      public static let guideMetric: Swift.String
      public static let statusChecking: Swift.String
      public static let statusGettingBetter: Swift.String
      public static let statusLabel: Swift.String
      public static let statusMispositioned: Swift.String
      public static let statusOptimized: Swift.String
      public static let tip: Swift.String
      public static let title: Swift.String
    }
    public enum Recommendations {
      public static let buttonText: Swift.String
      public static let infoAttachBase: Swift.String
      public static let infoKeepAreaClear: Swift.String
      public static let infoWireOnBack: Swift.String
      public static let title: Swift.String
    }
    public enum Success {
      public static func contentMessage(_ p1: Any) -> Swift.String
      public static let doneButton: Swift.String
      public static let title: Swift.String
    }
  }
  public enum Zone {
    public static let defaultName: Swift.String
  }
  public enum ZoneChecks {
    public enum MotionSensing {
      public static let checkName: Swift.String
      public static let statusDisconnected: Swift.String
      public static let statusNotWorking: Swift.String
      public static let statusWorkingMotionDetected: Swift.String
      public static let statusWorkingMotionNotDetected: Swift.String
    }
    public enum ZoneHealth {
      public static let checkName: Swift.String
      public static let hintAssessingZoneHealth: Swift.String
      public static let hintCheckNeeded: Swift.String
      public static let hintWorksWell: Swift.String
      public static let statusDegraded: Swift.String
      public static let statusHealthy: Swift.String
      public static let statusUnhealthy: Swift.String
      public static let statusUnknown: Swift.String
    }
  }
  public enum ZoneSelection {
    public static let addYourKitTo: Swift.String
    public static let description: Swift.String
    public static let monitoringKitDescription: Swift.String
    public static let securityKitDescription: Swift.String
    public static let title: Swift.String
  }
}
public enum NamiDeviceCapability : Swift.Equatable {
  case deviceInformation
  case diagnostics
  case relay
  case sentinelAlarm
  case devkitLed
  case devkitAlarm
  case widar
  public var endpoint: DeviceConnections.NamiDeviceEndpoint {
    get
  }
  public static var `default`: [DeviceConnections.NamiDeviceCapability]
  public static var plug: [DeviceConnections.NamiDeviceCapability]
  public static var devkit: [DeviceConnections.NamiDeviceCapability]
  public static var pod: [DeviceConnections.NamiDeviceCapability]
  public static var widarSensor: [DeviceConnections.NamiDeviceCapability]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DeviceConnections.NamiDeviceCapability, b: DeviceConnections.NamiDeviceCapability) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct NamiDeviceEndpoint : Swift.Equatable {
  public enum EndpointType : Swift.Equatable {
    public enum ReadableCluster {
      case stateOnOff
      case stateColorControl
      case stateLevelControlForLighting
      case stateDeviceInfo
      case stateWarning
      case stateWifiInfo
      case stateThreadNetworkInfo
      case stateWiDar
      public static func == (a: DeviceConnections.NamiDeviceEndpoint.EndpointType.ReadableCluster, b: DeviceConnections.NamiDeviceEndpoint.EndpointType.ReadableCluster) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum WritableCluster {
      case changeOnOff
      case changeColorControl
      case changeLevelControlForLighting
      case changeWiDar
      public static func == (a: DeviceConnections.NamiDeviceEndpoint.EndpointType.WritableCluster, b: DeviceConnections.NamiDeviceEndpoint.EndpointType.WritableCluster) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public static func == (a: DeviceConnections.NamiDeviceEndpoint.EndpointType, b: DeviceConnections.NamiDeviceEndpoint.EndpointType) -> Swift.Bool
  }
  public var endpoint: Swift.Int32
  public var readable: [DeviceConnections.NamiDeviceEndpoint.EndpointType.ReadableCluster]
  public var writable: [DeviceConnections.NamiDeviceEndpoint.EndpointType.WritableCluster]
  public static func == (a: DeviceConnections.NamiDeviceEndpoint, b: DeviceConnections.NamiDeviceEndpoint) -> Swift.Bool
}
public enum MeasurementSystem {
  case metric
  case uk
  case us
  public static func == (a: DeviceConnections.MeasurementSystem, b: DeviceConnections.MeasurementSystem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUI.EnvironmentValues {
  public var measurementSystem: DeviceConnections.MeasurementSystem {
    get
  }
}
extension Foundation.Locale {
  public var systemOfMeasurements: Swift.String? {
    get
  }
  public static let metricMeasurementSystem: Swift.String
  public static let usMeasurementSystem: Swift.String
  public static let ukMeasurementSystem: Swift.String
}
public struct CodeLinkingInfo : Swift.Decodable, Swift.Equatable {
  public init(code: DeviceConnections.SignInCode, requestedAt: Foundation.Date, expiresAt: Foundation.Date, ip: Swift.String? = nil, browser: Swift.String? = nil, os: Swift.String? = nil, city: Swift.String? = nil, country: Swift.String? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public var code: DeviceConnections.SignInCode
  public var requestedAt: Foundation.Date
  public var expiresAt: Foundation.Date
  public var ip: Swift.String?
  public var browser: Swift.String?
  public var os: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public static func == (a: DeviceConnections.CodeLinkingInfo, b: DeviceConnections.CodeLinkingInfo) -> Swift.Bool
}
extension DeviceConnections.NamiDeviceModel {
  public static let preset: [DeviceConnections.NamiDeviceModel]
}
public enum NamiDeviceConnectivity {
  case hasWiFi
  case hasThread
  public static func == (a: DeviceConnections.NamiDeviceConnectivity, b: DeviceConnections.NamiDeviceConnectivity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.CharacterSet {
  public static var hexDigits: Foundation.CharacterSet
}
extension Swift.String {
  public func replacingCharacters(from characterSet: Foundation.CharacterSet, with replacement: Swift.String) -> Swift.String
}
public typealias TokenString = Swift.String
public typealias UserID = Swift.Int64
public typealias UserIconID = Swift.Int64
public typealias URN = Swift.String
public typealias PlaceID = Swift.Int64
public typealias UserPermissionsSet = [Swift.String]
public typealias PlaceZoneID = Swift.Int64
public typealias ThemeID = Swift.Int64
public typealias IconID = Swift.Int64
public typealias PlaceUserID = Swift.Int64
public typealias RoomID = Swift.Int64
public typealias DeviceProductID = Swift.Int64
public typealias DeviceID = Swift.Int64
public typealias NamiAlertID = Swift.Int64
public typealias EventID = Swift.Int64
public typealias InviteCode = Swift.String
public typealias SessionCode = Swift.String
public typealias SignInCode = Swift.String
public typealias SessionPermission = Swift.String
public typealias WiFiCredentialsUpdateSessionID = Swift.Int64
public typealias PropertyTypeID = Swift.Int64
public typealias PropertyElevationID = Swift.Int64
public typealias PropertyAvgFloorAreaID = Swift.Int64
public struct DeviceUniversalID : Swift.Equatable, Swift.Decodable, Swift.Hashable {
  public init?(_ string: Swift.String)
  public init(_ number: Swift.UInt64)
  public init(from decoder: any Swift.Decoder) throws
  public var macFormatted: Swift.String {
    get
  }
  public static func == (a: DeviceConnections.DeviceUniversalID, b: DeviceConnections.DeviceUniversalID) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension DeviceConnections.DeviceUniversalID : Swift.Comparable {
  public static func < (lhs: DeviceConnections.DeviceUniversalID, rhs: DeviceConnections.DeviceUniversalID) -> Swift.Bool
}
extension DeviceConnections.DeviceUniversalID : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension DeviceConnections.DeviceUniversalID {
  public static func randomValue() -> DeviceConnections.DeviceUniversalID
}
extension DeviceConnections.DeviceUniversalID : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Swift.UInt64 {
  public init?(_ uid: DeviceConnections.DeviceUniversalID)
}
public struct NamiDeviceModel : Swift.Equatable {
  public init(codeName: Swift.String, hardwareModel: Swift.String, productLabel: Swift.String, productId: DeviceConnections.DeviceProductID, capabilities: [DeviceConnections.NamiDeviceCapability], connectivity: [DeviceConnections.NamiDeviceConnectivity])
  public var codeName: Swift.String
  public var hardwareModel: Swift.String
  public var productLabel: Swift.String
  public var productId: DeviceConnections.DeviceProductID
  public var capabilities: [DeviceConnections.NamiDeviceCapability]
  public var connectivity: [DeviceConnections.NamiDeviceConnectivity]
  public static func == (a: DeviceConnections.NamiDeviceModel, b: DeviceConnections.NamiDeviceModel) -> Swift.Bool
}
extension DeviceConnections.NamiDeviceModel {
  public static let unknown: DeviceConnections.NamiDeviceModel
}
public enum NamiAlertMode : Swift.Int, Swift.Comparable, Swift.Codable {
  case armed
  case aware
  case relaxed
  public static func < (lhs: DeviceConnections.NamiAlertMode, rhs: DeviceConnections.NamiAlertMode) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Log {
  public static func info(_ items: Any...)
  public static func warning(_ items: Any...)
  public static func `if`(_ condition: Swift.Bool = true, run: () -> Swift.Void)
}
public enum ISO8601MsecDecoder {
  public static let defaultFormatter: Foundation.ISO8601DateFormatter
  public static func decodedDate(_ decoder: any Swift.Decoder) throws -> Foundation.Date
  public static func encodeDate(date: Foundation.Date, encoder: any Swift.Encoder) throws
}
extension Foundation.JSONDecoder {
  public static func ISO8601Msec() -> Foundation.JSONDecoder
}
extension Foundation.JSONEncoder {
  public static func ISO8601Msec() -> Foundation.JSONEncoder
}
public struct NamiDevicesEndpoint : Swift.Hashable {
  public init(uid: DeviceConnections.DeviceUniversalID, endpoint: Network.NWEndpoint, isAccessible: Swift.Bool = true)
  public init?(browserResult: Network.NWBrowser.Result, isAccessible: Swift.Bool = true)
  public let uid: DeviceConnections.DeviceUniversalID
  public let endpoint: Network.NWEndpoint
  public let isAccessible: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DeviceConnections.NamiDevicesEndpoint, b: DeviceConnections.NamiDevicesEndpoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BonjourServiceDiscoveryProtocol : AnyObject {
  static func subscribeOnResults(for service: Swift.String) -> DeviceConnections.BonjourPublisher
}
@_hasMissingDesignatedInitializers final public class BonjourServiceDiscovery : DeviceConnections.BonjourServiceDiscoveryProtocol {
  public static func subscribeOnResults(for service: Swift.String) -> DeviceConnections.BonjourPublisher
  @objc deinit
}
public typealias BonjourPublisher = Combine.AnyPublisher<Swift.Set<DeviceConnections.NamiDevicesEndpoint>, any Swift.Error>
extension Combine.AnyPublisher where Output == Swift.Set<DeviceConnections.NamiDevicesEndpoint>, Failure == any Swift.Error {
  public func endpoint(for uid: DeviceConnections.DeviceUniversalID) -> Combine.AnyPublisher<DeviceConnections.NamiDevicesEndpoint?, any Swift.Error>
}
extension Combine.AnyCancellable {
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  final public func store(in set: inout DeviceConnections.SyncSet<Combine.AnyCancellable>)
}
extension Combine.PassthroughSubject where Output == DeviceConnections.NamiDeviceObservation, Failure == Swift.Never {
  final public func deviceObservations(for deviceUid: DeviceConnections.DeviceUniversalID) -> Combine.AnyPublisher<Output, Failure>
  final public func deviceObservations(for deviceUids: [DeviceConnections.DeviceUniversalID]) -> Combine.AnyPublisher<Output, Failure>
}
public protocol DeviceConnectionsManagerProtocol {
  var publisher: Combine.PassthroughSubject<DeviceConnections.NamiDeviceObservation, Swift.Never> { get }
  func sendControlMessage(_ controlMessage: any DeviceConnections.ControlMessage, for capability: DeviceConnections.NamiDeviceCapability, uid: DeviceConnections.DeviceUniversalID, in placeId: DeviceConnections.PlaceID) -> Combine.AnyPublisher<DeviceConnections.NamiDeviceControlResponse, any Swift.Error>
  func deviceStateRequest(to device: DeviceConnections.DeviceUniversalID, connectedIn placeId: DeviceConnections.PlaceID) -> Combine.AnyPublisher<DeviceConnections.StateMessage, any Swift.Error>
}
public class DeviceConnectionsManager<Storage, API> : DeviceConnections.DeviceConnectionsManagerProtocol where Storage : DeviceConnections.DeviceConnectionsManagerStorageProtocol, API : DeviceConnections.DeviceConnectionsManagerWebAPIProtocol {
  public init(storage: Storage, bonjourPublisher: DeviceConnections.BonjourPublisher, api: API, coapInitializer: @escaping ([any DeviceConnections.PlaceKeyProtocol]) -> any DeviceConnections.CoAPConnectionsProtocol = CoAPConnections.init)
  @objc deinit
  public static var logging: Swift.Bool {
    get
  }
  final public let publisher: Combine.PassthroughSubject<DeviceConnections.NamiDeviceObservation, Swift.Never>
  public func sendControlMessage(_ controlMessage: any DeviceConnections.ControlMessage, for capability: DeviceConnections.NamiDeviceCapability, uid: DeviceConnections.DeviceUniversalID, in placeId: DeviceConnections.PlaceID) -> Combine.AnyPublisher<DeviceConnections.NamiDeviceControlResponse, any Swift.Error>
  public func deviceStateRequest(to deviceUid: DeviceConnections.DeviceUniversalID, connectedIn placeId: DeviceConnections.PlaceID) -> Combine.AnyPublisher<DeviceConnections.StateMessage, any Swift.Error>
}
public enum DeviceConnectionsManagerCommunicationError : Swift.RawRepresentable {
  case emptyPayload(DeviceConnections.SCMessage)
  case missingEndpoint
  case missingObservationManager
  case coapInitFailed
  case localControlSendTimeout
  case localStateRequestTimeout
  case localObservationTimeout
  case cloudStatePayloadMalformed
  case cloudMessageSendFailed(any Swift.Error)
  case cloudControlResponseMissing(DeviceConnections.DeviceUniversalID)
  public init?(rawValue _: Foundation.NSError)
  public typealias RawValue = Foundation.NSError
  public var rawValue: DeviceConnections.DeviceConnectionsManagerCommunicationError.RawValue {
    get
  }
  public static func errorThrowingPublisher<Output>(for error: DeviceConnections.DeviceConnectionsManagerCommunicationError) -> Combine.AnyPublisher<Output, any Swift.Error>
}
public struct NamiDeviceObservation {
  public init(uid: DeviceConnections.DeviceUniversalID, seqTime: Swift.UInt64, activity: [Swift.Int32]? = nil, state: DeviceConnections.StateMessage? = nil, error: (any Swift.Error)? = nil)
  public let uid: DeviceConnections.DeviceUniversalID
  public let seqTime: Swift.UInt64
  public let activity: [Swift.Int32]?
  public let state: DeviceConnections.StateMessage?
  public let error: (any Swift.Error)?
}
public protocol ControlMessage {
}
extension DeviceConnections.NamiDeviceModel {
  public func controlMessageType(for capability: DeviceConnections.NamiDeviceCapability) throws -> any DeviceConnections.ControlMessage.Type
}
extension DeviceConnections.NamiDeviceCapability {
  public func controlMessageType() throws -> any DeviceConnections.ControlMessage.Type
  public enum ControlMessgeError : Swift.Error {
    case noMessageType
    public static func == (a: DeviceConnections.NamiDeviceCapability.ControlMessgeError, b: DeviceConnections.NamiDeviceCapability.ControlMessgeError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct RelayOnOffMessage : DeviceConnections.ControlMessage {
  public init(isOn: Swift.Bool)
}
public struct DevkitLEDControlMessage : DeviceConnections.ControlMessage {
  public init(isOn: Swift.Bool? = nil, lightingLevel: Swift.UInt8? = nil, onLevel: Swift.UInt8? = nil, levelTransitionTime: Swift.UInt16? = nil, colorTemperature: Swift.UInt16? = nil, colorTransitionTime: Swift.UInt16? = nil)
}
public struct WiDarControlMessage : DeviceConnections.ControlMessage {
  public init(isPositioning: Swift.Bool)
}
public struct StateMessage {
  public struct EndpointState {
    public enum OnOff {
      case unknown
      case on
      case off
      public static func == (a: DeviceConnections.StateMessage.EndpointState.OnOff, b: DeviceConnections.StateMessage.EndpointState.OnOff) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Warning {
      case unknown
      case inactive
      case intrusion
      public static func == (a: DeviceConnections.StateMessage.EndpointState.Warning, b: DeviceConnections.StateMessage.EndpointState.Warning) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ColorControl {
      public var colorTemperatureMireds: Swift.UInt32
    }
    public struct LightingLevel {
      public var current: Swift.UInt32
      public var on: Swift.UInt32
    }
    public struct DeviceInfo {
      public var appVersion: Swift.String
    }
    public struct WiFiInfo {
      public var ssid: Foundation.Data
      public var bssid: Foundation.Data
      public var rssi: Swift.Int32
      public var channel: Swift.UInt32
    }
    public struct ThreadInfo {
      public var panId: Swift.UInt32
    }
    public struct WiDarInfo {
      public enum PositioningQuality {
        case unknown
        case good
        case degraded
        case poor
        public static func == (a: DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningQuality, b: DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningQuality) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public enum PositioningProcessState {
        case unknown
        case started
        case stopped
        public static func == (a: DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningProcessState, b: DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningProcessState) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var positioningQuality: DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningQuality
      public var positioningProcess: DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningProcessState
    }
    public var onOff: DeviceConnections.StateMessage.EndpointState.OnOff
    public var warning: DeviceConnections.StateMessage.EndpointState.Warning
    public var colorControl: DeviceConnections.StateMessage.EndpointState.ColorControl?
    public var lightingLevel: DeviceConnections.StateMessage.EndpointState.LightingLevel?
    public var deviceInfo: DeviceConnections.StateMessage.EndpointState.DeviceInfo?
    public var wiFiInfo: DeviceConnections.StateMessage.EndpointState.WiFiInfo?
    public var threadInfo: DeviceConnections.StateMessage.EndpointState.ThreadInfo?
    public var widarInfo: DeviceConnections.StateMessage.EndpointState.WiDarInfo?
  }
  public init?(serializedData: Foundation.Data)
  public func stateForModel(_ deviceModel: DeviceConnections.NamiDeviceModel) -> [DeviceConnections.StateMessage.EndpointState]
  public func stateForEndpoints(_ modelEndpoints: [DeviceConnections.NamiDeviceEndpoint]) -> [DeviceConnections.StateMessage.EndpointState]
  public func diagnosticsState() -> [DeviceConnections.StateMessage.EndpointState]
  public var connectedWithThtead: Swift.Bool {
    get
  }
  public var connectedWithWiFi: Swift.Bool {
    get
  }
  public var isBorderRouter: Swift.Bool {
    get
  }
  public var requiresPositioning: Swift.Bool {
    get
  }
}
public struct ControlResponseContent : DeviceConnections.DeviceCommandResponseContentProtocol {
  public var success: Swift.Bool
  public var error: DeviceConnections.ControlResponseError?
  public typealias DeviceConnections_DeviceCommandResponseError = DeviceConnections.ControlResponseError
}
public struct ControlResponseError : DeviceConnections.DeviceCommandResponseErrorProtocol {
  public var error: Swift.String
  public var errorCode: Swift.String
}
public struct NamiDeviceControlResponse {
  public enum CommunicationResult {
    case local(DeviceConnections.ControlResponseContent)
    case cloud(DeviceConnections.ControlResponseContent)
  }
  public let uid: DeviceConnections.DeviceUniversalID
  public let communicationResult: DeviceConnections.NamiDeviceControlResponse.CommunicationResult
}
final public class SyncSet<E> : DeviceConnections.SyncSetProtocol where E : Swift.Hashable {
  required public init()
  public init(_ wrappedValue: Swift.Set<E>)
  required public init<S>(_ elements: S) where E == S.Element, S : Swift.Sequence
  public init(minimumCapacity: Swift.Int)
  public typealias Element = E
  public typealias Index = Swift.Set<E>.Index
  final public var startIndex: DeviceConnections.SyncSet<E>.Index {
    get
  }
  final public var endIndex: DeviceConnections.SyncSet<E>.Index {
    get
  }
  final public var count: Swift.Int {
    get
  }
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
  final public var capacity: Swift.Int {
    get
  }
  final public var customMirror: Swift.Mirror {
    get
  }
  final public var underestimatedCount: Swift.Int {
    get
  }
  final public var lazy: Swift.LazySequence<Swift.Set<E>> {
    get
  }
  public static func == (lhs: DeviceConnections.SyncSet<E>, rhs: DeviceConnections.SyncSet<E>) -> Swift.Bool
  final public func index(after i: DeviceConnections.SyncSet<E>.Index) -> DeviceConnections.SyncSet<E>.Index
  final public func index(_ i: DeviceConnections.SyncSet<E>.Index, offsetBy distance: Swift.Int) -> DeviceConnections.SyncSet<E>.Index
  final public func index(_ i: DeviceConnections.SyncSet<E>.Index, offsetBy distance: Swift.Int, limitedBy limit: DeviceConnections.SyncSet<E>.Index) -> DeviceConnections.SyncSet<E>.Index?
  final public func formIndex(_ i: inout DeviceConnections.SyncSet<E>.Index, offsetBy distance: Swift.Int)
  final public func formIndex(_ i: inout DeviceConnections.SyncSet<E>.Index, offsetBy distance: Swift.Int, limitedBy limit: DeviceConnections.SyncSet<E>.Index) -> Swift.Bool
  final public func distance(from start: DeviceConnections.SyncSet<E>.Index, to end: DeviceConnections.SyncSet<E>.Index) -> Swift.Int
  @available(swift 4.0)
  final public func filter(_ isIncluded: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> Swift.Set<DeviceConnections.SyncSet<E>.Element>
  final public func subtract(_ other: Swift.Set<DeviceConnections.SyncSet<E>.Element>)
  final public func isSubset(of other: Swift.Set<DeviceConnections.SyncSet<E>.Element>) -> Swift.Bool
  final public func isSuperset(of other: Swift.Set<DeviceConnections.SyncSet<E>.Element>) -> Swift.Bool
  final public func isDisjoint(with other: Swift.Set<DeviceConnections.SyncSet<E>.Element>) -> Swift.Bool
  final public func subtracting(_ other: Swift.Set<DeviceConnections.SyncSet<E>.Element>) -> Swift.Set<DeviceConnections.SyncSet<E>.Element>
  final public func isStrictSuperset(of other: Swift.Set<DeviceConnections.SyncSet<E>.Element>) -> Swift.Bool
  final public func isStrictSubset(of other: Swift.Set<DeviceConnections.SyncSet<E>.Element>) -> Swift.Bool
  final public func intersection(_ other: Swift.Set<DeviceConnections.SyncSet<E>.Element>) -> Swift.Set<DeviceConnections.SyncSet<E>.Element>
  final public func formSymmetricDifference(_ other: Swift.Set<DeviceConnections.SyncSet<E>.Element>)
  final public func popFirst() -> DeviceConnections.SyncSet<E>.Element?
  final public func reserveCapacity(_ minimumCapacity: Swift.Int)
  final public func map<T>(_ transform: (DeviceConnections.SyncSet<E>.Element) throws -> T) rethrows -> [T]
  final public func dropFirst(_ k: Swift.Int = 1) -> Swift.Slice<Swift.Set<DeviceConnections.SyncSet<E>.Element>>
  final public func split(maxSplits: Swift.Int = Int.max, omittingEmptySubsequences: Swift.Bool = true, whereSeparator isSeparator: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> [Swift.Slice<Swift.Set<DeviceConnections.SyncSet<E>.Element>>]
  final public func split(separator: DeviceConnections.SyncSet<E>.Element, maxSplits: Swift.Int = Int.max, omittingEmptySubsequences: Swift.Bool = true) -> [Swift.Slice<Swift.Set<DeviceConnections.SyncSet<E>.Element>>]
  final public subscript(position: DeviceConnections.SyncSet<E>.Index) -> E {
    get
  }
  final public func formIndex(after i: inout DeviceConnections.SyncSet<E>.Index)
  final public func union(_ other: DeviceConnections.SyncSet<E>) -> DeviceConnections.SyncSet<E>
  final public func hash(into hasher: inout Swift.Hasher)
  final public func intersection(_ other: DeviceConnections.SyncSet<E>) -> Self
  final public func symmetricDifference(_ other: __owned DeviceConnections.SyncSet<E>) -> Self
  final public func insert(_ newMember: __owned E) -> (inserted: Swift.Bool, memberAfterInsert: E)
  final public func remove(_ member: E) -> E?
  final public func update(with newMember: __owned E) -> E?
  final public func formUnion(_ other: __owned DeviceConnections.SyncSet<E>)
  final public func formIntersection(_ other: DeviceConnections.SyncSet<E>)
  final public func formSymmetricDifference(_ other: __owned DeviceConnections.SyncSet<E>)
  final public func removeAll()
  final public func makeIterator() -> Swift.Set<E>.Iterator
  final public func withContiguousStorageIfAvailable<R>(_ body: (_ buffer: Swift.UnsafeBufferPointer<DeviceConnections.SyncSet<E>.Element>) throws -> R) rethrows -> R?
  final public func shuffled(using generator: inout some RandomNumberGenerator) -> [DeviceConnections.SyncSet<E>.Element]
  final public func shuffled() -> [DeviceConnections.SyncSet<E>.Element]
  final public func filter(_ isIncluded: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> [DeviceConnections.SyncSet<E>.Element]
  final public func forEach(_ body: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Void) rethrows
  final public func first(where predicate: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> DeviceConnections.SyncSet<E>.Element?
  final public func split(maxSplits: Swift.Int = Int.max, omittingEmptySubsequences: Swift.Bool = true, whereSeparator isSeparator: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> [Swift.ArraySlice<DeviceConnections.SyncSet<E>.Element>]
  final public func suffix(_ maxLength: Swift.Int) -> [DeviceConnections.SyncSet<E>.Element]
  final public func dropLast(_ k: Swift.Int = 1) -> [DeviceConnections.SyncSet<E>.Element]
  final public func drop(while predicate: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> Swift.DropWhileSequence<Swift.Set<E>>
  final public func prefix(_ maxLength: Swift.Int) -> Swift.PrefixSequence<Swift.Set<E>>
  final public func prefix(while predicate: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> [DeviceConnections.SyncSet<E>.Element]
  final public func enumerated() -> Swift.EnumeratedSequence<Swift.Set<E>>
  final public func min(by areInIncreasingOrder: (DeviceConnections.SyncSet<E>.Element, DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> DeviceConnections.SyncSet<E>.Element?
  final public func max(by areInIncreasingOrder: (DeviceConnections.SyncSet<E>.Element, DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> DeviceConnections.SyncSet<E>.Element?
  final public func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix, by areEquivalent: (DeviceConnections.SyncSet<E>.Element, PossiblePrefix.Element) throws -> Swift.Bool) rethrows -> Swift.Bool where PossiblePrefix : Swift.Sequence
  final public func elementsEqual<OtherSequence>(_ other: OtherSequence, by areEquivalent: (DeviceConnections.SyncSet<E>.Element, OtherSequence.Element) throws -> Swift.Bool) rethrows -> Swift.Bool where OtherSequence : Swift.Sequence
  final public func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence, by areInIncreasingOrder: (DeviceConnections.SyncSet<E>.Element, DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> Swift.Bool where E == OtherSequence.Element, OtherSequence : Swift.Sequence
  final public func contains(where predicate: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> Swift.Bool
  final public func allSatisfy(_ predicate: (DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> Swift.Bool
  final public func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (_ partialResult: Result, DeviceConnections.SyncSet<E>.Element) throws -> Result) rethrows -> Result
  final public func reduce<Result>(into initialResult: Result, _ updateAccumulatingResult: (_ partialResult: inout Result, DeviceConnections.SyncSet<E>.Element) throws -> Swift.Void) rethrows -> Result
  final public func reversed() -> [DeviceConnections.SyncSet<E>.Element]
  final public func flatMap(_: (DeviceConnections.SyncSet<E>.Element) throws -> E) rethrows -> [E] where E : Swift.Sequence
  final public func compactMap(_ transform: (DeviceConnections.SyncSet<E>.Element) throws -> E?) rethrows -> [E]
  final public func sorted(by areInIncreasingOrder: (DeviceConnections.SyncSet<E>.Element, DeviceConnections.SyncSet<E>.Element) throws -> Swift.Bool) rethrows -> [DeviceConnections.SyncSet<E>.Element]
  public typealias ArrayLiteralElement = DeviceConnections.SyncSet<E>.Element
  public typealias Indices = Swift.DefaultIndices<DeviceConnections.SyncSet<E>>
  public typealias Iterator = Swift.Set<E>.Iterator
  public typealias SubSequence = Swift.Slice<DeviceConnections.SyncSet<E>>
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
extension DeviceConnections.SyncSet where E : Swift.Sequence {
  final public func joined() -> Swift.FlattenSequence<Swift.Set<DeviceConnections.SyncSet<E>.Element>>
  final public func joined(separator: some Sequence<Element.Element>) -> Swift.JoinedSequence<Swift.Set<DeviceConnections.SyncSet<E>.Element>>
}
extension DeviceConnections.SyncSet {
  final public func split(separator: DeviceConnections.SyncSet<E>.Element, maxSplits: Swift.Int = Int.max, omittingEmptySubsequences: Swift.Bool = true) -> [Swift.ArraySlice<DeviceConnections.SyncSet<E>.Element>]
  final public func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix) -> Swift.Bool where E == PossiblePrefix.Element, PossiblePrefix : Swift.Sequence
  final public func elementsEqual<OtherSequence>(_ other: OtherSequence) -> Swift.Bool where E == OtherSequence.Element, OtherSequence : Swift.Sequence
  final public func contains(_ element: DeviceConnections.SyncSet<E>.Element) -> Swift.Bool
}
extension DeviceConnections.SyncSet where E : Swift.Comparable {
  @warn_unqualified_access
  final public func min() -> DeviceConnections.SyncSet<E>.Element?
  @warn_unqualified_access
  final public func max() -> DeviceConnections.SyncSet<E>.Element?
  final public func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence) -> Swift.Bool where E == OtherSequence.Element, OtherSequence : Swift.Sequence
  final public func sorted() -> [DeviceConnections.SyncSet<E>.Element]
}
extension DeviceConnections.SyncSet where E : Swift.StringProtocol {
  final public func joined(separator: Swift.String = "") -> Swift.String
}
public protocol SyncSetProtocol : Swift.Collection, Swift.CustomDebugStringConvertible, Swift.CustomReflectable, Swift.CustomStringConvertible, Swift.Hashable, Swift.SetAlgebra where Self.Element : Swift.Hashable {
}
extension Swift.Set : DeviceConnections.SyncSetProtocol {
}
public protocol CoAPConnectionsProtocol : AnyObject {
  init()
  init(placeKeys: [any DeviceConnections.PlaceKeyProtocol])
  init(placeKeys: [any DeviceConnections.PlaceKeyProtocol], date: Foundation.Date)
  func areSamePresahedKeys(placeKeys: [any DeviceConnections.PlaceKeyProtocol]) -> Swift.Bool
  func getRequest(to endpoint: Network.NWEndpoint, path: Swift.String?) -> DeviceConnections.CoAPMessagePublisher
  func postMessage(_ message: Foundation.Data, to endpoint: Network.NWEndpoint, path: Swift.String?) -> DeviceConnections.CoAPMessagePublisher
  func subscribeObserver(at endpoint: Network.NWEndpoint, path: Swift.String?, timeout: Swift.Int?) -> DeviceConnections.CoAPMessagePublisher
  func unsubscribeFromAll()
  static func endpoint(forHost host: Swift.String, port: Swift.UInt16) -> Network.NWEndpoint
}
extension DeviceConnections.CoAPConnectionsProtocol {
  public static func endpoint(forHost host: Swift.String, port: Swift.UInt16) -> Network.NWEndpoint
}
public enum CoAPConnectionsErrors {
  public static let timeoutError: Foundation.NSError
}
public typealias CoAPMessagePublisher = Combine.AnyPublisher<DeviceConnections.SCMessage, any Swift.Error>
final public class CoAPConnections : DeviceConnections.CoAPConnectionsProtocol {
  public init()
  convenience public init(placeKeys: [any DeviceConnections.PlaceKeyProtocol])
  public init(placeKeys: [any DeviceConnections.PlaceKeyProtocol], date: Foundation.Date)
  final public func areSamePresahedKeys(placeKeys: [any DeviceConnections.PlaceKeyProtocol]) -> Swift.Bool
  final public func getRequest(to endpoint: Network.NWEndpoint, path: Swift.String? = nil) -> DeviceConnections.CoAPMessagePublisher
  final public func postMessage(_ message: Foundation.Data, to endpoint: Network.NWEndpoint, path: Swift.String? = nil) -> DeviceConnections.CoAPMessagePublisher
  final public func subscribeObserver(at endpoint: Network.NWEndpoint, path: Swift.String? = nil, timeout: Swift.Int?) -> DeviceConnections.CoAPMessagePublisher
  final public func unsubscribeFromAll()
  @objc deinit
}
extension DeviceConnections.CoAPConnections {
  public enum MessageSubscriptionType {
    case observing
    case oneoffGet
    case oneoffPost(message: Foundation.Data)
  }
  @_hasMissingDesignatedInitializers public class MessageSubscription<S> : DeviceConnections.SCClientDelegate, Combine.Subscription where S : Combine.Subscriber, S.Failure == any Swift.Error, S.Input == DeviceConnections.SCMessage {
    public func swiftCoapClient(_ client: DeviceConnections.SCClient, didReceiveMessage message: DeviceConnections.SCMessage)
    public func swiftCoapClient(_ client: DeviceConnections.SCClient, didFailWithError error: Foundation.NSError)
    public func swiftCoapClient(_: DeviceConnections.SCClient, didSendMessage _: DeviceConnections.SCMessage, number _: Swift.Int)
    public func request(_: Combine.Subscribers.Demand)
    public func cancel()
    @objc deinit
  }
  public struct MessagePublisher : Combine.Publisher {
    public init(withTransport transport: any DeviceConnections.SCCoAPTransportLayerProtocol, endpoint: Network.NWEndpoint, path: Swift.String? = nil, type: DeviceConnections.CoAPConnections.MessageSubscriptionType = .observing)
    public typealias Output = DeviceConnections.SCMessage
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == any Swift.Error, S.Input == DeviceConnections.SCMessage
  }
}
public protocol DeviceConnectionsManagerWebAPIProtocol {
  associatedtype DeviceConnections_DevicesCommandResponse : DeviceConnections.DevicesCommandResponseProtocol
  associatedtype DeviceConnections_DevicesResponse : DeviceConnections.DevicesResponseProtocol
  func sendDeviceCommandRequests(in placeId: DeviceConnections.PlaceID, uids: [DeviceConnections.DeviceUniversalID], messages: [Foundation.Data]) -> Combine.AnyPublisher<Self.DeviceConnections_DevicesCommandResponse, any Swift.Error>
  func listDevices(query: any DeviceConnections.DevicesQueryProtocol) -> Combine.AnyPublisher<Self.DeviceConnections_DevicesResponse, any Swift.Error>
}
public protocol DevicesCommandResponseProtocol {
  associatedtype DeviceConnections_DeviceCommandResponseResult : DeviceConnections.DeviceCommandResponseResultProtocol
  var seqTime: Swift.UInt64 { get }
  var results: [Self.DeviceConnections_DeviceCommandResponseResult] { get }
}
public protocol DeviceCommandResponseResultProtocol {
  associatedtype DeviceConnections_DeviceCommandResponseContent : DeviceConnections.DeviceCommandResponseContentProtocol
  var devices: [DeviceConnections.DeviceUniversalID : Self.DeviceConnections_DeviceCommandResponseContent] { get }
}
public protocol DeviceCommandResponseContentProtocol {
  associatedtype DeviceConnections_DeviceCommandResponseError : DeviceConnections.DeviceCommandResponseErrorProtocol
  var success: Swift.Bool { get }
  var error: Self.DeviceConnections_DeviceCommandResponseError? { get }
}
public protocol DevicesResponseProtocol {
  associatedtype Device : DeviceConnections.DeviceProtocol
  var devices: [Self.Device] { get }
  var total: Swift.Int { get }
}
public protocol DeviceProtocol : Swift.Equatable {
  associatedtype DeviceCloudState : DeviceConnections.DeviceCloudStateProtocol
  var id: DeviceConnections.DeviceID { get }
  var uid: DeviceConnections.DeviceUniversalID { get }
  var urn: Swift.String { get }
  var name: Swift.String { get }
  var deviceState: Self.DeviceCloudState? { get }
}
public protocol DeviceCloudStateProtocol : Swift.Equatable {
  var payload: Foundation.Data { get }
  var seqTime: Swift.UInt64 { get }
}
public protocol DevicesQueryProtocol {
  var placeIds: [DeviceConnections.PlaceID] { get set }
  var zoneIds: [DeviceConnections.PlaceZoneID] { get set }
  var roomIds: [DeviceConnections.RoomID] { get set }
  var uids: [DeviceConnections.DeviceUniversalID] { get set }
  var cursor: Swift.String? { get set }
}
public protocol DeviceCommandResponseErrorProtocol : Swift.Error {
  var error: Swift.String { get }
  var errorCode: Swift.String { get }
}
public protocol DeviceConnectionsManagerStorageProtocol {
  associatedtype DeviceConnectionsManager_PlaceKey : DeviceConnections.PlaceKeyProtocol
  func placeIds() -> Combine.AnyPublisher<[DeviceConnections.PlaceID], Swift.Never>
  func placeKeys() -> Combine.AnyPublisher<[Self.DeviceConnectionsManager_PlaceKey], Swift.Never>
  func deviceUids(placeId: DeviceConnections.PlaceID) -> Combine.AnyPublisher<[DeviceConnections.DeviceUniversalID], Swift.Never>
  func updateDeviceState(uid: DeviceConnections.DeviceUniversalID, state: Foundation.Data, seqTime: Swift.UInt64) throws
  func refreshPlaceKeys() -> Combine.AnyPublisher<Swift.Void, any Swift.Error>
  func refreshDevices(placeId: DeviceConnections.PlaceID) -> Combine.AnyPublisher<Swift.Void, any Swift.Error>
}
public protocol PlaceKeyProtocol {
  var id: Swift.String { get }
  var placeId: DeviceConnections.PlaceID { get }
  var valid: Foundation.DateInterval { get }
  var key: Foundation.Data { get }
}
public struct StorablePlaceKey : Swift.Codable, Swift.Equatable {
  public init(id: Swift.String, key: Swift.String)
  public var id: Swift.String
  public var key: Swift.String
  public static func == (a: DeviceConnections.StorablePlaceKey, b: DeviceConnections.StorablePlaceKey) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias StoredPlaceKeys = [DeviceConnections.PlaceID : [DeviceConnections.StorablePlaceKey]]
final public class PlaceKeysStorage {
  public init()
  final public var publisher: Combine.AnyPublisher<DeviceConnections.StoredPlaceKeys, Swift.Never> {
    get
  }
  final public func storeKeys(_ keys: DeviceConnections.StoredPlaceKeys)
  final public func storeKeys(_ keys: [DeviceConnections.StorablePlaceKey], forPlace placeId: DeviceConnections.PlaceID)
  final public func getKeys() -> DeviceConnections.StoredPlaceKeys
  final public func getKeys(forPlace placeId: DeviceConnections.PlaceID) -> [DeviceConnections.StorablePlaceKey]
  final public func removeAll()
  @objc deinit
}
public enum KeychainError : Swift.Error, Swift.Equatable {
  case notFound
  case systemError
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DeviceConnections.KeychainError, b: DeviceConnections.KeychainError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum SecureStorage {
  public static func storeOrUpdate(with data: Foundation.Data, at key: Swift.String, server: Swift.String)
  public static func retrieve(at key: Swift.String, server: Swift.String) -> Swift.Result<Foundation.Data, DeviceConnections.KeychainError>
  public static func delete(at key: Swift.String, server: Swift.String)
}
public enum SCCoAPTransportLayerError : Swift.Error {
  case setupError(errorDescription: Swift.String), sendError(errorDescription: Swift.String), encodeError, pingTimeoutError
}
public protocol SCCoAPTransportLayerDelegate {
  func transportLayerObject(_ transportLayerObject: any DeviceConnections.SCCoAPTransportLayerProtocol, didReceiveData data: Foundation.Data, fromHost host: Swift.String, port: Swift.UInt16)
  func transportLayerObject(_ transportLayerObject: any DeviceConnections.SCCoAPTransportLayerProtocol, didReceiveData data: Foundation.Data, fromEndpoint endpoint: Network.NWEndpoint)
  func transportLayerObject(_ transportLayerObject: any DeviceConnections.SCCoAPTransportLayerProtocol, didFailWithError error: Foundation.NSError)
}
extension DeviceConnections.SCCoAPTransportLayerDelegate {
  public func transportLayerObject(_ transportLayerObject: any DeviceConnections.SCCoAPTransportLayerProtocol, didReceiveData data: Foundation.Data, fromHost host: Swift.String, port: Swift.UInt16)
}
public protocol SCCoAPTransportLayerProtocol {
  func sendCoAPMessage(_ message: DeviceConnections.SCMessage, toEndpoint endpoint: Network.NWEndpoint, token: Swift.UInt64?, delegate: (any DeviceConnections.SCCoAPTransportLayerDelegate)?) throws
  func getMessageId(for endpoint: Network.NWEndpoint) -> Swift.UInt16
  func cancelMessageTransmission(to endpoint: Network.NWEndpoint, withToken: Swift.UInt64)
  func cancelConnection(to endpoint: Network.NWEndpoint)
  func closeAllTransmissions()
}
public struct MessageTransportIdentifier : Swift.Equatable, Swift.Hashable {
  public static func == (a: DeviceConnections.MessageTransportIdentifier, b: DeviceConnections.MessageTransportIdentifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MessageTransportDelegate {
}
public struct CoAPConnection {
}
final public class SCCoAPUDPTransportLayer {
  required public init()
  @objc deinit
}
extension DeviceConnections.SCCoAPUDPTransportLayer : DeviceConnections.SCCoAPTransportLayerProtocol {
  convenience public init?(psk: Swift.String, suite: Security.SSLCipherSuite = TLS_PSK_WITH_AES_128_GCM_SHA256)
  convenience public init(psk: Foundation.Data, suite: Security.SSLCipherSuite = TLS_PSK_WITH_AES_128_GCM_SHA256)
  convenience public init(networkParameters: Network.NWParameters)
  final public func getMessageId(for endpoint: Network.NWEndpoint) -> Swift.UInt16
  final public func sendCoAPMessage(_ message: DeviceConnections.SCMessage, toEndpoint endpoint: Network.NWEndpoint, token: Swift.UInt64?, delegate: (any DeviceConnections.SCCoAPTransportLayerDelegate)?) throws
  final public func cancelMessageTransmission(to endpoint: Network.NWEndpoint, withToken token: Swift.UInt64)
  final public func closeAllTransmissions()
  final public func cancelConnection(to endpoint: Network.NWEndpoint)
}
public enum SCType : Swift.Int {
  case confirmable, nonConfirmable, acknowledgement, reset
  public func shortString() -> Swift.String
  public func longString() -> Swift.String
  public static func fromShortString(_ string: Swift.String) -> DeviceConnections.SCType?
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SCOption : Swift.Int {
  case ifMatch
  case uriHost
  case etag
  case ifNoneMatch
  case observe
  case uriPort
  case locationPath
  case uriPath
  case contentFormat
  case maxAge
  case uriQuery
  case accept
  case locationQuery
  case block2
  case block1
  case size2
  case proxyUri
  case proxyScheme
  case size1
  public enum Format : Swift.Int {
    case empty, opaque, uInt, string
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func toString() -> Swift.String
  public static func isNumberCritical(_ optionNo: Swift.Int) -> Swift.Bool
  public func isCritical() -> Swift.Bool
  public static func isNumberUnsafe(_ optionNo: Swift.Int) -> Swift.Bool
  public func isUnsafe() -> Swift.Bool
  public static func isNumberNoCacheKey(_ optionNo: Swift.Int) -> Swift.Bool
  public func isNoCacheKey() -> Swift.Bool
  public static func isNumberRepeatable(_ optionNo: Swift.Int) -> Swift.Bool
  public func isRepeatable() -> Swift.Bool
  public func format() -> DeviceConnections.SCOption.Format
  public func dataForValueString(_ valueString: Swift.String) -> Foundation.Data?
  public static func dataForOptionValueString(_ valueString: Swift.String, format: DeviceConnections.SCOption.Format) -> Foundation.Data?
  public func displayStringForData(_ data: Foundation.Data?) -> Swift.String
  public static func displayStringForFormat(_ format: DeviceConnections.SCOption.Format, data: Foundation.Data?) -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SCCodeSample : Swift.Int {
  case empty
  case get
  case post
  case put
  case delete
  case created
  case deleted
  case valid
  case changed
  case content
  case `continue`
  case badRequest
  case unauthorized
  case badOption
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case requestEntityIncomplete
  case preconditionFailed
  case requestEntityTooLarge
  case unsupportedContentFormat
  case internalServerError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case proxyingNotSupported
  public func codeValue() -> DeviceConnections.SCCodeValue!
  public func toString() -> Swift.String
  public static func stringFromCodeValue(_ codeValue: DeviceConnections.SCCodeValue) -> Swift.String?
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SCContentFormat : Swift.UInt {
  case plain
  case linkFormat
  case xml
  case octetStream
  case exi
  case json
  case cbor
  public func needsStringUTF8Conversion() -> Swift.Bool
  public func toString() -> Swift.String
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public struct SCCodeValue : Swift.Equatable {
  public init(rawValue: Swift.UInt8)
  public init?(classValue: Swift.UInt8, detailValue: Swift.UInt8)
  public func toRawValue() -> Swift.UInt8
  public func toCodeSample() -> DeviceConnections.SCCodeSample?
  public static func fromCodeSample(_ code: DeviceConnections.SCCodeSample) -> DeviceConnections.SCCodeValue
  public func toString() -> Swift.String
  public func requestString() -> Swift.String?
}
public func == (lhs: DeviceConnections.SCCodeValue, rhs: DeviceConnections.SCCodeValue) -> Swift.Bool
extension Swift.UInt {
  public func toByteArray() -> [Swift.UInt8]
  public static func fromData(_ data: Foundation.Data) -> Swift.UInt
}
public enum SCAllowedRoute : Swift.UInt {
  case get
  case post
  case put
  case delete
  public init?(codeValue: DeviceConnections.SCCodeValue)
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc open class SCResourceModel : ObjectiveC.NSObject {
  final public let name: Swift.String
  final public let allowedRoutes: Swift.UInt
  public var maxAgeValue: Swift.UInt!
  public var dataRepresentation: Foundation.Data! {
    get
    set
  }
  public var observable: Swift.Bool
  public init(name: Swift.String, allowedRoutes: Swift.UInt)
  open func willHandleDataAsynchronouslyForRoute(_: DeviceConnections.SCAllowedRoute, queryDictionary _: [Swift.String : Swift.String], options _: [Swift.Int : [Foundation.Data]], originalMessage _: DeviceConnections.SCMessage) -> Swift.Bool
  open func dataForGet(queryDictionary _: [Swift.String : Swift.String], options _: [Swift.Int : [Foundation.Data]]) -> (statusCode: DeviceConnections.SCCodeValue, payloadData: Foundation.Data?, contentFormat: DeviceConnections.SCContentFormat?)?
  open func dataForPost(queryDictionary _: [Swift.String : Swift.String], options _: [Swift.Int : [Foundation.Data]], requestData _: Foundation.Data?) -> (statusCode: DeviceConnections.SCCodeValue, payloadData: Foundation.Data?, contentFormat: DeviceConnections.SCContentFormat?, locationUri: Swift.String?)?
  open func dataForPut(queryDictionary _: [Swift.String : Swift.String], options _: [Swift.Int : [Foundation.Data]], requestData _: Foundation.Data?) -> (statusCode: DeviceConnections.SCCodeValue, payloadData: Foundation.Data?, contentFormat: DeviceConnections.SCContentFormat?, locationUri: Swift.String?)?
  open func dataForDelete(queryDictionary _: [Swift.String : Swift.String], options _: [Swift.Int : [Foundation.Data]]) -> (statusCode: DeviceConnections.SCCodeValue, payloadData: Foundation.Data?, contentFormat: DeviceConnections.SCContentFormat?)?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SCMessage : ObjectiveC.NSObject {
  public var code: DeviceConnections.SCCodeValue
  public var type: DeviceConnections.SCType
  public var payload: Foundation.Data?
  public var options: [Swift.Int : [Foundation.Data]] {
    get
    set
  }
  public var blockBody: Foundation.Data? {
    get
  }
  public var endpoint: Network.NWEndpoint? {
    get
  }
  public var resourceForConfirmableResponse: DeviceConnections.SCResourceModel? {
    get
  }
  public var messageId: Swift.UInt16! {
    get
  }
  public var token: Swift.UInt64 {
    get
  }
  convenience public init(code: DeviceConnections.SCCodeValue, type: DeviceConnections.SCType, payload: Foundation.Data?)
  public func equalForCachingWithMessage(_ message: DeviceConnections.SCMessage) -> Swift.Bool
  public static func compareOptionValueArrays(_ first: [Foundation.Data], second: [Foundation.Data]) -> Swift.Bool
  public static func copyFromMessage(_ message: DeviceConnections.SCMessage) -> DeviceConnections.SCMessage
  public func isFresh() -> Swift.Bool
  public func addOption(_ option: Swift.Int, data: Foundation.Data)
  public func toData() -> Foundation.Data?
  public static func fromData(_ data: Foundation.Data) -> DeviceConnections.SCMessage?
  public func toHttpUrlRequestWithUrl() -> Foundation.NSMutableURLRequest
  public static func fromHttpUrlResponse(_ urlResponse: Foundation.HTTPURLResponse, data: Foundation.Data!) -> DeviceConnections.SCMessage
  public func completeUriPath() -> Swift.String
  public func uriQueryDictionary() -> [Swift.String : Swift.String]
  public static func getPathAndQueryDataArrayFromUriString(_ uriString: Swift.String) -> (pathDataArray: [Foundation.Data], queryDataArray: [Foundation.Data])?
  public func inferredContentFormat() -> DeviceConnections.SCContentFormat
  public func payloadRepresentationString() -> Swift.String
  public static func payloadRepresentationStringForData(_ data: Foundation.Data, contentFormat: DeviceConnections.SCContentFormat) -> Swift.String
  public func isObservation() -> Swift.Bool
  public func toString() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol SCClientDelegate {
  func swiftCoapClient(_ client: DeviceConnections.SCClient, didReceiveMessage message: DeviceConnections.SCMessage)
  func swiftCoapClient(_ client: DeviceConnections.SCClient, didFailWithError error: Foundation.NSError)
  func swiftCoapClient(_ client: DeviceConnections.SCClient, didSendMessage message: DeviceConnections.SCMessage, number: Swift.Int)
}
public enum SCClientErrorCode : Swift.Int {
  case transportLayerSendError, messageInvalidForSendingError, receivedInvalidMessageError, noResponseExpectedError, proxyingError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class SCClient {
  public var delegate: (any DeviceConnections.SCClientDelegate)?
  public var autoBlock1SZX: Swift.UInt? {
    get
    set
  }
  public var httpProxyingData: (hostName: Swift.String, port: Swift.UInt16)?
  public var cachingActive: Swift.Bool
  public var disableRetransmissions: Swift.Bool
  public init(delegate: (any DeviceConnections.SCClientDelegate)?, transportLayerObject: any DeviceConnections.SCCoAPTransportLayerProtocol)
  public func sendCoAPMessage(_ message: DeviceConnections.SCMessage, endpoint: Network.NWEndpoint)
  public func cancelObserve()
  public func closeTransmission()
  @objc deinit
}
extension DeviceConnections.SCClient : DeviceConnections.SCCoAPTransportLayerDelegate {
  public func transportLayerObject(_: any DeviceConnections.SCCoAPTransportLayerProtocol, didReceiveData data: Foundation.Data, fromEndpoint endpoint: Network.NWEndpoint)
  public func transportLayerObject(_: any DeviceConnections.SCCoAPTransportLayerProtocol, didFailWithError error: Foundation.NSError)
}
extension DeviceConnections.AuthenticationError : Swift.Equatable {}
extension DeviceConnections.AuthenticationError : Swift.Hashable {}
extension DeviceConnections.NamiDeviceCapability : Swift.Hashable {}
extension DeviceConnections.NamiDeviceEndpoint.EndpointType.ReadableCluster : Swift.Equatable {}
extension DeviceConnections.NamiDeviceEndpoint.EndpointType.ReadableCluster : Swift.Hashable {}
extension DeviceConnections.NamiDeviceEndpoint.EndpointType.WritableCluster : Swift.Equatable {}
extension DeviceConnections.NamiDeviceEndpoint.EndpointType.WritableCluster : Swift.Hashable {}
extension DeviceConnections.MeasurementSystem : Swift.Equatable {}
extension DeviceConnections.MeasurementSystem : Swift.Hashable {}
extension DeviceConnections.NamiDeviceConnectivity : Swift.Equatable {}
extension DeviceConnections.NamiDeviceConnectivity : Swift.Hashable {}
extension DeviceConnections.NamiAlertMode : Swift.Hashable {}
extension DeviceConnections.NamiAlertMode : Swift.RawRepresentable {}
extension DeviceConnections.NamiDeviceCapability.ControlMessgeError : Swift.Equatable {}
extension DeviceConnections.NamiDeviceCapability.ControlMessgeError : Swift.Hashable {}
extension DeviceConnections.StateMessage.EndpointState.OnOff : Swift.Equatable {}
extension DeviceConnections.StateMessage.EndpointState.OnOff : Swift.Hashable {}
extension DeviceConnections.StateMessage.EndpointState.Warning : Swift.Equatable {}
extension DeviceConnections.StateMessage.EndpointState.Warning : Swift.Hashable {}
extension DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningQuality : Swift.Equatable {}
extension DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningQuality : Swift.Hashable {}
extension DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningProcessState : Swift.Equatable {}
extension DeviceConnections.StateMessage.EndpointState.WiDarInfo.PositioningProcessState : Swift.Hashable {}
extension DeviceConnections.KeychainError : Swift.Hashable {}
extension DeviceConnections.SCType : Swift.Equatable {}
extension DeviceConnections.SCType : Swift.Hashable {}
extension DeviceConnections.SCType : Swift.RawRepresentable {}
extension DeviceConnections.SCOption : Swift.Equatable {}
extension DeviceConnections.SCOption : Swift.Hashable {}
extension DeviceConnections.SCOption : Swift.RawRepresentable {}
extension DeviceConnections.SCOption.Format : Swift.Equatable {}
extension DeviceConnections.SCOption.Format : Swift.Hashable {}
extension DeviceConnections.SCOption.Format : Swift.RawRepresentable {}
extension DeviceConnections.SCCodeSample : Swift.Equatable {}
extension DeviceConnections.SCCodeSample : Swift.Hashable {}
extension DeviceConnections.SCCodeSample : Swift.RawRepresentable {}
extension DeviceConnections.SCContentFormat : Swift.Equatable {}
extension DeviceConnections.SCContentFormat : Swift.Hashable {}
extension DeviceConnections.SCContentFormat : Swift.RawRepresentable {}
extension DeviceConnections.SCAllowedRoute : Swift.Equatable {}
extension DeviceConnections.SCAllowedRoute : Swift.Hashable {}
extension DeviceConnections.SCAllowedRoute : Swift.RawRepresentable {}
extension DeviceConnections.SCClientErrorCode : Swift.Equatable {}
extension DeviceConnections.SCClientErrorCode : Swift.Hashable {}
extension DeviceConnections.SCClientErrorCode : Swift.RawRepresentable {}
